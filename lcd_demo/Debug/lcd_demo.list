
lcd_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080066c0  080066c0  000166c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08006adc  08006adc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006adc  08006adc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001ec  08006cd0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006cd0  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074cd  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e8  00000000  00000000  000276e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00028dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a74  00000000  00000000  00029e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ab0  00000000  00000000  000418a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e30  00000000  00000000  0004b354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  000cf1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080066a8 	.word	0x080066a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080066a8 	.word	0x080066a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <HD44780_Init+0xec>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HD44780_Init+0xf0>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <HD44780_Init+0xf4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HD44780_Init+0xec>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d907      	bls.n	8000b5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HD44780_Init+0xf4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HD44780_Init+0xf4>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e006      	b.n	8000b6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HD44780_Init+0xf4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HD44780_Init+0xf4>)
 8000b68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000b6a:	f000 f985 	bl	8000e78 <DelayInit>
  HAL_Delay(50);
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f000 fe6a 	bl	8001848 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HD44780_Init+0xf0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f943 	bl	8000e04 <ExpanderWrite>
  HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 fe61 	bl	8001848 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000b86:	2030      	movs	r0, #48	; 0x30
 8000b88:	f000 f92b 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b8c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b90:	f000 f99a 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000b94:	2030      	movs	r0, #48	; 0x30
 8000b96:	f000 f924 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b9a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b9e:	f000 f993 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ba2:	2030      	movs	r0, #48	; 0x30
 8000ba4:	f000 f91d 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000ba8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bac:	f000 f98c 	bl	8000ec8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f000 f916 	bl	8000de2 <Write4Bits>
  DelayUS(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f000 f986 	bl	8000ec8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HD44780_Init+0xf4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f8ce 	bl	8000d68 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HD44780_Init+0xf8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000bd2:	f000 f875 	bl	8000cc0 <HD44780_Display>
  HD44780_Clear();
 8000bd6:	f000 f82b 	bl	8000c30 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HD44780_Init+0xfc>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HD44780_Init+0xfc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8bc 	bl	8000d68 <SendCommand>
  DelayUS(4500);
 8000bf0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bf4:	f000 f968 	bl	8000ec8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000bf8:	490b      	ldr	r1, [pc, #44]	; (8000c28 <HD44780_Init+0x100>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f876 	bl	8000cec <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c00:	490a      	ldr	r1, [pc, #40]	; (8000c2c <HD44780_Init+0x104>)
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 f872 	bl	8000cec <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c08:	f000 f81d 	bl	8000c46 <HD44780_Home>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000020b 	.word	0x2000020b
 8000c18:	2000020c 	.word	0x2000020c
 8000c1c:	20000208 	.word	0x20000208
 8000c20:	20000209 	.word	0x20000209
 8000c24:	2000020a 	.word	0x2000020a
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f897 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3e:	f000 f943 	bl	8000ec8 <DelayUS>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HD44780_Home>:

void HD44780_Home()
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 f88c 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c54:	f000 f938 	bl	8000ec8 <DelayUS>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HD44780_SetCursor+0x5c>)
 8000c6e:	f107 0408 	add.w	r4, r7, #8
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d303      	bcc.n	8000c8a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3318      	adds	r3, #24
 8000c90:	443b      	add	r3, r7
 8000c92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f85d 	bl	8000d68 <SendCommand>
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	080066c0 	.word	0x080066c0
 8000cbc:	2000020b 	.word	0x2000020b

08000cc0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HD44780_Display+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f843 	bl	8000d68 <SendCommand>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000209 	.word	0x20000209

08000cec <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f82a 	bl	8000d68 <SendCommand>
  for (int i=0; i<8; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e009      	b.n	8000d2e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f82e 	bl	8000d84 <SendChar>
  for (int i=0; i<8; i++)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	ddf2      	ble.n	8000d1a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d46:	e006      	b.n	8000d56 <HD44780_PrintStr+0x18>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f817 	bl	8000d84 <SendChar>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f4      	bne.n	8000d48 <HD44780_PrintStr+0xa>
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f812 	bl	8000da0 <Send>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2101      	movs	r1, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f804 	bl	8000da0 <Send>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f80b 	bl	8000de2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f804 	bl	8000de2 <Write4Bits>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f808 	bl	8000e04 <ExpanderWrite>
  PulseEnable(value);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f820 	bl	8000e3c <PulseEnable>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <ExpanderWrite+0x30>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e1a:	f107 020f 	add.w	r2, r7, #15
 8000e1e:	230a      	movs	r3, #10
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	214e      	movs	r1, #78	; 0x4e
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <ExpanderWrite+0x34>)
 8000e28:	f001 f8de 	bl	8001fe8 <HAL_I2C_Master_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000020c 	.word	0x2000020c
 8000e38:	20000210 	.word	0x20000210

08000e3c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffd8 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e54:	2014      	movs	r0, #20
 8000e56:	f000 f837 	bl	8000ec8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffce 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e68:	2014      	movs	r0, #20
 8000e6a:	f000 f82d 	bl	8000ec8 <DelayUS>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <DelayInit>:

static void DelayInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <DelayInit+0x48>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <DelayInit+0x48>)
 8000e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e86:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <DelayInit+0x48>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <DelayInit+0x48>)
 8000e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e92:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <DelayInit+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <DelayInit+0x4c>)
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <DelayInit+0x4c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <DelayInit+0x4c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <DelayInit+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000eb2:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb4:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb6:	bf00      	nop
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000edf0 	.word	0xe000edf0
 8000ec4:	e0001000 	.word	0xe0001000

08000ec8 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <DelayUS+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <DelayUS+0x44>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9a      	lsrs	r2, r3, #18
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <DelayUS+0x48>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <DelayUS+0x48>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f6      	bhi.n	8000eea <DelayUS+0x22>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	e0001000 	.word	0xe0001000

08000f14 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2275      	movs	r2, #117	; 0x75
 8000f2c:	21d0      	movs	r1, #208	; 0xd0
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f30:	f001 fa52 	bl	80023d8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b68      	cmp	r3, #104	; 0x68
 8000f38:	d13b      	bne.n	8000fb2 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	226b      	movs	r2, #107	; 0x6b
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f54:	f001 f946 	bl	80021e4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2219      	movs	r2, #25
 8000f6e:	21d0      	movs	r1, #208	; 0xd0
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f72:	f001 f937 	bl	80021e4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dbb      	adds	r3, r7, #6
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	221c      	movs	r2, #28
 8000f8c:	21d0      	movs	r1, #208	; 0xd0
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f90:	f001 f928 	bl	80021e4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	221b      	movs	r2, #27
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MPU6050_Init+0xa8>)
 8000fae:	f001 f919 	bl	80021e4 <HAL_I2C_Mem_Write>
	}

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000264 	.word	0x20000264

08000fc0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2306      	movs	r3, #6
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	223b      	movs	r2, #59	; 0x3b
 8000fd8:	21d0      	movs	r1, #208	; 0xd0
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MPU6050_Read_Accel+0xd8>)
 8000fdc:	f001 f9fc 	bl	80023d8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000fe0:	783b      	ldrb	r3, [r7, #0]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001002:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001014:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f1 	bl	8000404 <__aeabi_i2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001028:	f7ff fb80 	bl	800072c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd28 	bl	8000a88 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MPU6050_Read_Accel+0xec>)
 800103c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f9dd 	bl	8000404 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001050:	f7ff fb6c 	bl	800072c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd14 	bl	8000a88 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MPU6050_Read_Accel+0xf0>)
 8001064:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9c9 	bl	8000404 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001078:	f7ff fb58 	bl	800072c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <MPU6050_Read_Accel+0xf4>)
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000264 	.word	0x20000264
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	200002ba 	.word	0x200002ba
 80010a4:	200002bc 	.word	0x200002bc
 80010a8:	40d00000 	.word	0x40d00000
 80010ac:	200002c4 	.word	0x200002c4
 80010b0:	200002c8 	.word	0x200002c8
 80010b4:	200002cc 	.word	0x200002cc

080010b8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2306      	movs	r3, #6
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	463b      	mov	r3, r7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2243      	movs	r2, #67	; 0x43
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	4831      	ldr	r0, [pc, #196]	; (8001198 <MPU6050_Read_Gyro+0xe0>)
 80010d4:	f001 f980 	bl	80023d8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	787b      	ldrb	r3, [r7, #1]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 80010fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 800110c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f975 	bl	8000404 <__aeabi_i2d>
 800111a:	a31d      	add	r3, pc, #116	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fb04 	bl	800072c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcac 	bl	8000a88 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <MPU6050_Read_Gyro+0xf0>)
 8001134:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	a313      	add	r3, pc, #76	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff faf0 	bl	800072c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc98 	bl	8000a88 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <MPU6050_Read_Gyro+0xf4>)
 800115c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a309      	add	r3, pc, #36	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc84 	bl	8000a88 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MPU6050_Read_Gyro+0xf8>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40606000 	.word	0x40606000
 8001198:	20000264 	.word	0x20000264
 800119c:	200002be 	.word	0x200002be
 80011a0:	200002c0 	.word	0x200002c0
 80011a4:	200002c2 	.word	0x200002c2
 80011a8:	200002d0 	.word	0x200002d0
 80011ac:	200002d4 	.word	0x200002d4
 80011b0:	200002d8 	.word	0x200002d8

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fae3 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f875 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 f915 	bl	80013f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011c6:	f000 f8b7 	bl	8001338 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011ca:	f000 f8e3 	bl	8001394 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff fcaa 	bl	8000b28 <HD44780_Init>
  MPU6050_Init();
 80011d4:	f7ff fe9e 	bl	8000f14 <MPU6050_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // read the Accelerometer and Gyro values

	  MPU6050_Read_Accel();
 80011d8:	f7ff fef2 	bl	8000fc0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 80011dc:	f7ff ff6c 	bl	80010b8 <MPU6050_Read_Gyro>
	  HD44780_Clear();
 80011e0:	f7ff fd26 	bl	8000c30 <HD44780_Clear>

	  HD44780_SetCursor(0,0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fd38 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ax);
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <main+0xe8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f919 	bl	8000428 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	1d38      	adds	r0, r7, #4
 80011fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <main+0xec>)
 8001202:	2107      	movs	r1, #7
 8001204:	f002 ffc4 	bl	8004190 <sniprintf>
	  HD44780_PrintStr(snum);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd97 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(9,0);
 8001210:	2100      	movs	r1, #0
 8001212:	2009      	movs	r0, #9
 8001214:	f7ff fd22 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ay);
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <main+0xf0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f903 	bl	8000428 <__aeabi_f2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	1d38      	adds	r0, r7, #4
 8001228:	e9cd 2300 	strd	r2, r3, [sp]
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <main+0xec>)
 800122e:	2107      	movs	r1, #7
 8001230:	f002 ffae 	bl	8004190 <sniprintf>
	  HD44780_PrintStr(snum);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd81 	bl	8000d3e <HD44780_PrintStr>


	  HD44780_SetCursor(0,1);
 800123c:	2101      	movs	r1, #1
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fd0c 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Az);
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <main+0xf4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f8ed 	bl	8000428 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	1d38      	adds	r0, r7, #4
 8001254:	e9cd 2300 	strd	r2, r3, [sp]
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <main+0xec>)
 800125a:	2107      	movs	r1, #7
 800125c:	f002 ff98 	bl	8004190 <sniprintf>
	  HD44780_PrintStr(snum);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd6b 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(9,1);
 8001268:	2101      	movs	r1, #1
 800126a:	2009      	movs	r0, #9
 800126c:	f7ff fcf6 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ax);
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <main+0xe8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8d7 	bl	8000428 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	1d38      	adds	r0, r7, #4
 8001280:	e9cd 2300 	strd	r2, r3, [sp]
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <main+0xec>)
 8001286:	2107      	movs	r1, #7
 8001288:	f002 ff82 	bl	8004190 <sniprintf>
	  HD44780_PrintStr(snum);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd55 	bl	8000d3e <HD44780_PrintStr>




	  HAL_Delay(250);
 8001294:	20fa      	movs	r0, #250	; 0xfa
 8001296:	f000 fad7 	bl	8001848 <HAL_Delay>
	  MPU6050_Read_Accel();
 800129a:	e79d      	b.n	80011d8 <main+0x24>
 800129c:	200002c4 	.word	0x200002c4
 80012a0:	080066d0 	.word	0x080066d0
 80012a4:	200002c8 	.word	0x200002c8
 80012a8:	200002cc 	.word	0x200002cc

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fb00 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 feb3 	bl	8003060 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001300:	f000 f898 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f920 	bl	8003564 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800132a:	f000 f883 	bl	8001434 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3740      	adds	r7, #64	; 0x40
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x50>)
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <MX_I2C1_Init+0x54>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_I2C1_Init+0x50>)
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_I2C1_Init+0x58>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_I2C1_Init+0x50>)
 8001356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_I2C1_Init+0x50>)
 8001376:	f000 fcf3 	bl	8001d60 <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001380:	f000 f858 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000210 	.word	0x20000210
 800138c:	40005400 	.word	0x40005400
 8001390:	000186a0 	.word	0x000186a0

08001394 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_I2C2_Init+0x50>)
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <MX_I2C2_Init+0x54>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_I2C2_Init+0x58>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_I2C2_Init+0x50>)
 80013d2:	f000 fcc5 	bl	8001d60 <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 f82a 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000264 	.word	0x20000264
 80013e8:	40005800 	.word	0x40005800
 80013ec:	000186a0 	.word	0x000186a0

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_GPIO_Init+0x40>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <MX_GPIO_Init+0x40>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_GPIO_Init+0x40>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_GPIO_Init+0x40>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <MX_GPIO_Init+0x40>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <MX_GPIO_Init+0x40>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_MspInit+0x40>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_MspInit+0x40>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_MspInit+0x40>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_MspInit+0x40>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_MspInit+0x40>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_MspInit+0x40>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_I2C_MspInit+0xc8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d124      	bne.n	80014ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014bc:	23c0      	movs	r3, #192	; 0xc0
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <HAL_I2C_MspInit+0xd0>)
 80014d0:	f000 fac2 	bl	8001a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014de:	61d3      	str	r3, [r2, #28]
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014ec:	e029      	b.n	8001542 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_I2C_MspInit+0xd4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d124      	bne.n	8001542 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001510:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001516:	2312      	movs	r3, #18
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4619      	mov	r1, r3
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <HAL_I2C_MspInit+0xd0>)
 8001526:	f000 fa97 	bl	8001a58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_I2C_MspInit+0xcc>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40005400 	.word	0x40005400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40005800 	.word	0x40005800

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a2:	f000 f935 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
	return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <_kill>:

int _kill(int pid, int sig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c2:	f002 f953 	bl	800386c <__errno>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2216      	movs	r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
	return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_exit>:

void _exit (int status)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe7 	bl	80015b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ea:	e7fe      	b.n	80015ea <_exit+0x12>

080015ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
	}

return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
	}
	return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001684:	605a      	str	r2, [r3, #4]
	return 0;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <_isatty>:

int _isatty(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	return 1;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
	return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f002 f8bc 	bl	800386c <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20005000 	.word	0x20005000
 8001720:	00000400 	.word	0x00000400
 8001724:	200002dc 	.word	0x200002dc
 8001728:	200002f8 	.word	0x200002f8

0800172c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	; (800177c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800175e:	f7ff ffe5 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001762:	f002 f889 	bl	8003878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001766:	f7ff fd25 	bl	80011b4 <main>
  bx lr
 800176a:	4770      	bx	lr
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001774:	08006ae4 	.word	0x08006ae4
  ldr r2, =_sbss
 8001778:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800177c:	200002f4 	.word	0x200002f4

08001780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_2_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_Init+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_Init+0x28>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f92b 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f808 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fe4e 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f935 	bl	8001a3e <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 f90b 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000010 	.word	0x20000010
 8001808:	20000018 	.word	0x20000018
 800180c:	20000014 	.word	0x20000014

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_IncTick+0x20>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000018 	.word	0x20000018
 8001830:	200002e0 	.word	0x200002e0

08001834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <HAL_GetTick+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	200002e0 	.word	0x200002e0

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fff0 	bl	8001834 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffe0 	bl	8001834 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000018 	.word	0x20000018

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff90 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff49 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff5e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff90 	bl	8001948 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5f 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb0 	bl	80019ac <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e169      	b.n	8001d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8158 	bne.w	8001d3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a9a      	ldr	r2, [pc, #616]	; (8001cf8 <HAL_GPIO_Init+0x2a0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d05e      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001a94:	4a98      	ldr	r2, [pc, #608]	; (8001cf8 <HAL_GPIO_Init+0x2a0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d875      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001a9a:	4a98      	ldr	r2, [pc, #608]	; (8001cfc <HAL_GPIO_Init+0x2a4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d058      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aa0:	4a96      	ldr	r2, [pc, #600]	; (8001cfc <HAL_GPIO_Init+0x2a4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d86f      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a96      	ldr	r2, [pc, #600]	; (8001d00 <HAL_GPIO_Init+0x2a8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d052      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aac:	4a94      	ldr	r2, [pc, #592]	; (8001d00 <HAL_GPIO_Init+0x2a8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d869      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a94      	ldr	r2, [pc, #592]	; (8001d04 <HAL_GPIO_Init+0x2ac>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d04c      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <HAL_GPIO_Init+0x2ac>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d863      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001abe:	4a92      	ldr	r2, [pc, #584]	; (8001d08 <HAL_GPIO_Init+0x2b0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d046      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a90      	ldr	r2, [pc, #576]	; (8001d08 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d85d      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d82a      	bhi.n	8001b24 <HAL_GPIO_Init+0xcc>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d859      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ad2:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <HAL_GPIO_Init+0x80>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001b3f 	.word	0x08001b3f
 8001ae4:	08001b81 	.word	0x08001b81
 8001ae8:	08001b87 	.word	0x08001b87
 8001aec:	08001b87 	.word	0x08001b87
 8001af0:	08001b87 	.word	0x08001b87
 8001af4:	08001b87 	.word	0x08001b87
 8001af8:	08001b87 	.word	0x08001b87
 8001afc:	08001b87 	.word	0x08001b87
 8001b00:	08001b87 	.word	0x08001b87
 8001b04:	08001b87 	.word	0x08001b87
 8001b08:	08001b87 	.word	0x08001b87
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b87 	.word	0x08001b87
 8001b14:	08001b87 	.word	0x08001b87
 8001b18:	08001b87 	.word	0x08001b87
 8001b1c:	08001b35 	.word	0x08001b35
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	4a79      	ldr	r2, [pc, #484]	; (8001d0c <HAL_GPIO_Init+0x2b4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e02c      	b.n	8001b86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e029      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e024      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	3308      	adds	r3, #8
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e01f      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e01a      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e013      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	611a      	str	r2, [r3, #16]
          break;
 8001b72:	e009      	b.n	8001b88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	615a      	str	r2, [r3, #20]
          break;
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          break;
 8001b86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d801      	bhi.n	8001b92 <HAL_GPIO_Init+0x13a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_Init+0x13e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d802      	bhi.n	8001ba4 <HAL_GPIO_Init+0x14c>
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x152>
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3b08      	subs	r3, #8
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80b1 	beq.w	8001d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf0:	4a48      	ldr	r2, [pc, #288]	; (8001d14 <HAL_GPIO_Init+0x2bc>)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <HAL_GPIO_Init+0x2c0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_GPIO_Init+0x1ec>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	; (8001d1c <HAL_GPIO_Init+0x2c4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1e8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3e      	ldr	r2, [pc, #248]	; (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3d      	ldr	r2, [pc, #244]	; (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1e0>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c44:	2300      	movs	r3, #0
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c56:	492f      	ldr	r1, [pc, #188]	; (8001d14 <HAL_GPIO_Init+0x2bc>)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	492c      	ldr	r1, [pc, #176]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4928      	ldr	r1, [pc, #160]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4922      	ldr	r1, [pc, #136]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	491e      	ldr	r1, [pc, #120]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	4918      	ldr	r1, [pc, #96]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	4914      	ldr	r1, [pc, #80]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d021      	beq.n	8001d2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	490e      	ldr	r1, [pc, #56]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60cb      	str	r3, [r1, #12]
 8001cf4:	e021      	b.n	8001d3a <HAL_GPIO_Init+0x2e2>
 8001cf6:	bf00      	nop
 8001cf8:	10320000 	.word	0x10320000
 8001cfc:	10310000 	.word	0x10310000
 8001d00:	10220000 	.word	0x10220000
 8001d04:	10210000 	.word	0x10210000
 8001d08:	10120000 	.word	0x10120000
 8001d0c:	10110000 	.word	0x10110000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40010800 	.word	0x40010800
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40011400 	.word	0x40011400
 8001d28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_GPIO_Init+0x304>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <HAL_GPIO_Init+0x304>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f ae8e 	bne.w	8001a6c <HAL_GPIO_Init+0x14>
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	372c      	adds	r7, #44	; 0x2c
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e12b      	b.n	8001fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fb7c 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f001 fd20 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a81      	ldr	r2, [pc, #516]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_Init+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a80      	ldr	r2, [pc, #512]	; (8001fd8 <HAL_I2C_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e006      	b.n	8001df2 <HAL_I2C_Init+0x92>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	; (8001fdc <HAL_I2C_Init+0x27c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0e7      	b.n	8001fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a78      	ldr	r2, [pc, #480]	; (8001fe0 <HAL_I2C_Init+0x280>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d802      	bhi.n	8001e34 <HAL_I2C_Init+0xd4>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_I2C_Init+0xe8>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_I2C_Init+0x284>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	495c      	ldr	r1, [pc, #368]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d819      	bhi.n	8001e9c <HAL_I2C_Init+0x13c>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_I2C_Init+0x138>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e59      	subs	r1, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	e051      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e04f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_I2C_Init+0x168>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_I2C_Init+0x18e>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x196>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_I2C_Init+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6911      	ldr	r1, [r2, #16]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	000186a0 	.word	0x000186a0
 8001fd8:	001e847f 	.word	0x001e847f
 8001fdc:	003d08ff 	.word	0x003d08ff
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	817b      	strh	r3, [r7, #10]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fc1a 	bl	8001834 <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b20      	cmp	r3, #32
 800200c:	f040 80e0 	bne.w	80021d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2319      	movs	r3, #25
 8002016:	2201      	movs	r2, #1
 8002018:	4970      	ldr	r1, [pc, #448]	; (80021dc <HAL_I2C_Master_Transmit+0x1f4>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fe44 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	e0d3      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_I2C_Master_Transmit+0x50>
 8002034:	2302      	movs	r3, #2
 8002036:	e0cc      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d007      	beq.n	800205e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2221      	movs	r2, #33	; 0x21
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2210      	movs	r2, #16
 800207a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a0:	8979      	ldrh	r1, [r7, #10]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6a3a      	ldr	r2, [r7, #32]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fbfe 	bl	80028a8 <I2C_MasterRequestWrite>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e08d      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020cc:	e066      	b.n	800219c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 febe 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00d      	beq.n	80020fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d107      	bne.n	80020f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06b      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d11b      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x188>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d017      	beq.n	8002170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6a39      	ldr	r1, [r7, #32]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 feae 	bl	8002ed6 <I2C_WaitOnBTFFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e01a      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d194      	bne.n	80020ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	00100002 	.word	0x00100002
 80021e0:	ffff0000 	.word	0xffff0000

080021e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	817b      	strh	r3, [r7, #10]
 80021f6:	460b      	mov	r3, r1
 80021f8:	813b      	strh	r3, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021fe:	f7ff fb19 	bl	8001834 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	f040 80d9 	bne.w	80023c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2319      	movs	r3, #25
 8002218:	2201      	movs	r2, #1
 800221a:	496d      	ldr	r1, [pc, #436]	; (80023d0 <HAL_I2C_Mem_Write+0x1ec>)
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fd43 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
 800222a:	e0cc      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_I2C_Mem_Write+0x56>
 8002236:	2302      	movs	r3, #2
 8002238:	e0c5      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d007      	beq.n	8002260 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2221      	movs	r2, #33	; 0x21
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a4d      	ldr	r2, [pc, #308]	; (80023d4 <HAL_I2C_Mem_Write+0x1f0>)
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a2:	88f8      	ldrh	r0, [r7, #6]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	8979      	ldrh	r1, [r7, #10]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	4603      	mov	r3, r0
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fb7a 	bl	80029ac <I2C_RequestMemoryWrite>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d052      	beq.n	8002364 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e081      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fdc4 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00d      	beq.n	80022ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_I2C_Mem_Write+0x180>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1aa      	bne.n	80022c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fdb0 	bl	8002ed6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e016      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00100002 	.word	0x00100002
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f6:	f7ff fa1d 	bl	8001834 <HAL_GetTick>
 80023fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	f040 8244 	bne.w	8002892 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2319      	movs	r3, #25
 8002410:	2201      	movs	r2, #1
 8002412:	4982      	ldr	r1, [pc, #520]	; (800261c <HAL_I2C_Mem_Read+0x244>)
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fc47 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	e237      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_I2C_Mem_Read+0x5a>
 800242e:	2302      	movs	r3, #2
 8002430:	e230      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d007      	beq.n	8002458 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2222      	movs	r2, #34	; 0x22
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a62      	ldr	r2, [pc, #392]	; (8002620 <HAL_I2C_Mem_Read+0x248>)
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249a:	88f8      	ldrh	r0, [r7, #6]
 800249c:	893a      	ldrh	r2, [r7, #8]
 800249e:	8979      	ldrh	r1, [r7, #10]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4603      	mov	r3, r0
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fb14 	bl	8002ad8 <I2C_RequestMemoryRead>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1ec      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d113      	bne.n	80024ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e1c0      	b.n	800286c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d11e      	bne.n	8002530 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002502:	b672      	cpsid	i
}
 8002504:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800252c:	b662      	cpsie	i
}
 800252e:	e035      	b.n	800259c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b02      	cmp	r3, #2
 8002536:	d11e      	bne.n	8002576 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002572:	b662      	cpsie	i
}
 8002574:	e012      	b.n	800259c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002584:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800259c:	e166      	b.n	800286c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f200 811f 	bhi.w	80027e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d123      	bne.n	80025f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fccf 	bl	8002f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e167      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025f6:	e139      	b.n	800286c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d152      	bne.n	80026a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2200      	movs	r2, #0
 8002608:	4906      	ldr	r1, [pc, #24]	; (8002624 <HAL_I2C_Mem_Read+0x24c>)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fb4c 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e13c      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
 800261a:	bf00      	nop
 800261c:	00100002 	.word	0x00100002
 8002620:	ffff0000 	.word	0xffff0000
 8002624:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002628:	b672      	cpsid	i
}
 800262a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800266e:	b662      	cpsie	i
}
 8002670:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a4:	e0e2      	b.n	800286c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	2200      	movs	r2, #0
 80026ae:	497b      	ldr	r1, [pc, #492]	; (800289c <HAL_I2C_Mem_Read+0x4c4>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 faf9 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0e9      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026d0:	b672      	cpsid	i
}
 80026d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002706:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_I2C_Mem_Read+0x4c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_I2C_Mem_Read+0x4cc>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a1a      	lsrs	r2, r3, #8
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00da      	lsls	r2, r3, #3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	3b01      	subs	r3, #1
 8002724:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d118      	bne.n	800275e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f043 0220 	orr.w	r2, r3, #32
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800274e:	b662      	cpsie	i
}
 8002750:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e09a      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d1d9      	bne.n	8002720 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027ae:	b662      	cpsie	i
}
 80027b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e4:	e042      	b.n	800286c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fbb4 	bl	8002f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e04c      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d118      	bne.n	800286c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f ae94 	bne.w	800259e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00010004 	.word	0x00010004
 80028a0:	20000010 	.word	0x20000010
 80028a4:	14f8b589 	.word	0x14f8b589

080028a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d006      	beq.n	80028d2 <I2C_MasterRequestWrite+0x2a>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d003      	beq.n	80028d2 <I2C_MasterRequestWrite+0x2a>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028d0:	d108      	bne.n	80028e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e00b      	b.n	80028fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	2b12      	cmp	r3, #18
 80028ea:	d107      	bne.n	80028fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f9cd 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002922:	d103      	bne.n	800292c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e035      	b.n	800299c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002938:	d108      	bne.n	800294c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	e01b      	b.n	8002984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	11db      	asrs	r3, r3, #7
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0306 	and.w	r3, r3, #6
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f063 030f 	orn	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	490e      	ldr	r1, [pc, #56]	; (80029a4 <I2C_MasterRequestWrite+0xfc>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9f3 	bl	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e010      	b.n	800299c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <I2C_MasterRequestWrite+0x100>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f9e3 	bl	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	00010008 	.word	0x00010008
 80029a8:	00010002 	.word	0x00010002

080029ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	2200      	movs	r2, #0
 80029de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f960 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fc:	d103      	bne.n	8002a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e05f      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	492d      	ldr	r1, [pc, #180]	; (8002ad4 <I2C_RequestMemoryWrite+0x128>)
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f998 	bl	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e04c      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fa02 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e02b      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a78:	893b      	ldrh	r3, [r7, #8]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	e021      	b.n	8002ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a84:	893b      	ldrh	r3, [r7, #8]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f9dc 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d107      	bne.n	8002aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e005      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002abe:	893b      	ldrh	r3, [r7, #8]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	00010002 	.word	0x00010002

08002ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f8c2 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d103      	bne.n	8002b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0aa      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	4952      	ldr	r1, [pc, #328]	; (8002ca4 <I2C_RequestMemoryRead+0x1cc>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f8fa 	bl	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e097      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f964 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e076      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	e021      	b.n	8002c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f93e 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e050      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	6a39      	ldr	r1, [r7, #32]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f923 	bl	8002e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d107      	bne.n	8002c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e035      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f82b 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d103      	bne.n	8002c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c74:	897b      	ldrh	r3, [r7, #10]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	4906      	ldr	r1, [pc, #24]	; (8002ca4 <I2C_RequestMemoryRead+0x1cc>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f863 	bl	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	00010002 	.word	0x00010002

08002ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	e025      	b.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d021      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe fdb7 	bl	8001834 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e023      	b.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10d      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	e00c      	b.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4013      	ands	r3, r2
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d0b6      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d64:	e051      	b.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d74:	d123      	bne.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0204 	orr.w	r2, r3, #4
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e046      	b.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d021      	beq.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe fd35 	bl	8001834 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d116      	bne.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e020      	b.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e00b      	b.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d18d      	bne.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e60:	e02d      	b.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8ce 	bl	8003004 <I2C_IsAcknowledgeFailed>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e02d      	b.n	8002ece <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d021      	beq.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fe fcdb 	bl	8001834 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d116      	bne.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e007      	b.n	8002ece <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d1ca      	bne.n	8002e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee2:	e02d      	b.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f88d 	bl	8003004 <I2C_IsAcknowledgeFailed>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e02d      	b.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d021      	beq.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efc:	f7fe fc9a 	bl	8001834 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d302      	bcc.n	8002f12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e007      	b.n	8002f50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d1ca      	bne.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f64:	e042      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d119      	bne.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e029      	b.n	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa8:	f7fe fc44 	bl	8001834 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d302      	bcc.n	8002fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d1b5      	bne.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d11b      	bne.n	8003054 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003024:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 0204 	orr.w	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e272      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8087 	beq.w	800318e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003080:	4b92      	ldr	r3, [pc, #584]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b04      	cmp	r3, #4
 800308a:	d00c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800308c:	4b8f      	ldr	r3, [pc, #572]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d112      	bne.n	80030be <HAL_RCC_OscConfig+0x5e>
 8003098:	4b8c      	ldr	r3, [pc, #560]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d10b      	bne.n	80030be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a6:	4b89      	ldr	r3, [pc, #548]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d06c      	beq.n	800318c <HAL_RCC_OscConfig+0x12c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d168      	bne.n	800318c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e24c      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x76>
 80030c8:	4b80      	ldr	r3, [pc, #512]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a7f      	ldr	r2, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e02e      	b.n	8003134 <HAL_RCC_OscConfig+0xd4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x98>
 80030de:	4b7b      	ldr	r3, [pc, #492]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7a      	ldr	r2, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b78      	ldr	r3, [pc, #480]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a77      	ldr	r2, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80030f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xd4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0xbc>
 8003102:	4b72      	ldr	r3, [pc, #456]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a71      	ldr	r2, [pc, #452]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xd4>
 800311c:	4b6b      	ldr	r3, [pc, #428]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fb7a 	bl	8001834 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fb76 	bl	8001834 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e200      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b5d      	ldr	r3, [pc, #372]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xe4>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fb66 	bl	8001834 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fb62 	bl	8001834 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1ec      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x10c>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d063      	beq.n	8003262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800319a:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x18c>
 80031b2:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x176>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1c0      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4939      	ldr	r1, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e03a      	b.n	8003262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fb1b 	bl	8001834 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003202:	f7fe fb17 	bl	8001834 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e1a1      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4927      	ldr	r1, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e015      	b.n	8003262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fafa 	bl	8001834 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe faf6 	bl	8001834 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e180      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03a      	beq.n	80032e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d019      	beq.n	80032aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe fada 	bl	8001834 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe fad6 	bl	8001834 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e160      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_RCC_OscConfig+0x26c>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f000 fac4 	bl	8003830 <RCC_Delay>
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fe fac0 	bl	8001834 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b6:	e00f      	b.n	80032d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fe fabc 	bl	8001834 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d908      	bls.n	80032d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e146      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	42420000 	.word	0x42420000
 80032d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	4b92      	ldr	r3, [pc, #584]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e9      	bne.n	80032b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a6 	beq.w	800343e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f6:	4b8b      	ldr	r3, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10d      	bne.n	800331e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4a87      	ldr	r2, [pc, #540]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	61d3      	str	r3, [r2, #28]
 800330e:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b82      	ldr	r3, [pc, #520]	; (8003528 <HAL_RCC_OscConfig+0x4c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b7f      	ldr	r3, [pc, #508]	; (8003528 <HAL_RCC_OscConfig+0x4c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7e      	ldr	r2, [pc, #504]	; (8003528 <HAL_RCC_OscConfig+0x4c8>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fe fa7d 	bl	8001834 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fa79 	bl	8001834 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e103      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b75      	ldr	r3, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x4c8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x312>
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4a6e      	ldr	r2, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6213      	str	r3, [r2, #32]
 8003370:	e02d      	b.n	80033ce <HAL_RCC_OscConfig+0x36e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x334>
 800337a:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a69      	ldr	r2, [pc, #420]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6213      	str	r3, [r2, #32]
 8003386:	4b67      	ldr	r3, [pc, #412]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a66      	ldr	r2, [pc, #408]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6213      	str	r3, [r2, #32]
 8003392:	e01c      	b.n	80033ce <HAL_RCC_OscConfig+0x36e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b05      	cmp	r3, #5
 800339a:	d10c      	bne.n	80033b6 <HAL_RCC_OscConfig+0x356>
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a60      	ldr	r2, [pc, #384]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6213      	str	r3, [r2, #32]
 80033b4:	e00b      	b.n	80033ce <HAL_RCC_OscConfig+0x36e>
 80033b6:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d015      	beq.n	8003402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fe fa2d 	bl	8001834 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fa29 	bl	8001834 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0b1      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ee      	beq.n	80033de <HAL_RCC_OscConfig+0x37e>
 8003400:	e014      	b.n	800342c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003402:	f7fe fa17 	bl	8001834 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe fa13 	bl	8001834 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e09b      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003420:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ee      	bne.n	800340a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003432:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8087 	beq.w	8003556 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d061      	beq.n	8003518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d146      	bne.n	80034ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b33      	ldr	r3, [pc, #204]	; (800352c <HAL_RCC_OscConfig+0x4cc>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe f9e7 	bl	8001834 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe f9e3 	bl	8001834 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e06d      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d108      	bne.n	80034a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4921      	ldr	r1, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a19      	ldr	r1, [r3, #32]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	430b      	orrs	r3, r1
 80034b6:	491b      	ldr	r1, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x4cc>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe f9b7 	bl	8001834 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe f9b3 	bl	8001834 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e03d      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x46a>
 80034e8:	e035      	b.n	8003556 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe f9a0 	bl	8001834 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe f99c 	bl	8001834 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e026      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x498>
 8003516:	e01e      	b.n	8003556 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e019      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
 8003524:	40021000 	.word	0x40021000
 8003528:	40007000 	.word	0x40007000
 800352c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_OscConfig+0x500>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	429a      	cmp	r2, r3
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000

08003564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0d0      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 0207 	bic.w	r2, r3, #7
 800358e:	4965      	ldr	r1, [pc, #404]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b8      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c0:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	494d      	ldr	r1, [pc, #308]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d040      	beq.n	8003684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d115      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07f      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e073      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06b      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f023 0203 	bic.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4936      	ldr	r1, [pc, #216]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003654:	f7fe f8ee 	bl	8001834 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	e00a      	b.n	8003672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fe f8ea 	bl	8001834 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e053      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 020c 	and.w	r2, r3, #12
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	429a      	cmp	r2, r3
 8003682:	d1eb      	bne.n	800365c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d210      	bcs.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4922      	ldr	r1, [pc, #136]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e032      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4916      	ldr	r1, [pc, #88]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	490e      	ldr	r1, [pc, #56]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f2:	f000 f821 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	490a      	ldr	r1, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	5ccb      	ldrb	r3, [r1, r3]
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1cc>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe f84c 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40022000 	.word	0x40022000
 8003728:	40021000 	.word	0x40021000
 800372c:	080066e8 	.word	0x080066e8
 8003730:	20000010 	.word	0x20000010
 8003734:	20000014 	.word	0x20000014

08003738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	b490      	push	{r4, r7}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800373e:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003740:	1d3c      	adds	r4, r7, #4
 8003742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003748:	f240 2301 	movw	r3, #513	; 0x201
 800374c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x40>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x46>
 8003776:	e02b      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003778:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800377a:	623b      	str	r3, [r7, #32]
      break;
 800377c:	e02b      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0c9b      	lsrs	r3, r3, #18
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3328      	adds	r3, #40	; 0x28
 8003788:	443b      	add	r3, r7
 800378a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800378e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0c5b      	lsrs	r3, r3, #17
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	3328      	adds	r3, #40	; 0x28
 80037a6:	443b      	add	r3, r7
 80037a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b2:	fb03 f202 	mul.w	r2, r3, r2
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e004      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	623b      	str	r3, [r7, #32]
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80037d2:	623b      	str	r3, [r7, #32]
      break;
 80037d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3728      	adds	r7, #40	; 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc90      	pop	{r4, r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	080066d8 	.word	0x080066d8
 80037e8:	40021000 	.word	0x40021000
 80037ec:	007a1200 	.word	0x007a1200
 80037f0:	003d0900 	.word	0x003d0900

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <HAL_RCC_GetHCLKFreq+0x10>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	20000010 	.word	0x20000010

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800380c:	f7ff fff2 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	080066f8 	.word	0x080066f8

08003830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <RCC_Delay+0x34>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <RCC_Delay+0x38>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0a5b      	lsrs	r3, r3, #9
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800384c:	bf00      	nop
  }
  while (Delay --);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	60fa      	str	r2, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f9      	bne.n	800384c <RCC_Delay+0x1c>
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000010 	.word	0x20000010
 8003868:	10624dd3 	.word	0x10624dd3

0800386c <__errno>:
 800386c:	4b01      	ldr	r3, [pc, #4]	; (8003874 <__errno+0x8>)
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	2000001c 	.word	0x2000001c

08003878 <__libc_init_array>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	2600      	movs	r6, #0
 800387c:	4d0c      	ldr	r5, [pc, #48]	; (80038b0 <__libc_init_array+0x38>)
 800387e:	4c0d      	ldr	r4, [pc, #52]	; (80038b4 <__libc_init_array+0x3c>)
 8003880:	1b64      	subs	r4, r4, r5
 8003882:	10a4      	asrs	r4, r4, #2
 8003884:	42a6      	cmp	r6, r4
 8003886:	d109      	bne.n	800389c <__libc_init_array+0x24>
 8003888:	f002 ff0e 	bl	80066a8 <_init>
 800388c:	2600      	movs	r6, #0
 800388e:	4d0a      	ldr	r5, [pc, #40]	; (80038b8 <__libc_init_array+0x40>)
 8003890:	4c0a      	ldr	r4, [pc, #40]	; (80038bc <__libc_init_array+0x44>)
 8003892:	1b64      	subs	r4, r4, r5
 8003894:	10a4      	asrs	r4, r4, #2
 8003896:	42a6      	cmp	r6, r4
 8003898:	d105      	bne.n	80038a6 <__libc_init_array+0x2e>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a0:	4798      	blx	r3
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7ee      	b.n	8003884 <__libc_init_array+0xc>
 80038a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038aa:	4798      	blx	r3
 80038ac:	3601      	adds	r6, #1
 80038ae:	e7f2      	b.n	8003896 <__libc_init_array+0x1e>
 80038b0:	08006adc 	.word	0x08006adc
 80038b4:	08006adc 	.word	0x08006adc
 80038b8:	08006adc 	.word	0x08006adc
 80038bc:	08006ae0 	.word	0x08006ae0

080038c0 <memset>:
 80038c0:	4603      	mov	r3, r0
 80038c2:	4402      	add	r2, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <__cvt>:
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d6:	461f      	mov	r7, r3
 80038d8:	bfbb      	ittet	lt
 80038da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80038de:	461f      	movlt	r7, r3
 80038e0:	2300      	movge	r3, #0
 80038e2:	232d      	movlt	r3, #45	; 0x2d
 80038e4:	b088      	sub	sp, #32
 80038e6:	4614      	mov	r4, r2
 80038e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80038ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80038ec:	7013      	strb	r3, [r2, #0]
 80038ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80038f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80038f4:	f023 0820 	bic.w	r8, r3, #32
 80038f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038fc:	d005      	beq.n	800390a <__cvt+0x3a>
 80038fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003902:	d100      	bne.n	8003906 <__cvt+0x36>
 8003904:	3501      	adds	r5, #1
 8003906:	2302      	movs	r3, #2
 8003908:	e000      	b.n	800390c <__cvt+0x3c>
 800390a:	2303      	movs	r3, #3
 800390c:	aa07      	add	r2, sp, #28
 800390e:	9204      	str	r2, [sp, #16]
 8003910:	aa06      	add	r2, sp, #24
 8003912:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003916:	e9cd 3500 	strd	r3, r5, [sp]
 800391a:	4622      	mov	r2, r4
 800391c:	463b      	mov	r3, r7
 800391e:	f000 fcf7 	bl	8004310 <_dtoa_r>
 8003922:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003926:	4606      	mov	r6, r0
 8003928:	d102      	bne.n	8003930 <__cvt+0x60>
 800392a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800392c:	07db      	lsls	r3, r3, #31
 800392e:	d522      	bpl.n	8003976 <__cvt+0xa6>
 8003930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003934:	eb06 0905 	add.w	r9, r6, r5
 8003938:	d110      	bne.n	800395c <__cvt+0x8c>
 800393a:	7833      	ldrb	r3, [r6, #0]
 800393c:	2b30      	cmp	r3, #48	; 0x30
 800393e:	d10a      	bne.n	8003956 <__cvt+0x86>
 8003940:	2200      	movs	r2, #0
 8003942:	2300      	movs	r3, #0
 8003944:	4620      	mov	r0, r4
 8003946:	4639      	mov	r1, r7
 8003948:	f7fd f82e 	bl	80009a8 <__aeabi_dcmpeq>
 800394c:	b918      	cbnz	r0, 8003956 <__cvt+0x86>
 800394e:	f1c5 0501 	rsb	r5, r5, #1
 8003952:	f8ca 5000 	str.w	r5, [sl]
 8003956:	f8da 3000 	ldr.w	r3, [sl]
 800395a:	4499      	add	r9, r3
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	4620      	mov	r0, r4
 8003962:	4639      	mov	r1, r7
 8003964:	f7fd f820 	bl	80009a8 <__aeabi_dcmpeq>
 8003968:	b108      	cbz	r0, 800396e <__cvt+0x9e>
 800396a:	f8cd 901c 	str.w	r9, [sp, #28]
 800396e:	2230      	movs	r2, #48	; 0x30
 8003970:	9b07      	ldr	r3, [sp, #28]
 8003972:	454b      	cmp	r3, r9
 8003974:	d307      	bcc.n	8003986 <__cvt+0xb6>
 8003976:	4630      	mov	r0, r6
 8003978:	9b07      	ldr	r3, [sp, #28]
 800397a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800397c:	1b9b      	subs	r3, r3, r6
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	b008      	add	sp, #32
 8003982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003986:	1c59      	adds	r1, r3, #1
 8003988:	9107      	str	r1, [sp, #28]
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e7f0      	b.n	8003970 <__cvt+0xa0>

0800398e <__exponent>:
 800398e:	4603      	mov	r3, r0
 8003990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003992:	2900      	cmp	r1, #0
 8003994:	f803 2b02 	strb.w	r2, [r3], #2
 8003998:	bfb6      	itet	lt
 800399a:	222d      	movlt	r2, #45	; 0x2d
 800399c:	222b      	movge	r2, #43	; 0x2b
 800399e:	4249      	neglt	r1, r1
 80039a0:	2909      	cmp	r1, #9
 80039a2:	7042      	strb	r2, [r0, #1]
 80039a4:	dd2b      	ble.n	80039fe <__exponent+0x70>
 80039a6:	f10d 0407 	add.w	r4, sp, #7
 80039aa:	46a4      	mov	ip, r4
 80039ac:	270a      	movs	r7, #10
 80039ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80039b2:	460a      	mov	r2, r1
 80039b4:	46a6      	mov	lr, r4
 80039b6:	fb07 1516 	mls	r5, r7, r6, r1
 80039ba:	2a63      	cmp	r2, #99	; 0x63
 80039bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80039c0:	4631      	mov	r1, r6
 80039c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80039c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039ca:	dcf0      	bgt.n	80039ae <__exponent+0x20>
 80039cc:	3130      	adds	r1, #48	; 0x30
 80039ce:	f1ae 0502 	sub.w	r5, lr, #2
 80039d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039d6:	4629      	mov	r1, r5
 80039d8:	1c44      	adds	r4, r0, #1
 80039da:	4561      	cmp	r1, ip
 80039dc:	d30a      	bcc.n	80039f4 <__exponent+0x66>
 80039de:	f10d 0209 	add.w	r2, sp, #9
 80039e2:	eba2 020e 	sub.w	r2, r2, lr
 80039e6:	4565      	cmp	r5, ip
 80039e8:	bf88      	it	hi
 80039ea:	2200      	movhi	r2, #0
 80039ec:	4413      	add	r3, r2
 80039ee:	1a18      	subs	r0, r3, r0
 80039f0:	b003      	add	sp, #12
 80039f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80039fc:	e7ed      	b.n	80039da <__exponent+0x4c>
 80039fe:	2330      	movs	r3, #48	; 0x30
 8003a00:	3130      	adds	r1, #48	; 0x30
 8003a02:	7083      	strb	r3, [r0, #2]
 8003a04:	70c1      	strb	r1, [r0, #3]
 8003a06:	1d03      	adds	r3, r0, #4
 8003a08:	e7f1      	b.n	80039ee <__exponent+0x60>
	...

08003a0c <_printf_float>:
 8003a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	b091      	sub	sp, #68	; 0x44
 8003a12:	460c      	mov	r4, r1
 8003a14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a18:	4616      	mov	r6, r2
 8003a1a:	461f      	mov	r7, r3
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	f001 fa65 	bl	8004eec <_localeconv_r>
 8003a22:	6803      	ldr	r3, [r0, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	9309      	str	r3, [sp, #36]	; 0x24
 8003a28:	f7fc fb92 	bl	8000150 <strlen>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8003a30:	f8d8 3000 	ldr.w	r3, [r8]
 8003a34:	900a      	str	r0, [sp, #40]	; 0x28
 8003a36:	3307      	adds	r3, #7
 8003a38:	f023 0307 	bic.w	r3, r3, #7
 8003a3c:	f103 0208 	add.w	r2, r3, #8
 8003a40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003a44:	f8d4 b000 	ldr.w	fp, [r4]
 8003a48:	f8c8 2000 	str.w	r2, [r8]
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a54:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003a58:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a62:	4640      	mov	r0, r8
 8003a64:	4b9c      	ldr	r3, [pc, #624]	; (8003cd8 <_printf_float+0x2cc>)
 8003a66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a68:	f7fc ffd0 	bl	8000a0c <__aeabi_dcmpun>
 8003a6c:	bb70      	cbnz	r0, 8003acc <_printf_float+0xc0>
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	4640      	mov	r0, r8
 8003a74:	4b98      	ldr	r3, [pc, #608]	; (8003cd8 <_printf_float+0x2cc>)
 8003a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a78:	f7fc ffaa 	bl	80009d0 <__aeabi_dcmple>
 8003a7c:	bb30      	cbnz	r0, 8003acc <_printf_float+0xc0>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2300      	movs	r3, #0
 8003a82:	4640      	mov	r0, r8
 8003a84:	4651      	mov	r1, sl
 8003a86:	f7fc ff99 	bl	80009bc <__aeabi_dcmplt>
 8003a8a:	b110      	cbz	r0, 8003a92 <_printf_float+0x86>
 8003a8c:	232d      	movs	r3, #45	; 0x2d
 8003a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a92:	4b92      	ldr	r3, [pc, #584]	; (8003cdc <_printf_float+0x2d0>)
 8003a94:	4892      	ldr	r0, [pc, #584]	; (8003ce0 <_printf_float+0x2d4>)
 8003a96:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a9a:	bf94      	ite	ls
 8003a9c:	4698      	movls	r8, r3
 8003a9e:	4680      	movhi	r8, r0
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	f04f 0a00 	mov.w	sl, #0
 8003aa6:	6123      	str	r3, [r4, #16]
 8003aa8:	f02b 0304 	bic.w	r3, fp, #4
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	4633      	mov	r3, r6
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	9700      	str	r7, [sp, #0]
 8003ab6:	aa0f      	add	r2, sp, #60	; 0x3c
 8003ab8:	f000 f9d4 	bl	8003e64 <_printf_common>
 8003abc:	3001      	adds	r0, #1
 8003abe:	f040 8090 	bne.w	8003be2 <_printf_float+0x1d6>
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac6:	b011      	add	sp, #68	; 0x44
 8003ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003acc:	4642      	mov	r2, r8
 8003ace:	4653      	mov	r3, sl
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	f7fc ff9a 	bl	8000a0c <__aeabi_dcmpun>
 8003ad8:	b148      	cbz	r0, 8003aee <_printf_float+0xe2>
 8003ada:	f1ba 0f00 	cmp.w	sl, #0
 8003ade:	bfb8      	it	lt
 8003ae0:	232d      	movlt	r3, #45	; 0x2d
 8003ae2:	4880      	ldr	r0, [pc, #512]	; (8003ce4 <_printf_float+0x2d8>)
 8003ae4:	bfb8      	it	lt
 8003ae6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003aea:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <_printf_float+0x2dc>)
 8003aec:	e7d3      	b.n	8003a96 <_printf_float+0x8a>
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	d142      	bne.n	8003b7e <_printf_float+0x172>
 8003af8:	2306      	movs	r3, #6
 8003afa:	6063      	str	r3, [r4, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	9206      	str	r2, [sp, #24]
 8003b00:	aa0e      	add	r2, sp, #56	; 0x38
 8003b02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b06:	aa0d      	add	r2, sp, #52	; 0x34
 8003b08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b0c:	9203      	str	r2, [sp, #12]
 8003b0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	4642      	mov	r2, r8
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4628      	mov	r0, r5
 8003b20:	4653      	mov	r3, sl
 8003b22:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b24:	f7ff fed4 	bl	80038d0 <__cvt>
 8003b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b2a:	4680      	mov	r8, r0
 8003b2c:	2947      	cmp	r1, #71	; 0x47
 8003b2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b30:	d108      	bne.n	8003b44 <_printf_float+0x138>
 8003b32:	1cc8      	adds	r0, r1, #3
 8003b34:	db02      	blt.n	8003b3c <_printf_float+0x130>
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	dd40      	ble.n	8003bbe <_printf_float+0x1b2>
 8003b3c:	f1a9 0902 	sub.w	r9, r9, #2
 8003b40:	fa5f f989 	uxtb.w	r9, r9
 8003b44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b48:	d81f      	bhi.n	8003b8a <_printf_float+0x17e>
 8003b4a:	464a      	mov	r2, r9
 8003b4c:	3901      	subs	r1, #1
 8003b4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b52:	910d      	str	r1, [sp, #52]	; 0x34
 8003b54:	f7ff ff1b 	bl	800398e <__exponent>
 8003b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b5a:	4682      	mov	sl, r0
 8003b5c:	1813      	adds	r3, r2, r0
 8003b5e:	2a01      	cmp	r2, #1
 8003b60:	6123      	str	r3, [r4, #16]
 8003b62:	dc02      	bgt.n	8003b6a <_printf_float+0x15e>
 8003b64:	6822      	ldr	r2, [r4, #0]
 8003b66:	07d2      	lsls	r2, r2, #31
 8003b68:	d501      	bpl.n	8003b6e <_printf_float+0x162>
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d09b      	beq.n	8003aae <_printf_float+0xa2>
 8003b76:	232d      	movs	r3, #45	; 0x2d
 8003b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b7c:	e797      	b.n	8003aae <_printf_float+0xa2>
 8003b7e:	2947      	cmp	r1, #71	; 0x47
 8003b80:	d1bc      	bne.n	8003afc <_printf_float+0xf0>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ba      	bne.n	8003afc <_printf_float+0xf0>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e7b7      	b.n	8003afa <_printf_float+0xee>
 8003b8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b8e:	d118      	bne.n	8003bc2 <_printf_float+0x1b6>
 8003b90:	2900      	cmp	r1, #0
 8003b92:	6863      	ldr	r3, [r4, #4]
 8003b94:	dd0b      	ble.n	8003bae <_printf_float+0x1a2>
 8003b96:	6121      	str	r1, [r4, #16]
 8003b98:	b913      	cbnz	r3, 8003ba0 <_printf_float+0x194>
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	07d0      	lsls	r0, r2, #31
 8003b9e:	d502      	bpl.n	8003ba6 <_printf_float+0x19a>
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	440b      	add	r3, r1
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	f04f 0a00 	mov.w	sl, #0
 8003baa:	65a1      	str	r1, [r4, #88]	; 0x58
 8003bac:	e7df      	b.n	8003b6e <_printf_float+0x162>
 8003bae:	b913      	cbnz	r3, 8003bb6 <_printf_float+0x1aa>
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	07d2      	lsls	r2, r2, #31
 8003bb4:	d501      	bpl.n	8003bba <_printf_float+0x1ae>
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	e7f4      	b.n	8003ba4 <_printf_float+0x198>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e7f2      	b.n	8003ba4 <_printf_float+0x198>
 8003bbe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bc4:	4299      	cmp	r1, r3
 8003bc6:	db05      	blt.n	8003bd4 <_printf_float+0x1c8>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	6121      	str	r1, [r4, #16]
 8003bcc:	07d8      	lsls	r0, r3, #31
 8003bce:	d5ea      	bpl.n	8003ba6 <_printf_float+0x19a>
 8003bd0:	1c4b      	adds	r3, r1, #1
 8003bd2:	e7e7      	b.n	8003ba4 <_printf_float+0x198>
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	bfcc      	ite	gt
 8003bd8:	2201      	movgt	r2, #1
 8003bda:	f1c1 0202 	rsble	r2, r1, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	e7e0      	b.n	8003ba4 <_printf_float+0x198>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	055a      	lsls	r2, r3, #21
 8003be6:	d407      	bmi.n	8003bf8 <_printf_float+0x1ec>
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	4642      	mov	r2, r8
 8003bec:	4631      	mov	r1, r6
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b8      	blx	r7
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d12b      	bne.n	8003c4e <_printf_float+0x242>
 8003bf6:	e764      	b.n	8003ac2 <_printf_float+0xb6>
 8003bf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bfc:	f240 80dd 	bls.w	8003dba <_printf_float+0x3ae>
 8003c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c04:	2200      	movs	r2, #0
 8003c06:	2300      	movs	r3, #0
 8003c08:	f7fc fece 	bl	80009a8 <__aeabi_dcmpeq>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d033      	beq.n	8003c78 <_printf_float+0x26c>
 8003c10:	2301      	movs	r3, #1
 8003c12:	4631      	mov	r1, r6
 8003c14:	4628      	mov	r0, r5
 8003c16:	4a35      	ldr	r2, [pc, #212]	; (8003cec <_printf_float+0x2e0>)
 8003c18:	47b8      	blx	r7
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f43f af51 	beq.w	8003ac2 <_printf_float+0xb6>
 8003c20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c24:	429a      	cmp	r2, r3
 8003c26:	db02      	blt.n	8003c2e <_printf_float+0x222>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	07d8      	lsls	r0, r3, #31
 8003c2c:	d50f      	bpl.n	8003c4e <_printf_float+0x242>
 8003c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c32:	4631      	mov	r1, r6
 8003c34:	4628      	mov	r0, r5
 8003c36:	47b8      	blx	r7
 8003c38:	3001      	adds	r0, #1
 8003c3a:	f43f af42 	beq.w	8003ac2 <_printf_float+0xb6>
 8003c3e:	f04f 0800 	mov.w	r8, #0
 8003c42:	f104 091a 	add.w	r9, r4, #26
 8003c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	4543      	cmp	r3, r8
 8003c4c:	dc09      	bgt.n	8003c62 <_printf_float+0x256>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	079b      	lsls	r3, r3, #30
 8003c52:	f100 8102 	bmi.w	8003e5a <_printf_float+0x44e>
 8003c56:	68e0      	ldr	r0, [r4, #12]
 8003c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c5a:	4298      	cmp	r0, r3
 8003c5c:	bfb8      	it	lt
 8003c5e:	4618      	movlt	r0, r3
 8003c60:	e731      	b.n	8003ac6 <_printf_float+0xba>
 8003c62:	2301      	movs	r3, #1
 8003c64:	464a      	mov	r2, r9
 8003c66:	4631      	mov	r1, r6
 8003c68:	4628      	mov	r0, r5
 8003c6a:	47b8      	blx	r7
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f43f af28 	beq.w	8003ac2 <_printf_float+0xb6>
 8003c72:	f108 0801 	add.w	r8, r8, #1
 8003c76:	e7e6      	b.n	8003c46 <_printf_float+0x23a>
 8003c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	dc38      	bgt.n	8003cf0 <_printf_float+0x2e4>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4631      	mov	r1, r6
 8003c82:	4628      	mov	r0, r5
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <_printf_float+0x2e0>)
 8003c86:	47b8      	blx	r7
 8003c88:	3001      	adds	r0, #1
 8003c8a:	f43f af1a 	beq.w	8003ac2 <_printf_float+0xb6>
 8003c8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c92:	4313      	orrs	r3, r2
 8003c94:	d102      	bne.n	8003c9c <_printf_float+0x290>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	07d9      	lsls	r1, r3, #31
 8003c9a:	d5d8      	bpl.n	8003c4e <_printf_float+0x242>
 8003c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	f43f af0b 	beq.w	8003ac2 <_printf_float+0xb6>
 8003cac:	f04f 0900 	mov.w	r9, #0
 8003cb0:	f104 0a1a 	add.w	sl, r4, #26
 8003cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	454b      	cmp	r3, r9
 8003cba:	dc01      	bgt.n	8003cc0 <_printf_float+0x2b4>
 8003cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cbe:	e794      	b.n	8003bea <_printf_float+0x1de>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4652      	mov	r2, sl
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47b8      	blx	r7
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f43f aef9 	beq.w	8003ac2 <_printf_float+0xb6>
 8003cd0:	f109 0901 	add.w	r9, r9, #1
 8003cd4:	e7ee      	b.n	8003cb4 <_printf_float+0x2a8>
 8003cd6:	bf00      	nop
 8003cd8:	7fefffff 	.word	0x7fefffff
 8003cdc:	08006704 	.word	0x08006704
 8003ce0:	08006708 	.word	0x08006708
 8003ce4:	08006710 	.word	0x08006710
 8003ce8:	0800670c 	.word	0x0800670c
 8003cec:	08006714 	.word	0x08006714
 8003cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	bfa8      	it	ge
 8003cf8:	461a      	movge	r2, r3
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	4691      	mov	r9, r2
 8003cfe:	dc37      	bgt.n	8003d70 <_printf_float+0x364>
 8003d00:	f04f 0b00 	mov.w	fp, #0
 8003d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d08:	f104 021a 	add.w	r2, r4, #26
 8003d0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d10:	ebaa 0309 	sub.w	r3, sl, r9
 8003d14:	455b      	cmp	r3, fp
 8003d16:	dc33      	bgt.n	8003d80 <_printf_float+0x374>
 8003d18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	db3b      	blt.n	8003d98 <_printf_float+0x38c>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	07da      	lsls	r2, r3, #31
 8003d24:	d438      	bmi.n	8003d98 <_printf_float+0x38c>
 8003d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d2a:	eba3 020a 	sub.w	r2, r3, sl
 8003d2e:	eba3 0901 	sub.w	r9, r3, r1
 8003d32:	4591      	cmp	r9, r2
 8003d34:	bfa8      	it	ge
 8003d36:	4691      	movge	r9, r2
 8003d38:	f1b9 0f00 	cmp.w	r9, #0
 8003d3c:	dc34      	bgt.n	8003da8 <_printf_float+0x39c>
 8003d3e:	f04f 0800 	mov.w	r8, #0
 8003d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d46:	f104 0a1a 	add.w	sl, r4, #26
 8003d4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	eba3 0309 	sub.w	r3, r3, r9
 8003d54:	4543      	cmp	r3, r8
 8003d56:	f77f af7a 	ble.w	8003c4e <_printf_float+0x242>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4652      	mov	r2, sl
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4628      	mov	r0, r5
 8003d62:	47b8      	blx	r7
 8003d64:	3001      	adds	r0, #1
 8003d66:	f43f aeac 	beq.w	8003ac2 <_printf_float+0xb6>
 8003d6a:	f108 0801 	add.w	r8, r8, #1
 8003d6e:	e7ec      	b.n	8003d4a <_printf_float+0x33e>
 8003d70:	4613      	mov	r3, r2
 8003d72:	4631      	mov	r1, r6
 8003d74:	4642      	mov	r2, r8
 8003d76:	4628      	mov	r0, r5
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d1c0      	bne.n	8003d00 <_printf_float+0x2f4>
 8003d7e:	e6a0      	b.n	8003ac2 <_printf_float+0xb6>
 8003d80:	2301      	movs	r3, #1
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d88:	47b8      	blx	r7
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	f43f ae99 	beq.w	8003ac2 <_printf_float+0xb6>
 8003d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d92:	f10b 0b01 	add.w	fp, fp, #1
 8003d96:	e7b9      	b.n	8003d0c <_printf_float+0x300>
 8003d98:	4631      	mov	r1, r6
 8003d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	d1bf      	bne.n	8003d26 <_printf_float+0x31a>
 8003da6:	e68c      	b.n	8003ac2 <_printf_float+0xb6>
 8003da8:	464b      	mov	r3, r9
 8003daa:	4631      	mov	r1, r6
 8003dac:	4628      	mov	r0, r5
 8003dae:	eb08 020a 	add.w	r2, r8, sl
 8003db2:	47b8      	blx	r7
 8003db4:	3001      	adds	r0, #1
 8003db6:	d1c2      	bne.n	8003d3e <_printf_float+0x332>
 8003db8:	e683      	b.n	8003ac2 <_printf_float+0xb6>
 8003dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dbc:	2a01      	cmp	r2, #1
 8003dbe:	dc01      	bgt.n	8003dc4 <_printf_float+0x3b8>
 8003dc0:	07db      	lsls	r3, r3, #31
 8003dc2:	d537      	bpl.n	8003e34 <_printf_float+0x428>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	4631      	mov	r1, r6
 8003dca:	4628      	mov	r0, r5
 8003dcc:	47b8      	blx	r7
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f43f ae77 	beq.w	8003ac2 <_printf_float+0xb6>
 8003dd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b8      	blx	r7
 8003dde:	3001      	adds	r0, #1
 8003de0:	f43f ae6f 	beq.w	8003ac2 <_printf_float+0xb6>
 8003de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003de8:	2200      	movs	r2, #0
 8003dea:	2300      	movs	r3, #0
 8003dec:	f7fc fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8003df0:	b9d8      	cbnz	r0, 8003e2a <_printf_float+0x41e>
 8003df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003df4:	f108 0201 	add.w	r2, r8, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	47b8      	blx	r7
 8003e00:	3001      	adds	r0, #1
 8003e02:	d10e      	bne.n	8003e22 <_printf_float+0x416>
 8003e04:	e65d      	b.n	8003ac2 <_printf_float+0xb6>
 8003e06:	2301      	movs	r3, #1
 8003e08:	464a      	mov	r2, r9
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	f43f ae56 	beq.w	8003ac2 <_printf_float+0xb6>
 8003e16:	f108 0801 	add.w	r8, r8, #1
 8003e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	4543      	cmp	r3, r8
 8003e20:	dcf1      	bgt.n	8003e06 <_printf_float+0x3fa>
 8003e22:	4653      	mov	r3, sl
 8003e24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e28:	e6e0      	b.n	8003bec <_printf_float+0x1e0>
 8003e2a:	f04f 0800 	mov.w	r8, #0
 8003e2e:	f104 091a 	add.w	r9, r4, #26
 8003e32:	e7f2      	b.n	8003e1a <_printf_float+0x40e>
 8003e34:	2301      	movs	r3, #1
 8003e36:	4642      	mov	r2, r8
 8003e38:	e7df      	b.n	8003dfa <_printf_float+0x3ee>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	464a      	mov	r2, r9
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4628      	mov	r0, r5
 8003e42:	47b8      	blx	r7
 8003e44:	3001      	adds	r0, #1
 8003e46:	f43f ae3c 	beq.w	8003ac2 <_printf_float+0xb6>
 8003e4a:	f108 0801 	add.w	r8, r8, #1
 8003e4e:	68e3      	ldr	r3, [r4, #12]
 8003e50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003e52:	1a5b      	subs	r3, r3, r1
 8003e54:	4543      	cmp	r3, r8
 8003e56:	dcf0      	bgt.n	8003e3a <_printf_float+0x42e>
 8003e58:	e6fd      	b.n	8003c56 <_printf_float+0x24a>
 8003e5a:	f04f 0800 	mov.w	r8, #0
 8003e5e:	f104 0919 	add.w	r9, r4, #25
 8003e62:	e7f4      	b.n	8003e4e <_printf_float+0x442>

08003e64 <_printf_common>:
 8003e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e68:	4616      	mov	r6, r2
 8003e6a:	4699      	mov	r9, r3
 8003e6c:	688a      	ldr	r2, [r1, #8]
 8003e6e:	690b      	ldr	r3, [r1, #16]
 8003e70:	4607      	mov	r7, r0
 8003e72:	4293      	cmp	r3, r2
 8003e74:	bfb8      	it	lt
 8003e76:	4613      	movlt	r3, r2
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e84:	b10a      	cbz	r2, 8003e8a <_printf_common+0x26>
 8003e86:	3301      	adds	r3, #1
 8003e88:	6033      	str	r3, [r6, #0]
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	0699      	lsls	r1, r3, #26
 8003e8e:	bf42      	ittt	mi
 8003e90:	6833      	ldrmi	r3, [r6, #0]
 8003e92:	3302      	addmi	r3, #2
 8003e94:	6033      	strmi	r3, [r6, #0]
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	f015 0506 	ands.w	r5, r5, #6
 8003e9c:	d106      	bne.n	8003eac <_printf_common+0x48>
 8003e9e:	f104 0a19 	add.w	sl, r4, #25
 8003ea2:	68e3      	ldr	r3, [r4, #12]
 8003ea4:	6832      	ldr	r2, [r6, #0]
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	42ab      	cmp	r3, r5
 8003eaa:	dc28      	bgt.n	8003efe <_printf_common+0x9a>
 8003eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003eb0:	1e13      	subs	r3, r2, #0
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	bf18      	it	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	0692      	lsls	r2, r2, #26
 8003eba:	d42d      	bmi.n	8003f18 <_printf_common+0xb4>
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ec4:	47c0      	blx	r8
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d020      	beq.n	8003f0c <_printf_common+0xa8>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	68e5      	ldr	r5, [r4, #12]
 8003ece:	f003 0306 	and.w	r3, r3, #6
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	bf18      	it	ne
 8003ed6:	2500      	movne	r5, #0
 8003ed8:	6832      	ldr	r2, [r6, #0]
 8003eda:	f04f 0600 	mov.w	r6, #0
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	bf08      	it	eq
 8003ee2:	1aad      	subeq	r5, r5, r2
 8003ee4:	6922      	ldr	r2, [r4, #16]
 8003ee6:	bf08      	it	eq
 8003ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfc4      	itt	gt
 8003ef0:	1a9b      	subgt	r3, r3, r2
 8003ef2:	18ed      	addgt	r5, r5, r3
 8003ef4:	341a      	adds	r4, #26
 8003ef6:	42b5      	cmp	r5, r6
 8003ef8:	d11a      	bne.n	8003f30 <_printf_common+0xcc>
 8003efa:	2000      	movs	r0, #0
 8003efc:	e008      	b.n	8003f10 <_printf_common+0xac>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4652      	mov	r2, sl
 8003f02:	4649      	mov	r1, r9
 8003f04:	4638      	mov	r0, r7
 8003f06:	47c0      	blx	r8
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d103      	bne.n	8003f14 <_printf_common+0xb0>
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f14:	3501      	adds	r5, #1
 8003f16:	e7c4      	b.n	8003ea2 <_printf_common+0x3e>
 8003f18:	2030      	movs	r0, #48	; 0x30
 8003f1a:	18e1      	adds	r1, r4, r3
 8003f1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f26:	4422      	add	r2, r4
 8003f28:	3302      	adds	r3, #2
 8003f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f2e:	e7c5      	b.n	8003ebc <_printf_common+0x58>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4622      	mov	r2, r4
 8003f34:	4649      	mov	r1, r9
 8003f36:	4638      	mov	r0, r7
 8003f38:	47c0      	blx	r8
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d0e6      	beq.n	8003f0c <_printf_common+0xa8>
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7d9      	b.n	8003ef6 <_printf_common+0x92>
	...

08003f44 <_printf_i>:
 8003f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	7e0f      	ldrb	r7, [r1, #24]
 8003f4a:	4691      	mov	r9, r2
 8003f4c:	2f78      	cmp	r7, #120	; 0x78
 8003f4e:	4680      	mov	r8, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	469a      	mov	sl, r3
 8003f54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f5a:	d807      	bhi.n	8003f6c <_printf_i+0x28>
 8003f5c:	2f62      	cmp	r7, #98	; 0x62
 8003f5e:	d80a      	bhi.n	8003f76 <_printf_i+0x32>
 8003f60:	2f00      	cmp	r7, #0
 8003f62:	f000 80d9 	beq.w	8004118 <_printf_i+0x1d4>
 8003f66:	2f58      	cmp	r7, #88	; 0x58
 8003f68:	f000 80a4 	beq.w	80040b4 <_printf_i+0x170>
 8003f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f74:	e03a      	b.n	8003fec <_printf_i+0xa8>
 8003f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f7a:	2b15      	cmp	r3, #21
 8003f7c:	d8f6      	bhi.n	8003f6c <_printf_i+0x28>
 8003f7e:	a101      	add	r1, pc, #4	; (adr r1, 8003f84 <_printf_i+0x40>)
 8003f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08003ff1 	.word	0x08003ff1
 8003f8c:	08003f6d 	.word	0x08003f6d
 8003f90:	08003f6d 	.word	0x08003f6d
 8003f94:	08003f6d 	.word	0x08003f6d
 8003f98:	08003f6d 	.word	0x08003f6d
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003f6d 	.word	0x08003f6d
 8003fa4:	08003f6d 	.word	0x08003f6d
 8003fa8:	08003f6d 	.word	0x08003f6d
 8003fac:	08003f6d 	.word	0x08003f6d
 8003fb0:	080040ff 	.word	0x080040ff
 8003fb4:	08004021 	.word	0x08004021
 8003fb8:	080040e1 	.word	0x080040e1
 8003fbc:	08003f6d 	.word	0x08003f6d
 8003fc0:	08003f6d 	.word	0x08003f6d
 8003fc4:	08004121 	.word	0x08004121
 8003fc8:	08003f6d 	.word	0x08003f6d
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08003f6d 	.word	0x08003f6d
 8003fd4:	08003f6d 	.word	0x08003f6d
 8003fd8:	080040e9 	.word	0x080040e9
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	602a      	str	r2, [r5, #0]
 8003fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0a4      	b.n	800413a <_printf_i+0x1f6>
 8003ff0:	6820      	ldr	r0, [r4, #0]
 8003ff2:	6829      	ldr	r1, [r5, #0]
 8003ff4:	0606      	lsls	r6, r0, #24
 8003ff6:	f101 0304 	add.w	r3, r1, #4
 8003ffa:	d50a      	bpl.n	8004012 <_printf_i+0xce>
 8003ffc:	680e      	ldr	r6, [r1, #0]
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	2e00      	cmp	r6, #0
 8004002:	da03      	bge.n	800400c <_printf_i+0xc8>
 8004004:	232d      	movs	r3, #45	; 0x2d
 8004006:	4276      	negs	r6, r6
 8004008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400c:	230a      	movs	r3, #10
 800400e:	485e      	ldr	r0, [pc, #376]	; (8004188 <_printf_i+0x244>)
 8004010:	e019      	b.n	8004046 <_printf_i+0x102>
 8004012:	680e      	ldr	r6, [r1, #0]
 8004014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	bf18      	it	ne
 800401c:	b236      	sxthne	r6, r6
 800401e:	e7ef      	b.n	8004000 <_printf_i+0xbc>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1d19      	adds	r1, r3, #4
 8004026:	6029      	str	r1, [r5, #0]
 8004028:	0601      	lsls	r1, r0, #24
 800402a:	d501      	bpl.n	8004030 <_printf_i+0xec>
 800402c:	681e      	ldr	r6, [r3, #0]
 800402e:	e002      	b.n	8004036 <_printf_i+0xf2>
 8004030:	0646      	lsls	r6, r0, #25
 8004032:	d5fb      	bpl.n	800402c <_printf_i+0xe8>
 8004034:	881e      	ldrh	r6, [r3, #0]
 8004036:	2f6f      	cmp	r7, #111	; 0x6f
 8004038:	bf0c      	ite	eq
 800403a:	2308      	moveq	r3, #8
 800403c:	230a      	movne	r3, #10
 800403e:	4852      	ldr	r0, [pc, #328]	; (8004188 <_printf_i+0x244>)
 8004040:	2100      	movs	r1, #0
 8004042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004046:	6865      	ldr	r5, [r4, #4]
 8004048:	2d00      	cmp	r5, #0
 800404a:	bfa8      	it	ge
 800404c:	6821      	ldrge	r1, [r4, #0]
 800404e:	60a5      	str	r5, [r4, #8]
 8004050:	bfa4      	itt	ge
 8004052:	f021 0104 	bicge.w	r1, r1, #4
 8004056:	6021      	strge	r1, [r4, #0]
 8004058:	b90e      	cbnz	r6, 800405e <_printf_i+0x11a>
 800405a:	2d00      	cmp	r5, #0
 800405c:	d04d      	beq.n	80040fa <_printf_i+0x1b6>
 800405e:	4615      	mov	r5, r2
 8004060:	fbb6 f1f3 	udiv	r1, r6, r3
 8004064:	fb03 6711 	mls	r7, r3, r1, r6
 8004068:	5dc7      	ldrb	r7, [r0, r7]
 800406a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800406e:	4637      	mov	r7, r6
 8004070:	42bb      	cmp	r3, r7
 8004072:	460e      	mov	r6, r1
 8004074:	d9f4      	bls.n	8004060 <_printf_i+0x11c>
 8004076:	2b08      	cmp	r3, #8
 8004078:	d10b      	bne.n	8004092 <_printf_i+0x14e>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	07de      	lsls	r6, r3, #31
 800407e:	d508      	bpl.n	8004092 <_printf_i+0x14e>
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	6861      	ldr	r1, [r4, #4]
 8004084:	4299      	cmp	r1, r3
 8004086:	bfde      	ittt	le
 8004088:	2330      	movle	r3, #48	; 0x30
 800408a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800408e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004092:	1b52      	subs	r2, r2, r5
 8004094:	6122      	str	r2, [r4, #16]
 8004096:	464b      	mov	r3, r9
 8004098:	4621      	mov	r1, r4
 800409a:	4640      	mov	r0, r8
 800409c:	f8cd a000 	str.w	sl, [sp]
 80040a0:	aa03      	add	r2, sp, #12
 80040a2:	f7ff fedf 	bl	8003e64 <_printf_common>
 80040a6:	3001      	adds	r0, #1
 80040a8:	d14c      	bne.n	8004144 <_printf_i+0x200>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	b004      	add	sp, #16
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	4834      	ldr	r0, [pc, #208]	; (8004188 <_printf_i+0x244>)
 80040b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040ba:	6829      	ldr	r1, [r5, #0]
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	f851 6b04 	ldr.w	r6, [r1], #4
 80040c2:	6029      	str	r1, [r5, #0]
 80040c4:	061d      	lsls	r5, r3, #24
 80040c6:	d514      	bpl.n	80040f2 <_printf_i+0x1ae>
 80040c8:	07df      	lsls	r7, r3, #31
 80040ca:	bf44      	itt	mi
 80040cc:	f043 0320 	orrmi.w	r3, r3, #32
 80040d0:	6023      	strmi	r3, [r4, #0]
 80040d2:	b91e      	cbnz	r6, 80040dc <_printf_i+0x198>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	f023 0320 	bic.w	r3, r3, #32
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	2310      	movs	r3, #16
 80040de:	e7af      	b.n	8004040 <_printf_i+0xfc>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	f043 0320 	orr.w	r3, r3, #32
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	2378      	movs	r3, #120	; 0x78
 80040ea:	4828      	ldr	r0, [pc, #160]	; (800418c <_printf_i+0x248>)
 80040ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040f0:	e7e3      	b.n	80040ba <_printf_i+0x176>
 80040f2:	0659      	lsls	r1, r3, #25
 80040f4:	bf48      	it	mi
 80040f6:	b2b6      	uxthmi	r6, r6
 80040f8:	e7e6      	b.n	80040c8 <_printf_i+0x184>
 80040fa:	4615      	mov	r5, r2
 80040fc:	e7bb      	b.n	8004076 <_printf_i+0x132>
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	6826      	ldr	r6, [r4, #0]
 8004102:	1d18      	adds	r0, r3, #4
 8004104:	6961      	ldr	r1, [r4, #20]
 8004106:	6028      	str	r0, [r5, #0]
 8004108:	0635      	lsls	r5, r6, #24
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	d501      	bpl.n	8004112 <_printf_i+0x1ce>
 800410e:	6019      	str	r1, [r3, #0]
 8004110:	e002      	b.n	8004118 <_printf_i+0x1d4>
 8004112:	0670      	lsls	r0, r6, #25
 8004114:	d5fb      	bpl.n	800410e <_printf_i+0x1ca>
 8004116:	8019      	strh	r1, [r3, #0]
 8004118:	2300      	movs	r3, #0
 800411a:	4615      	mov	r5, r2
 800411c:	6123      	str	r3, [r4, #16]
 800411e:	e7ba      	b.n	8004096 <_printf_i+0x152>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	2100      	movs	r1, #0
 8004124:	1d1a      	adds	r2, r3, #4
 8004126:	602a      	str	r2, [r5, #0]
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	4628      	mov	r0, r5
 800412e:	f000 fee9 	bl	8004f04 <memchr>
 8004132:	b108      	cbz	r0, 8004138 <_printf_i+0x1f4>
 8004134:	1b40      	subs	r0, r0, r5
 8004136:	6060      	str	r0, [r4, #4]
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	2300      	movs	r3, #0
 800413e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004142:	e7a8      	b.n	8004096 <_printf_i+0x152>
 8004144:	462a      	mov	r2, r5
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	6923      	ldr	r3, [r4, #16]
 800414c:	47d0      	blx	sl
 800414e:	3001      	adds	r0, #1
 8004150:	d0ab      	beq.n	80040aa <_printf_i+0x166>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	079b      	lsls	r3, r3, #30
 8004156:	d413      	bmi.n	8004180 <_printf_i+0x23c>
 8004158:	68e0      	ldr	r0, [r4, #12]
 800415a:	9b03      	ldr	r3, [sp, #12]
 800415c:	4298      	cmp	r0, r3
 800415e:	bfb8      	it	lt
 8004160:	4618      	movlt	r0, r3
 8004162:	e7a4      	b.n	80040ae <_printf_i+0x16a>
 8004164:	2301      	movs	r3, #1
 8004166:	4632      	mov	r2, r6
 8004168:	4649      	mov	r1, r9
 800416a:	4640      	mov	r0, r8
 800416c:	47d0      	blx	sl
 800416e:	3001      	adds	r0, #1
 8004170:	d09b      	beq.n	80040aa <_printf_i+0x166>
 8004172:	3501      	adds	r5, #1
 8004174:	68e3      	ldr	r3, [r4, #12]
 8004176:	9903      	ldr	r1, [sp, #12]
 8004178:	1a5b      	subs	r3, r3, r1
 800417a:	42ab      	cmp	r3, r5
 800417c:	dcf2      	bgt.n	8004164 <_printf_i+0x220>
 800417e:	e7eb      	b.n	8004158 <_printf_i+0x214>
 8004180:	2500      	movs	r5, #0
 8004182:	f104 0619 	add.w	r6, r4, #25
 8004186:	e7f5      	b.n	8004174 <_printf_i+0x230>
 8004188:	08006716 	.word	0x08006716
 800418c:	08006727 	.word	0x08006727

08004190 <sniprintf>:
 8004190:	b40c      	push	{r2, r3}
 8004192:	b530      	push	{r4, r5, lr}
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <sniprintf+0x64>)
 8004196:	1e0c      	subs	r4, r1, #0
 8004198:	681d      	ldr	r5, [r3, #0]
 800419a:	b09d      	sub	sp, #116	; 0x74
 800419c:	da08      	bge.n	80041b0 <sniprintf+0x20>
 800419e:	238b      	movs	r3, #139	; 0x8b
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	b01d      	add	sp, #116	; 0x74
 80041a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041ac:	b002      	add	sp, #8
 80041ae:	4770      	bx	lr
 80041b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80041b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80041b8:	bf0c      	ite	eq
 80041ba:	4623      	moveq	r3, r4
 80041bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80041c0:	9304      	str	r3, [sp, #16]
 80041c2:	9307      	str	r3, [sp, #28]
 80041c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c8:	9002      	str	r0, [sp, #8]
 80041ca:	9006      	str	r0, [sp, #24]
 80041cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80041d0:	4628      	mov	r0, r5
 80041d2:	ab21      	add	r3, sp, #132	; 0x84
 80041d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041d6:	a902      	add	r1, sp, #8
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	f001 fb7d 	bl	80058d8 <_svfiprintf_r>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	bfbc      	itt	lt
 80041e2:	238b      	movlt	r3, #139	; 0x8b
 80041e4:	602b      	strlt	r3, [r5, #0]
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	d0dd      	beq.n	80041a6 <sniprintf+0x16>
 80041ea:	2200      	movs	r2, #0
 80041ec:	9b02      	ldr	r3, [sp, #8]
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e7d9      	b.n	80041a6 <sniprintf+0x16>
 80041f2:	bf00      	nop
 80041f4:	2000001c 	.word	0x2000001c

080041f8 <quorem>:
 80041f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	6903      	ldr	r3, [r0, #16]
 80041fe:	690c      	ldr	r4, [r1, #16]
 8004200:	4607      	mov	r7, r0
 8004202:	42a3      	cmp	r3, r4
 8004204:	f2c0 8082 	blt.w	800430c <quorem+0x114>
 8004208:	3c01      	subs	r4, #1
 800420a:	f100 0514 	add.w	r5, r0, #20
 800420e:	f101 0814 	add.w	r8, r1, #20
 8004212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800421c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004220:	3301      	adds	r3, #1
 8004222:	429a      	cmp	r2, r3
 8004224:	fbb2 f6f3 	udiv	r6, r2, r3
 8004228:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800422c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004230:	d331      	bcc.n	8004296 <quorem+0x9e>
 8004232:	f04f 0e00 	mov.w	lr, #0
 8004236:	4640      	mov	r0, r8
 8004238:	46ac      	mov	ip, r5
 800423a:	46f2      	mov	sl, lr
 800423c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004240:	b293      	uxth	r3, r2
 8004242:	fb06 e303 	mla	r3, r6, r3, lr
 8004246:	0c12      	lsrs	r2, r2, #16
 8004248:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800424c:	b29b      	uxth	r3, r3
 800424e:	fb06 e202 	mla	r2, r6, r2, lr
 8004252:	ebaa 0303 	sub.w	r3, sl, r3
 8004256:	f8dc a000 	ldr.w	sl, [ip]
 800425a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800425e:	fa1f fa8a 	uxth.w	sl, sl
 8004262:	4453      	add	r3, sl
 8004264:	f8dc a000 	ldr.w	sl, [ip]
 8004268:	b292      	uxth	r2, r2
 800426a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800426e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004272:	b29b      	uxth	r3, r3
 8004274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004278:	4581      	cmp	r9, r0
 800427a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800427e:	f84c 3b04 	str.w	r3, [ip], #4
 8004282:	d2db      	bcs.n	800423c <quorem+0x44>
 8004284:	f855 300b 	ldr.w	r3, [r5, fp]
 8004288:	b92b      	cbnz	r3, 8004296 <quorem+0x9e>
 800428a:	9b01      	ldr	r3, [sp, #4]
 800428c:	3b04      	subs	r3, #4
 800428e:	429d      	cmp	r5, r3
 8004290:	461a      	mov	r2, r3
 8004292:	d32f      	bcc.n	80042f4 <quorem+0xfc>
 8004294:	613c      	str	r4, [r7, #16]
 8004296:	4638      	mov	r0, r7
 8004298:	f001 f8ce 	bl	8005438 <__mcmp>
 800429c:	2800      	cmp	r0, #0
 800429e:	db25      	blt.n	80042ec <quorem+0xf4>
 80042a0:	4628      	mov	r0, r5
 80042a2:	f04f 0c00 	mov.w	ip, #0
 80042a6:	3601      	adds	r6, #1
 80042a8:	f858 1b04 	ldr.w	r1, [r8], #4
 80042ac:	f8d0 e000 	ldr.w	lr, [r0]
 80042b0:	b28b      	uxth	r3, r1
 80042b2:	ebac 0303 	sub.w	r3, ip, r3
 80042b6:	fa1f f28e 	uxth.w	r2, lr
 80042ba:	4413      	add	r3, r2
 80042bc:	0c0a      	lsrs	r2, r1, #16
 80042be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80042c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042cc:	45c1      	cmp	r9, r8
 80042ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80042d2:	f840 3b04 	str.w	r3, [r0], #4
 80042d6:	d2e7      	bcs.n	80042a8 <quorem+0xb0>
 80042d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042e0:	b922      	cbnz	r2, 80042ec <quorem+0xf4>
 80042e2:	3b04      	subs	r3, #4
 80042e4:	429d      	cmp	r5, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	d30a      	bcc.n	8004300 <quorem+0x108>
 80042ea:	613c      	str	r4, [r7, #16]
 80042ec:	4630      	mov	r0, r6
 80042ee:	b003      	add	sp, #12
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	3b04      	subs	r3, #4
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d1cb      	bne.n	8004294 <quorem+0x9c>
 80042fc:	3c01      	subs	r4, #1
 80042fe:	e7c6      	b.n	800428e <quorem+0x96>
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	3b04      	subs	r3, #4
 8004304:	2a00      	cmp	r2, #0
 8004306:	d1f0      	bne.n	80042ea <quorem+0xf2>
 8004308:	3c01      	subs	r4, #1
 800430a:	e7eb      	b.n	80042e4 <quorem+0xec>
 800430c:	2000      	movs	r0, #0
 800430e:	e7ee      	b.n	80042ee <quorem+0xf6>

08004310 <_dtoa_r>:
 8004310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	4616      	mov	r6, r2
 8004316:	461f      	mov	r7, r3
 8004318:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800431a:	b099      	sub	sp, #100	; 0x64
 800431c:	4605      	mov	r5, r0
 800431e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004322:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004326:	b974      	cbnz	r4, 8004346 <_dtoa_r+0x36>
 8004328:	2010      	movs	r0, #16
 800432a:	f000 fde3 	bl	8004ef4 <malloc>
 800432e:	4602      	mov	r2, r0
 8004330:	6268      	str	r0, [r5, #36]	; 0x24
 8004332:	b920      	cbnz	r0, 800433e <_dtoa_r+0x2e>
 8004334:	21ea      	movs	r1, #234	; 0xea
 8004336:	4ba8      	ldr	r3, [pc, #672]	; (80045d8 <_dtoa_r+0x2c8>)
 8004338:	48a8      	ldr	r0, [pc, #672]	; (80045dc <_dtoa_r+0x2cc>)
 800433a:	f001 fbdd 	bl	8005af8 <__assert_func>
 800433e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004342:	6004      	str	r4, [r0, #0]
 8004344:	60c4      	str	r4, [r0, #12]
 8004346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	b151      	cbz	r1, 8004362 <_dtoa_r+0x52>
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	2301      	movs	r3, #1
 8004350:	4093      	lsls	r3, r2
 8004352:	604a      	str	r2, [r1, #4]
 8004354:	608b      	str	r3, [r1, #8]
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fe30 	bl	8004fbc <_Bfree>
 800435c:	2200      	movs	r2, #0
 800435e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	1e3b      	subs	r3, r7, #0
 8004364:	bfaf      	iteee	ge
 8004366:	2300      	movge	r3, #0
 8004368:	2201      	movlt	r2, #1
 800436a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800436e:	9305      	strlt	r3, [sp, #20]
 8004370:	bfa8      	it	ge
 8004372:	f8c8 3000 	strge.w	r3, [r8]
 8004376:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800437a:	4b99      	ldr	r3, [pc, #612]	; (80045e0 <_dtoa_r+0x2d0>)
 800437c:	bfb8      	it	lt
 800437e:	f8c8 2000 	strlt.w	r2, [r8]
 8004382:	ea33 0309 	bics.w	r3, r3, r9
 8004386:	d119      	bne.n	80043bc <_dtoa_r+0xac>
 8004388:	f242 730f 	movw	r3, #9999	; 0x270f
 800438c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004394:	4333      	orrs	r3, r6
 8004396:	f000 857f 	beq.w	8004e98 <_dtoa_r+0xb88>
 800439a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800439c:	b953      	cbnz	r3, 80043b4 <_dtoa_r+0xa4>
 800439e:	4b91      	ldr	r3, [pc, #580]	; (80045e4 <_dtoa_r+0x2d4>)
 80043a0:	e022      	b.n	80043e8 <_dtoa_r+0xd8>
 80043a2:	4b91      	ldr	r3, [pc, #580]	; (80045e8 <_dtoa_r+0x2d8>)
 80043a4:	9303      	str	r3, [sp, #12]
 80043a6:	3308      	adds	r3, #8
 80043a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	9803      	ldr	r0, [sp, #12]
 80043ae:	b019      	add	sp, #100	; 0x64
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b4:	4b8b      	ldr	r3, [pc, #556]	; (80045e4 <_dtoa_r+0x2d4>)
 80043b6:	9303      	str	r3, [sp, #12]
 80043b8:	3303      	adds	r3, #3
 80043ba:	e7f5      	b.n	80043a8 <_dtoa_r+0x98>
 80043bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80043c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	f7fc faec 	bl	80009a8 <__aeabi_dcmpeq>
 80043d0:	4680      	mov	r8, r0
 80043d2:	b158      	cbz	r0, 80043ec <_dtoa_r+0xdc>
 80043d4:	2301      	movs	r3, #1
 80043d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8558 	beq.w	8004e92 <_dtoa_r+0xb82>
 80043e2:	4882      	ldr	r0, [pc, #520]	; (80045ec <_dtoa_r+0x2dc>)
 80043e4:	6018      	str	r0, [r3, #0]
 80043e6:	1e43      	subs	r3, r0, #1
 80043e8:	9303      	str	r3, [sp, #12]
 80043ea:	e7df      	b.n	80043ac <_dtoa_r+0x9c>
 80043ec:	ab16      	add	r3, sp, #88	; 0x58
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	ab17      	add	r3, sp, #92	; 0x5c
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4628      	mov	r0, r5
 80043f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043fa:	f001 f8c5 	bl	8005588 <__d2b>
 80043fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004402:	4683      	mov	fp, r0
 8004404:	2c00      	cmp	r4, #0
 8004406:	d07f      	beq.n	8004508 <_dtoa_r+0x1f8>
 8004408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800440c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800440e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004416:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800441a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800441e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004422:	2200      	movs	r2, #0
 8004424:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <_dtoa_r+0x2e0>)
 8004426:	f7fb fe9f 	bl	8000168 <__aeabi_dsub>
 800442a:	a365      	add	r3, pc, #404	; (adr r3, 80045c0 <_dtoa_r+0x2b0>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f7fc f852 	bl	80004d8 <__aeabi_dmul>
 8004434:	a364      	add	r3, pc, #400	; (adr r3, 80045c8 <_dtoa_r+0x2b8>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fb fe97 	bl	800016c <__adddf3>
 800443e:	4606      	mov	r6, r0
 8004440:	4620      	mov	r0, r4
 8004442:	460f      	mov	r7, r1
 8004444:	f7fb ffde 	bl	8000404 <__aeabi_i2d>
 8004448:	a361      	add	r3, pc, #388	; (adr r3, 80045d0 <_dtoa_r+0x2c0>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fc f843 	bl	80004d8 <__aeabi_dmul>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4630      	mov	r0, r6
 8004458:	4639      	mov	r1, r7
 800445a:	f7fb fe87 	bl	800016c <__adddf3>
 800445e:	4606      	mov	r6, r0
 8004460:	460f      	mov	r7, r1
 8004462:	f7fc fae9 	bl	8000a38 <__aeabi_d2iz>
 8004466:	2200      	movs	r2, #0
 8004468:	4682      	mov	sl, r0
 800446a:	2300      	movs	r3, #0
 800446c:	4630      	mov	r0, r6
 800446e:	4639      	mov	r1, r7
 8004470:	f7fc faa4 	bl	80009bc <__aeabi_dcmplt>
 8004474:	b148      	cbz	r0, 800448a <_dtoa_r+0x17a>
 8004476:	4650      	mov	r0, sl
 8004478:	f7fb ffc4 	bl	8000404 <__aeabi_i2d>
 800447c:	4632      	mov	r2, r6
 800447e:	463b      	mov	r3, r7
 8004480:	f7fc fa92 	bl	80009a8 <__aeabi_dcmpeq>
 8004484:	b908      	cbnz	r0, 800448a <_dtoa_r+0x17a>
 8004486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800448a:	f1ba 0f16 	cmp.w	sl, #22
 800448e:	d858      	bhi.n	8004542 <_dtoa_r+0x232>
 8004490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004494:	4b57      	ldr	r3, [pc, #348]	; (80045f4 <_dtoa_r+0x2e4>)
 8004496:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fc fa8d 	bl	80009bc <__aeabi_dcmplt>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d04f      	beq.n	8004546 <_dtoa_r+0x236>
 80044a6:	2300      	movs	r3, #0
 80044a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80044ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044b0:	1b1c      	subs	r4, r3, r4
 80044b2:	1e63      	subs	r3, r4, #1
 80044b4:	9309      	str	r3, [sp, #36]	; 0x24
 80044b6:	bf49      	itett	mi
 80044b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80044bc:	2300      	movpl	r3, #0
 80044be:	9306      	strmi	r3, [sp, #24]
 80044c0:	2300      	movmi	r3, #0
 80044c2:	bf54      	ite	pl
 80044c4:	9306      	strpl	r3, [sp, #24]
 80044c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80044c8:	f1ba 0f00 	cmp.w	sl, #0
 80044cc:	db3d      	blt.n	800454a <_dtoa_r+0x23a>
 80044ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80044d4:	4453      	add	r3, sl
 80044d6:	9309      	str	r3, [sp, #36]	; 0x24
 80044d8:	2300      	movs	r3, #0
 80044da:	930a      	str	r3, [sp, #40]	; 0x28
 80044dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044de:	2b09      	cmp	r3, #9
 80044e0:	f200 808c 	bhi.w	80045fc <_dtoa_r+0x2ec>
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	bfc4      	itt	gt
 80044e8:	3b04      	subgt	r3, #4
 80044ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80044ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044ee:	bfc8      	it	gt
 80044f0:	2400      	movgt	r4, #0
 80044f2:	f1a3 0302 	sub.w	r3, r3, #2
 80044f6:	bfd8      	it	le
 80044f8:	2401      	movle	r4, #1
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	f200 808a 	bhi.w	8004614 <_dtoa_r+0x304>
 8004500:	e8df f003 	tbb	[pc, r3]
 8004504:	5b4d4f2d 	.word	0x5b4d4f2d
 8004508:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800450c:	441c      	add	r4, r3
 800450e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004512:	2b20      	cmp	r3, #32
 8004514:	bfc3      	ittte	gt
 8004516:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800451a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800451e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004522:	f1c3 0320 	rsble	r3, r3, #32
 8004526:	bfc6      	itte	gt
 8004528:	fa26 f000 	lsrgt.w	r0, r6, r0
 800452c:	4318      	orrgt	r0, r3
 800452e:	fa06 f003 	lslle.w	r0, r6, r3
 8004532:	f7fb ff57 	bl	80003e4 <__aeabi_ui2d>
 8004536:	2301      	movs	r3, #1
 8004538:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800453c:	3c01      	subs	r4, #1
 800453e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004540:	e76f      	b.n	8004422 <_dtoa_r+0x112>
 8004542:	2301      	movs	r3, #1
 8004544:	e7b2      	b.n	80044ac <_dtoa_r+0x19c>
 8004546:	900f      	str	r0, [sp, #60]	; 0x3c
 8004548:	e7b1      	b.n	80044ae <_dtoa_r+0x19e>
 800454a:	9b06      	ldr	r3, [sp, #24]
 800454c:	eba3 030a 	sub.w	r3, r3, sl
 8004550:	9306      	str	r3, [sp, #24]
 8004552:	f1ca 0300 	rsb	r3, sl, #0
 8004556:	930a      	str	r3, [sp, #40]	; 0x28
 8004558:	2300      	movs	r3, #0
 800455a:	930e      	str	r3, [sp, #56]	; 0x38
 800455c:	e7be      	b.n	80044dc <_dtoa_r+0x1cc>
 800455e:	2300      	movs	r3, #0
 8004560:	930b      	str	r3, [sp, #44]	; 0x2c
 8004562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004564:	2b00      	cmp	r3, #0
 8004566:	dc58      	bgt.n	800461a <_dtoa_r+0x30a>
 8004568:	f04f 0901 	mov.w	r9, #1
 800456c:	464b      	mov	r3, r9
 800456e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004572:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004576:	2200      	movs	r2, #0
 8004578:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800457a:	6042      	str	r2, [r0, #4]
 800457c:	2204      	movs	r2, #4
 800457e:	f102 0614 	add.w	r6, r2, #20
 8004582:	429e      	cmp	r6, r3
 8004584:	6841      	ldr	r1, [r0, #4]
 8004586:	d94e      	bls.n	8004626 <_dtoa_r+0x316>
 8004588:	4628      	mov	r0, r5
 800458a:	f000 fcd7 	bl	8004f3c <_Balloc>
 800458e:	9003      	str	r0, [sp, #12]
 8004590:	2800      	cmp	r0, #0
 8004592:	d14c      	bne.n	800462e <_dtoa_r+0x31e>
 8004594:	4602      	mov	r2, r0
 8004596:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <_dtoa_r+0x2e8>)
 800459c:	e6cc      	b.n	8004338 <_dtoa_r+0x28>
 800459e:	2301      	movs	r3, #1
 80045a0:	e7de      	b.n	8004560 <_dtoa_r+0x250>
 80045a2:	2300      	movs	r3, #0
 80045a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80045a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045a8:	eb0a 0903 	add.w	r9, sl, r3
 80045ac:	f109 0301 	add.w	r3, r9, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	9308      	str	r3, [sp, #32]
 80045b4:	bfb8      	it	lt
 80045b6:	2301      	movlt	r3, #1
 80045b8:	e7dd      	b.n	8004576 <_dtoa_r+0x266>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e7f2      	b.n	80045a4 <_dtoa_r+0x294>
 80045be:	bf00      	nop
 80045c0:	636f4361 	.word	0x636f4361
 80045c4:	3fd287a7 	.word	0x3fd287a7
 80045c8:	8b60c8b3 	.word	0x8b60c8b3
 80045cc:	3fc68a28 	.word	0x3fc68a28
 80045d0:	509f79fb 	.word	0x509f79fb
 80045d4:	3fd34413 	.word	0x3fd34413
 80045d8:	08006745 	.word	0x08006745
 80045dc:	0800675c 	.word	0x0800675c
 80045e0:	7ff00000 	.word	0x7ff00000
 80045e4:	08006741 	.word	0x08006741
 80045e8:	08006738 	.word	0x08006738
 80045ec:	08006715 	.word	0x08006715
 80045f0:	3ff80000 	.word	0x3ff80000
 80045f4:	08006850 	.word	0x08006850
 80045f8:	080067b7 	.word	0x080067b7
 80045fc:	2401      	movs	r4, #1
 80045fe:	2300      	movs	r3, #0
 8004600:	940b      	str	r4, [sp, #44]	; 0x2c
 8004602:	9322      	str	r3, [sp, #136]	; 0x88
 8004604:	f04f 39ff 	mov.w	r9, #4294967295
 8004608:	2200      	movs	r2, #0
 800460a:	2312      	movs	r3, #18
 800460c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004610:	9223      	str	r2, [sp, #140]	; 0x8c
 8004612:	e7b0      	b.n	8004576 <_dtoa_r+0x266>
 8004614:	2301      	movs	r3, #1
 8004616:	930b      	str	r3, [sp, #44]	; 0x2c
 8004618:	e7f4      	b.n	8004604 <_dtoa_r+0x2f4>
 800461a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800461e:	464b      	mov	r3, r9
 8004620:	f8cd 9020 	str.w	r9, [sp, #32]
 8004624:	e7a7      	b.n	8004576 <_dtoa_r+0x266>
 8004626:	3101      	adds	r1, #1
 8004628:	6041      	str	r1, [r0, #4]
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	e7a7      	b.n	800457e <_dtoa_r+0x26e>
 800462e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004630:	9a03      	ldr	r2, [sp, #12]
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	9b08      	ldr	r3, [sp, #32]
 8004636:	2b0e      	cmp	r3, #14
 8004638:	f200 80a8 	bhi.w	800478c <_dtoa_r+0x47c>
 800463c:	2c00      	cmp	r4, #0
 800463e:	f000 80a5 	beq.w	800478c <_dtoa_r+0x47c>
 8004642:	f1ba 0f00 	cmp.w	sl, #0
 8004646:	dd34      	ble.n	80046b2 <_dtoa_r+0x3a2>
 8004648:	4a9a      	ldr	r2, [pc, #616]	; (80048b4 <_dtoa_r+0x5a4>)
 800464a:	f00a 030f 	and.w	r3, sl, #15
 800464e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004652:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004656:	e9d3 3400 	ldrd	r3, r4, [r3]
 800465a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800465e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004662:	d016      	beq.n	8004692 <_dtoa_r+0x382>
 8004664:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004668:	4b93      	ldr	r3, [pc, #588]	; (80048b8 <_dtoa_r+0x5a8>)
 800466a:	2703      	movs	r7, #3
 800466c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004670:	f7fc f85c 	bl	800072c <__aeabi_ddiv>
 8004674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004678:	f004 040f 	and.w	r4, r4, #15
 800467c:	4e8e      	ldr	r6, [pc, #568]	; (80048b8 <_dtoa_r+0x5a8>)
 800467e:	b954      	cbnz	r4, 8004696 <_dtoa_r+0x386>
 8004680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004688:	f7fc f850 	bl	800072c <__aeabi_ddiv>
 800468c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004690:	e029      	b.n	80046e6 <_dtoa_r+0x3d6>
 8004692:	2702      	movs	r7, #2
 8004694:	e7f2      	b.n	800467c <_dtoa_r+0x36c>
 8004696:	07e1      	lsls	r1, r4, #31
 8004698:	d508      	bpl.n	80046ac <_dtoa_r+0x39c>
 800469a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800469e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046a2:	f7fb ff19 	bl	80004d8 <__aeabi_dmul>
 80046a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046aa:	3701      	adds	r7, #1
 80046ac:	1064      	asrs	r4, r4, #1
 80046ae:	3608      	adds	r6, #8
 80046b0:	e7e5      	b.n	800467e <_dtoa_r+0x36e>
 80046b2:	f000 80a5 	beq.w	8004800 <_dtoa_r+0x4f0>
 80046b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046ba:	f1ca 0400 	rsb	r4, sl, #0
 80046be:	4b7d      	ldr	r3, [pc, #500]	; (80048b4 <_dtoa_r+0x5a4>)
 80046c0:	f004 020f 	and.w	r2, r4, #15
 80046c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fb ff04 	bl	80004d8 <__aeabi_dmul>
 80046d0:	2702      	movs	r7, #2
 80046d2:	2300      	movs	r3, #0
 80046d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d8:	4e77      	ldr	r6, [pc, #476]	; (80048b8 <_dtoa_r+0x5a8>)
 80046da:	1124      	asrs	r4, r4, #4
 80046dc:	2c00      	cmp	r4, #0
 80046de:	f040 8084 	bne.w	80047ea <_dtoa_r+0x4da>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1d2      	bne.n	800468c <_dtoa_r+0x37c>
 80046e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 808b 	beq.w	8004804 <_dtoa_r+0x4f4>
 80046ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80046f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80046f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046fa:	2200      	movs	r2, #0
 80046fc:	4b6f      	ldr	r3, [pc, #444]	; (80048bc <_dtoa_r+0x5ac>)
 80046fe:	f7fc f95d 	bl	80009bc <__aeabi_dcmplt>
 8004702:	2800      	cmp	r0, #0
 8004704:	d07e      	beq.n	8004804 <_dtoa_r+0x4f4>
 8004706:	9b08      	ldr	r3, [sp, #32]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d07b      	beq.n	8004804 <_dtoa_r+0x4f4>
 800470c:	f1b9 0f00 	cmp.w	r9, #0
 8004710:	dd38      	ble.n	8004784 <_dtoa_r+0x474>
 8004712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004716:	2200      	movs	r2, #0
 8004718:	4b69      	ldr	r3, [pc, #420]	; (80048c0 <_dtoa_r+0x5b0>)
 800471a:	f7fb fedd 	bl	80004d8 <__aeabi_dmul>
 800471e:	464c      	mov	r4, r9
 8004720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004724:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004728:	3701      	adds	r7, #1
 800472a:	4638      	mov	r0, r7
 800472c:	f7fb fe6a 	bl	8000404 <__aeabi_i2d>
 8004730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004734:	f7fb fed0 	bl	80004d8 <__aeabi_dmul>
 8004738:	2200      	movs	r2, #0
 800473a:	4b62      	ldr	r3, [pc, #392]	; (80048c4 <_dtoa_r+0x5b4>)
 800473c:	f7fb fd16 	bl	800016c <__adddf3>
 8004740:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004744:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004748:	9611      	str	r6, [sp, #68]	; 0x44
 800474a:	2c00      	cmp	r4, #0
 800474c:	d15d      	bne.n	800480a <_dtoa_r+0x4fa>
 800474e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004752:	2200      	movs	r2, #0
 8004754:	4b5c      	ldr	r3, [pc, #368]	; (80048c8 <_dtoa_r+0x5b8>)
 8004756:	f7fb fd07 	bl	8000168 <__aeabi_dsub>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004762:	4633      	mov	r3, r6
 8004764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004766:	f7fc f947 	bl	80009f8 <__aeabi_dcmpgt>
 800476a:	2800      	cmp	r0, #0
 800476c:	f040 829c 	bne.w	8004ca8 <_dtoa_r+0x998>
 8004770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004776:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800477a:	f7fc f91f 	bl	80009bc <__aeabi_dcmplt>
 800477e:	2800      	cmp	r0, #0
 8004780:	f040 8290 	bne.w	8004ca4 <_dtoa_r+0x994>
 8004784:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004788:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800478c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800478e:	2b00      	cmp	r3, #0
 8004790:	f2c0 8152 	blt.w	8004a38 <_dtoa_r+0x728>
 8004794:	f1ba 0f0e 	cmp.w	sl, #14
 8004798:	f300 814e 	bgt.w	8004a38 <_dtoa_r+0x728>
 800479c:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <_dtoa_r+0x5a4>)
 800479e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f280 80db 	bge.w	8004968 <_dtoa_r+0x658>
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f300 80d7 	bgt.w	8004968 <_dtoa_r+0x658>
 80047ba:	f040 8272 	bne.w	8004ca2 <_dtoa_r+0x992>
 80047be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047c2:	2200      	movs	r2, #0
 80047c4:	4b40      	ldr	r3, [pc, #256]	; (80048c8 <_dtoa_r+0x5b8>)
 80047c6:	f7fb fe87 	bl	80004d8 <__aeabi_dmul>
 80047ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047ce:	f7fc f909 	bl	80009e4 <__aeabi_dcmpge>
 80047d2:	9c08      	ldr	r4, [sp, #32]
 80047d4:	4626      	mov	r6, r4
 80047d6:	2800      	cmp	r0, #0
 80047d8:	f040 8248 	bne.w	8004c6c <_dtoa_r+0x95c>
 80047dc:	2331      	movs	r3, #49	; 0x31
 80047de:	9f03      	ldr	r7, [sp, #12]
 80047e0:	f10a 0a01 	add.w	sl, sl, #1
 80047e4:	f807 3b01 	strb.w	r3, [r7], #1
 80047e8:	e244      	b.n	8004c74 <_dtoa_r+0x964>
 80047ea:	07e2      	lsls	r2, r4, #31
 80047ec:	d505      	bpl.n	80047fa <_dtoa_r+0x4ea>
 80047ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047f2:	f7fb fe71 	bl	80004d8 <__aeabi_dmul>
 80047f6:	2301      	movs	r3, #1
 80047f8:	3701      	adds	r7, #1
 80047fa:	1064      	asrs	r4, r4, #1
 80047fc:	3608      	adds	r6, #8
 80047fe:	e76d      	b.n	80046dc <_dtoa_r+0x3cc>
 8004800:	2702      	movs	r7, #2
 8004802:	e770      	b.n	80046e6 <_dtoa_r+0x3d6>
 8004804:	46d0      	mov	r8, sl
 8004806:	9c08      	ldr	r4, [sp, #32]
 8004808:	e78f      	b.n	800472a <_dtoa_r+0x41a>
 800480a:	9903      	ldr	r1, [sp, #12]
 800480c:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <_dtoa_r+0x5a4>)
 800480e:	4421      	add	r1, r4
 8004810:	9112      	str	r1, [sp, #72]	; 0x48
 8004812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004814:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004818:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800481c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004820:	2900      	cmp	r1, #0
 8004822:	d055      	beq.n	80048d0 <_dtoa_r+0x5c0>
 8004824:	2000      	movs	r0, #0
 8004826:	4929      	ldr	r1, [pc, #164]	; (80048cc <_dtoa_r+0x5bc>)
 8004828:	f7fb ff80 	bl	800072c <__aeabi_ddiv>
 800482c:	463b      	mov	r3, r7
 800482e:	4632      	mov	r2, r6
 8004830:	f7fb fc9a 	bl	8000168 <__aeabi_dsub>
 8004834:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004838:	9f03      	ldr	r7, [sp, #12]
 800483a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800483e:	f7fc f8fb 	bl	8000a38 <__aeabi_d2iz>
 8004842:	4604      	mov	r4, r0
 8004844:	f7fb fdde 	bl	8000404 <__aeabi_i2d>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004850:	f7fb fc8a 	bl	8000168 <__aeabi_dsub>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	3430      	adds	r4, #48	; 0x30
 800485a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800485e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004862:	f807 4b01 	strb.w	r4, [r7], #1
 8004866:	f7fc f8a9 	bl	80009bc <__aeabi_dcmplt>
 800486a:	2800      	cmp	r0, #0
 800486c:	d174      	bne.n	8004958 <_dtoa_r+0x648>
 800486e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004872:	2000      	movs	r0, #0
 8004874:	4911      	ldr	r1, [pc, #68]	; (80048bc <_dtoa_r+0x5ac>)
 8004876:	f7fb fc77 	bl	8000168 <__aeabi_dsub>
 800487a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800487e:	f7fc f89d 	bl	80009bc <__aeabi_dcmplt>
 8004882:	2800      	cmp	r0, #0
 8004884:	f040 80b7 	bne.w	80049f6 <_dtoa_r+0x6e6>
 8004888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800488a:	429f      	cmp	r7, r3
 800488c:	f43f af7a 	beq.w	8004784 <_dtoa_r+0x474>
 8004890:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004894:	2200      	movs	r2, #0
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <_dtoa_r+0x5b0>)
 8004898:	f7fb fe1e 	bl	80004d8 <__aeabi_dmul>
 800489c:	2200      	movs	r2, #0
 800489e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <_dtoa_r+0x5b0>)
 80048a8:	f7fb fe16 	bl	80004d8 <__aeabi_dmul>
 80048ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048b0:	e7c3      	b.n	800483a <_dtoa_r+0x52a>
 80048b2:	bf00      	nop
 80048b4:	08006850 	.word	0x08006850
 80048b8:	08006828 	.word	0x08006828
 80048bc:	3ff00000 	.word	0x3ff00000
 80048c0:	40240000 	.word	0x40240000
 80048c4:	401c0000 	.word	0x401c0000
 80048c8:	40140000 	.word	0x40140000
 80048cc:	3fe00000 	.word	0x3fe00000
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	f7fb fe00 	bl	80004d8 <__aeabi_dmul>
 80048d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048de:	9c03      	ldr	r4, [sp, #12]
 80048e0:	9314      	str	r3, [sp, #80]	; 0x50
 80048e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048e6:	f7fc f8a7 	bl	8000a38 <__aeabi_d2iz>
 80048ea:	9015      	str	r0, [sp, #84]	; 0x54
 80048ec:	f7fb fd8a 	bl	8000404 <__aeabi_i2d>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048f8:	f7fb fc36 	bl	8000168 <__aeabi_dsub>
 80048fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048fe:	4606      	mov	r6, r0
 8004900:	3330      	adds	r3, #48	; 0x30
 8004902:	f804 3b01 	strb.w	r3, [r4], #1
 8004906:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004908:	460f      	mov	r7, r1
 800490a:	429c      	cmp	r4, r3
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	d124      	bne.n	800495c <_dtoa_r+0x64c>
 8004912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004916:	4bb0      	ldr	r3, [pc, #704]	; (8004bd8 <_dtoa_r+0x8c8>)
 8004918:	f7fb fc28 	bl	800016c <__adddf3>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4630      	mov	r0, r6
 8004922:	4639      	mov	r1, r7
 8004924:	f7fc f868 	bl	80009f8 <__aeabi_dcmpgt>
 8004928:	2800      	cmp	r0, #0
 800492a:	d163      	bne.n	80049f4 <_dtoa_r+0x6e4>
 800492c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004930:	2000      	movs	r0, #0
 8004932:	49a9      	ldr	r1, [pc, #676]	; (8004bd8 <_dtoa_r+0x8c8>)
 8004934:	f7fb fc18 	bl	8000168 <__aeabi_dsub>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	f7fc f83c 	bl	80009bc <__aeabi_dcmplt>
 8004944:	2800      	cmp	r0, #0
 8004946:	f43f af1d 	beq.w	8004784 <_dtoa_r+0x474>
 800494a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800494c:	1e7b      	subs	r3, r7, #1
 800494e:	9314      	str	r3, [sp, #80]	; 0x50
 8004950:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d0f8      	beq.n	800494a <_dtoa_r+0x63a>
 8004958:	46c2      	mov	sl, r8
 800495a:	e03b      	b.n	80049d4 <_dtoa_r+0x6c4>
 800495c:	4b9f      	ldr	r3, [pc, #636]	; (8004bdc <_dtoa_r+0x8cc>)
 800495e:	f7fb fdbb 	bl	80004d8 <__aeabi_dmul>
 8004962:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004966:	e7bc      	b.n	80048e2 <_dtoa_r+0x5d2>
 8004968:	9f03      	ldr	r7, [sp, #12]
 800496a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800496e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f7fb fed9 	bl	800072c <__aeabi_ddiv>
 800497a:	f7fc f85d 	bl	8000a38 <__aeabi_d2iz>
 800497e:	4604      	mov	r4, r0
 8004980:	f7fb fd40 	bl	8000404 <__aeabi_i2d>
 8004984:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004988:	f7fb fda6 	bl	80004d8 <__aeabi_dmul>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4640      	mov	r0, r8
 8004992:	4649      	mov	r1, r9
 8004994:	f7fb fbe8 	bl	8000168 <__aeabi_dsub>
 8004998:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800499c:	f807 6b01 	strb.w	r6, [r7], #1
 80049a0:	9e03      	ldr	r6, [sp, #12]
 80049a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80049a6:	1bbe      	subs	r6, r7, r6
 80049a8:	45b4      	cmp	ip, r6
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	d136      	bne.n	8004a1e <_dtoa_r+0x70e>
 80049b0:	f7fb fbdc 	bl	800016c <__adddf3>
 80049b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049b8:	4680      	mov	r8, r0
 80049ba:	4689      	mov	r9, r1
 80049bc:	f7fc f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80049c0:	bb58      	cbnz	r0, 8004a1a <_dtoa_r+0x70a>
 80049c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049c6:	4640      	mov	r0, r8
 80049c8:	4649      	mov	r1, r9
 80049ca:	f7fb ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80049ce:	b108      	cbz	r0, 80049d4 <_dtoa_r+0x6c4>
 80049d0:	07e1      	lsls	r1, r4, #31
 80049d2:	d422      	bmi.n	8004a1a <_dtoa_r+0x70a>
 80049d4:	4628      	mov	r0, r5
 80049d6:	4659      	mov	r1, fp
 80049d8:	f000 faf0 	bl	8004fbc <_Bfree>
 80049dc:	2300      	movs	r3, #0
 80049de:	703b      	strb	r3, [r7, #0]
 80049e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80049e2:	f10a 0001 	add.w	r0, sl, #1
 80049e6:	6018      	str	r0, [r3, #0]
 80049e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f43f acde 	beq.w	80043ac <_dtoa_r+0x9c>
 80049f0:	601f      	str	r7, [r3, #0]
 80049f2:	e4db      	b.n	80043ac <_dtoa_r+0x9c>
 80049f4:	4627      	mov	r7, r4
 80049f6:	463b      	mov	r3, r7
 80049f8:	461f      	mov	r7, r3
 80049fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049fe:	2a39      	cmp	r2, #57	; 0x39
 8004a00:	d107      	bne.n	8004a12 <_dtoa_r+0x702>
 8004a02:	9a03      	ldr	r2, [sp, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d1f7      	bne.n	80049f8 <_dtoa_r+0x6e8>
 8004a08:	2230      	movs	r2, #48	; 0x30
 8004a0a:	9903      	ldr	r1, [sp, #12]
 8004a0c:	f108 0801 	add.w	r8, r8, #1
 8004a10:	700a      	strb	r2, [r1, #0]
 8004a12:	781a      	ldrb	r2, [r3, #0]
 8004a14:	3201      	adds	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	e79e      	b.n	8004958 <_dtoa_r+0x648>
 8004a1a:	46d0      	mov	r8, sl
 8004a1c:	e7eb      	b.n	80049f6 <_dtoa_r+0x6e6>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4b6e      	ldr	r3, [pc, #440]	; (8004bdc <_dtoa_r+0x8cc>)
 8004a22:	f7fb fd59 	bl	80004d8 <__aeabi_dmul>
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4680      	mov	r8, r0
 8004a2c:	4689      	mov	r9, r1
 8004a2e:	f7fb ffbb 	bl	80009a8 <__aeabi_dcmpeq>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d09b      	beq.n	800496e <_dtoa_r+0x65e>
 8004a36:	e7cd      	b.n	80049d4 <_dtoa_r+0x6c4>
 8004a38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	f000 80d0 	beq.w	8004be0 <_dtoa_r+0x8d0>
 8004a40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a42:	2a01      	cmp	r2, #1
 8004a44:	f300 80ae 	bgt.w	8004ba4 <_dtoa_r+0x894>
 8004a48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	f000 80a6 	beq.w	8004b9c <_dtoa_r+0x88c>
 8004a50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a56:	9f06      	ldr	r7, [sp, #24]
 8004a58:	9a06      	ldr	r2, [sp, #24]
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	441a      	add	r2, r3
 8004a5e:	9206      	str	r2, [sp, #24]
 8004a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a62:	4628      	mov	r0, r5
 8004a64:	441a      	add	r2, r3
 8004a66:	9209      	str	r2, [sp, #36]	; 0x24
 8004a68:	f000 fb5e 	bl	8005128 <__i2b>
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	2f00      	cmp	r7, #0
 8004a70:	dd0c      	ble.n	8004a8c <_dtoa_r+0x77c>
 8004a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dd09      	ble.n	8004a8c <_dtoa_r+0x77c>
 8004a78:	42bb      	cmp	r3, r7
 8004a7a:	bfa8      	it	ge
 8004a7c:	463b      	movge	r3, r7
 8004a7e:	9a06      	ldr	r2, [sp, #24]
 8004a80:	1aff      	subs	r7, r7, r3
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	9206      	str	r2, [sp, #24]
 8004a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a8e:	b1f3      	cbz	r3, 8004ace <_dtoa_r+0x7be>
 8004a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80a8 	beq.w	8004be8 <_dtoa_r+0x8d8>
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	dd10      	ble.n	8004abe <_dtoa_r+0x7ae>
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fbff 	bl	80052a4 <__pow5mult>
 8004aa6:	465a      	mov	r2, fp
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	4606      	mov	r6, r0
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 fb51 	bl	8005154 <__multiply>
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fa80 	bl	8004fbc <_Bfree>
 8004abc:	46c3      	mov	fp, r8
 8004abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac0:	1b1a      	subs	r2, r3, r4
 8004ac2:	d004      	beq.n	8004ace <_dtoa_r+0x7be>
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 fbec 	bl	80052a4 <__pow5mult>
 8004acc:	4683      	mov	fp, r0
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 fb29 	bl	8005128 <__i2b>
 8004ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad8:	4604      	mov	r4, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f340 8086 	ble.w	8004bec <_dtoa_r+0x8dc>
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f000 fbdd 	bl	80052a4 <__pow5mult>
 8004aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004aec:	4604      	mov	r4, r0
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	dd7f      	ble.n	8004bf2 <_dtoa_r+0x8e2>
 8004af2:	f04f 0800 	mov.w	r8, #0
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004afc:	6918      	ldr	r0, [r3, #16]
 8004afe:	f000 fac5 	bl	800508c <__hi0bits>
 8004b02:	f1c0 0020 	rsb	r0, r0, #32
 8004b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b08:	4418      	add	r0, r3
 8004b0a:	f010 001f 	ands.w	r0, r0, #31
 8004b0e:	f000 8092 	beq.w	8004c36 <_dtoa_r+0x926>
 8004b12:	f1c0 0320 	rsb	r3, r0, #32
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	f340 808a 	ble.w	8004c30 <_dtoa_r+0x920>
 8004b1c:	f1c0 001c 	rsb	r0, r0, #28
 8004b20:	9b06      	ldr	r3, [sp, #24]
 8004b22:	4407      	add	r7, r0
 8004b24:	4403      	add	r3, r0
 8004b26:	9306      	str	r3, [sp, #24]
 8004b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2a:	4403      	add	r3, r0
 8004b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2e:	9b06      	ldr	r3, [sp, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dd05      	ble.n	8004b40 <_dtoa_r+0x830>
 8004b34:	4659      	mov	r1, fp
 8004b36:	461a      	mov	r2, r3
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 fc0d 	bl	8005358 <__lshift>
 8004b3e:	4683      	mov	fp, r0
 8004b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	dd05      	ble.n	8004b52 <_dtoa_r+0x842>
 8004b46:	4621      	mov	r1, r4
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 fc04 	bl	8005358 <__lshift>
 8004b50:	4604      	mov	r4, r0
 8004b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d070      	beq.n	8004c3a <_dtoa_r+0x92a>
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4658      	mov	r0, fp
 8004b5c:	f000 fc6c 	bl	8005438 <__mcmp>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	da6a      	bge.n	8004c3a <_dtoa_r+0x92a>
 8004b64:	2300      	movs	r3, #0
 8004b66:	4659      	mov	r1, fp
 8004b68:	220a      	movs	r2, #10
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 fa48 	bl	8005000 <__multadd>
 8004b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b72:	4683      	mov	fp, r0
 8004b74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8194 	beq.w	8004ea6 <_dtoa_r+0xb96>
 8004b7e:	4631      	mov	r1, r6
 8004b80:	2300      	movs	r3, #0
 8004b82:	220a      	movs	r2, #10
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 fa3b 	bl	8005000 <__multadd>
 8004b8a:	f1b9 0f00 	cmp.w	r9, #0
 8004b8e:	4606      	mov	r6, r0
 8004b90:	f300 8093 	bgt.w	8004cba <_dtoa_r+0x9aa>
 8004b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	dc57      	bgt.n	8004c4a <_dtoa_r+0x93a>
 8004b9a:	e08e      	b.n	8004cba <_dtoa_r+0x9aa>
 8004b9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ba2:	e757      	b.n	8004a54 <_dtoa_r+0x744>
 8004ba4:	9b08      	ldr	r3, [sp, #32]
 8004ba6:	1e5c      	subs	r4, r3, #1
 8004ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	bfb7      	itett	lt
 8004bae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004bb0:	1b1c      	subge	r4, r3, r4
 8004bb2:	1ae2      	sublt	r2, r4, r3
 8004bb4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004bb6:	bfbe      	ittt	lt
 8004bb8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004bba:	189b      	addlt	r3, r3, r2
 8004bbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004bbe:	9b08      	ldr	r3, [sp, #32]
 8004bc0:	bfb8      	it	lt
 8004bc2:	2400      	movlt	r4, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bfbb      	ittet	lt
 8004bc8:	9b06      	ldrlt	r3, [sp, #24]
 8004bca:	9a08      	ldrlt	r2, [sp, #32]
 8004bcc:	9f06      	ldrge	r7, [sp, #24]
 8004bce:	1a9f      	sublt	r7, r3, r2
 8004bd0:	bfac      	ite	ge
 8004bd2:	9b08      	ldrge	r3, [sp, #32]
 8004bd4:	2300      	movlt	r3, #0
 8004bd6:	e73f      	b.n	8004a58 <_dtoa_r+0x748>
 8004bd8:	3fe00000 	.word	0x3fe00000
 8004bdc:	40240000 	.word	0x40240000
 8004be0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004be2:	9f06      	ldr	r7, [sp, #24]
 8004be4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004be6:	e742      	b.n	8004a6e <_dtoa_r+0x75e>
 8004be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bea:	e76b      	b.n	8004ac4 <_dtoa_r+0x7b4>
 8004bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	dc19      	bgt.n	8004c26 <_dtoa_r+0x916>
 8004bf2:	9b04      	ldr	r3, [sp, #16]
 8004bf4:	b9bb      	cbnz	r3, 8004c26 <_dtoa_r+0x916>
 8004bf6:	9b05      	ldr	r3, [sp, #20]
 8004bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bfc:	b99b      	cbnz	r3, 8004c26 <_dtoa_r+0x916>
 8004bfe:	9b05      	ldr	r3, [sp, #20]
 8004c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c04:	0d1b      	lsrs	r3, r3, #20
 8004c06:	051b      	lsls	r3, r3, #20
 8004c08:	b183      	cbz	r3, 8004c2c <_dtoa_r+0x91c>
 8004c0a:	f04f 0801 	mov.w	r8, #1
 8004c0e:	9b06      	ldr	r3, [sp, #24]
 8004c10:	3301      	adds	r3, #1
 8004c12:	9306      	str	r3, [sp, #24]
 8004c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c16:	3301      	adds	r3, #1
 8004c18:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af6a 	bne.w	8004af6 <_dtoa_r+0x7e6>
 8004c22:	2001      	movs	r0, #1
 8004c24:	e76f      	b.n	8004b06 <_dtoa_r+0x7f6>
 8004c26:	f04f 0800 	mov.w	r8, #0
 8004c2a:	e7f6      	b.n	8004c1a <_dtoa_r+0x90a>
 8004c2c:	4698      	mov	r8, r3
 8004c2e:	e7f4      	b.n	8004c1a <_dtoa_r+0x90a>
 8004c30:	f43f af7d 	beq.w	8004b2e <_dtoa_r+0x81e>
 8004c34:	4618      	mov	r0, r3
 8004c36:	301c      	adds	r0, #28
 8004c38:	e772      	b.n	8004b20 <_dtoa_r+0x810>
 8004c3a:	9b08      	ldr	r3, [sp, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	dc36      	bgt.n	8004cae <_dtoa_r+0x99e>
 8004c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	dd33      	ble.n	8004cae <_dtoa_r+0x99e>
 8004c46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c4a:	f1b9 0f00 	cmp.w	r9, #0
 8004c4e:	d10d      	bne.n	8004c6c <_dtoa_r+0x95c>
 8004c50:	4621      	mov	r1, r4
 8004c52:	464b      	mov	r3, r9
 8004c54:	2205      	movs	r2, #5
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f9d2 	bl	8005000 <__multadd>
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4658      	mov	r0, fp
 8004c62:	f000 fbe9 	bl	8005438 <__mcmp>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f73f adb8 	bgt.w	80047dc <_dtoa_r+0x4cc>
 8004c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c6e:	9f03      	ldr	r7, [sp, #12]
 8004c70:	ea6f 0a03 	mvn.w	sl, r3
 8004c74:	f04f 0800 	mov.w	r8, #0
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 f99e 	bl	8004fbc <_Bfree>
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	f43f aea7 	beq.w	80049d4 <_dtoa_r+0x6c4>
 8004c86:	f1b8 0f00 	cmp.w	r8, #0
 8004c8a:	d005      	beq.n	8004c98 <_dtoa_r+0x988>
 8004c8c:	45b0      	cmp	r8, r6
 8004c8e:	d003      	beq.n	8004c98 <_dtoa_r+0x988>
 8004c90:	4641      	mov	r1, r8
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f992 	bl	8004fbc <_Bfree>
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f98e 	bl	8004fbc <_Bfree>
 8004ca0:	e698      	b.n	80049d4 <_dtoa_r+0x6c4>
 8004ca2:	2400      	movs	r4, #0
 8004ca4:	4626      	mov	r6, r4
 8004ca6:	e7e1      	b.n	8004c6c <_dtoa_r+0x95c>
 8004ca8:	46c2      	mov	sl, r8
 8004caa:	4626      	mov	r6, r4
 8004cac:	e596      	b.n	80047dc <_dtoa_r+0x4cc>
 8004cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80fd 	beq.w	8004eb4 <_dtoa_r+0xba4>
 8004cba:	2f00      	cmp	r7, #0
 8004cbc:	dd05      	ble.n	8004cca <_dtoa_r+0x9ba>
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	463a      	mov	r2, r7
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 fb48 	bl	8005358 <__lshift>
 8004cc8:	4606      	mov	r6, r0
 8004cca:	f1b8 0f00 	cmp.w	r8, #0
 8004cce:	d05c      	beq.n	8004d8a <_dtoa_r+0xa7a>
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	6871      	ldr	r1, [r6, #4]
 8004cd4:	f000 f932 	bl	8004f3c <_Balloc>
 8004cd8:	4607      	mov	r7, r0
 8004cda:	b928      	cbnz	r0, 8004ce8 <_dtoa_r+0x9d8>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	; (8004ee0 <_dtoa_r+0xbd0>)
 8004ce4:	f7ff bb28 	b.w	8004338 <_dtoa_r+0x28>
 8004ce8:	6932      	ldr	r2, [r6, #16]
 8004cea:	f106 010c 	add.w	r1, r6, #12
 8004cee:	3202      	adds	r2, #2
 8004cf0:	0092      	lsls	r2, r2, #2
 8004cf2:	300c      	adds	r0, #12
 8004cf4:	f000 f914 	bl	8004f20 <memcpy>
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f000 fb2b 	bl	8005358 <__lshift>
 8004d02:	46b0      	mov	r8, r6
 8004d04:	4606      	mov	r6, r0
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	9308      	str	r3, [sp, #32]
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	444b      	add	r3, r9
 8004d10:	930a      	str	r3, [sp, #40]	; 0x28
 8004d12:	9b04      	ldr	r3, [sp, #16]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1a:	9b08      	ldr	r3, [sp, #32]
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	4658      	mov	r0, fp
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	f7ff fa68 	bl	80041f8 <quorem>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	3330      	adds	r3, #48	; 0x30
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	4658      	mov	r0, fp
 8004d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d34:	f000 fb80 	bl	8005438 <__mcmp>
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4681      	mov	r9, r0
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fb96 	bl	8005470 <__mdiff>
 8004d44:	68c2      	ldr	r2, [r0, #12]
 8004d46:	4607      	mov	r7, r0
 8004d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d4a:	bb02      	cbnz	r2, 8004d8e <_dtoa_r+0xa7e>
 8004d4c:	4601      	mov	r1, r0
 8004d4e:	4658      	mov	r0, fp
 8004d50:	f000 fb72 	bl	8005438 <__mcmp>
 8004d54:	4602      	mov	r2, r0
 8004d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d58:	4639      	mov	r1, r7
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004d60:	f000 f92c 	bl	8004fbc <_Bfree>
 8004d64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d68:	9f08      	ldr	r7, [sp, #32]
 8004d6a:	ea43 0102 	orr.w	r1, r3, r2
 8004d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d70:	430b      	orrs	r3, r1
 8004d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d74:	d10d      	bne.n	8004d92 <_dtoa_r+0xa82>
 8004d76:	2b39      	cmp	r3, #57	; 0x39
 8004d78:	d029      	beq.n	8004dce <_dtoa_r+0xabe>
 8004d7a:	f1b9 0f00 	cmp.w	r9, #0
 8004d7e:	dd01      	ble.n	8004d84 <_dtoa_r+0xa74>
 8004d80:	9b06      	ldr	r3, [sp, #24]
 8004d82:	3331      	adds	r3, #49	; 0x31
 8004d84:	9a04      	ldr	r2, [sp, #16]
 8004d86:	7013      	strb	r3, [r2, #0]
 8004d88:	e776      	b.n	8004c78 <_dtoa_r+0x968>
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	e7b9      	b.n	8004d02 <_dtoa_r+0x9f2>
 8004d8e:	2201      	movs	r2, #1
 8004d90:	e7e2      	b.n	8004d58 <_dtoa_r+0xa48>
 8004d92:	f1b9 0f00 	cmp.w	r9, #0
 8004d96:	db06      	blt.n	8004da6 <_dtoa_r+0xa96>
 8004d98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004d9a:	ea41 0909 	orr.w	r9, r1, r9
 8004d9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004da0:	ea59 0101 	orrs.w	r1, r9, r1
 8004da4:	d120      	bne.n	8004de8 <_dtoa_r+0xad8>
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	ddec      	ble.n	8004d84 <_dtoa_r+0xa74>
 8004daa:	4659      	mov	r1, fp
 8004dac:	2201      	movs	r2, #1
 8004dae:	4628      	mov	r0, r5
 8004db0:	9308      	str	r3, [sp, #32]
 8004db2:	f000 fad1 	bl	8005358 <__lshift>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4683      	mov	fp, r0
 8004dba:	f000 fb3d 	bl	8005438 <__mcmp>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	9b08      	ldr	r3, [sp, #32]
 8004dc2:	dc02      	bgt.n	8004dca <_dtoa_r+0xaba>
 8004dc4:	d1de      	bne.n	8004d84 <_dtoa_r+0xa74>
 8004dc6:	07da      	lsls	r2, r3, #31
 8004dc8:	d5dc      	bpl.n	8004d84 <_dtoa_r+0xa74>
 8004dca:	2b39      	cmp	r3, #57	; 0x39
 8004dcc:	d1d8      	bne.n	8004d80 <_dtoa_r+0xa70>
 8004dce:	2339      	movs	r3, #57	; 0x39
 8004dd0:	9a04      	ldr	r2, [sp, #16]
 8004dd2:	7013      	strb	r3, [r2, #0]
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	2a39      	cmp	r2, #57	; 0x39
 8004de0:	d050      	beq.n	8004e84 <_dtoa_r+0xb74>
 8004de2:	3201      	adds	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e747      	b.n	8004c78 <_dtoa_r+0x968>
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	dd03      	ble.n	8004df4 <_dtoa_r+0xae4>
 8004dec:	2b39      	cmp	r3, #57	; 0x39
 8004dee:	d0ee      	beq.n	8004dce <_dtoa_r+0xabe>
 8004df0:	3301      	adds	r3, #1
 8004df2:	e7c7      	b.n	8004d84 <_dtoa_r+0xa74>
 8004df4:	9a08      	ldr	r2, [sp, #32]
 8004df6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004df8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004dfc:	428a      	cmp	r2, r1
 8004dfe:	d02a      	beq.n	8004e56 <_dtoa_r+0xb46>
 8004e00:	4659      	mov	r1, fp
 8004e02:	2300      	movs	r3, #0
 8004e04:	220a      	movs	r2, #10
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 f8fa 	bl	8005000 <__multadd>
 8004e0c:	45b0      	cmp	r8, r6
 8004e0e:	4683      	mov	fp, r0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f04f 020a 	mov.w	r2, #10
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	d107      	bne.n	8004e2e <_dtoa_r+0xb1e>
 8004e1e:	f000 f8ef 	bl	8005000 <__multadd>
 8004e22:	4680      	mov	r8, r0
 8004e24:	4606      	mov	r6, r0
 8004e26:	9b08      	ldr	r3, [sp, #32]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	9308      	str	r3, [sp, #32]
 8004e2c:	e775      	b.n	8004d1a <_dtoa_r+0xa0a>
 8004e2e:	f000 f8e7 	bl	8005000 <__multadd>
 8004e32:	4631      	mov	r1, r6
 8004e34:	4680      	mov	r8, r0
 8004e36:	2300      	movs	r3, #0
 8004e38:	220a      	movs	r2, #10
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 f8e0 	bl	8005000 <__multadd>
 8004e40:	4606      	mov	r6, r0
 8004e42:	e7f0      	b.n	8004e26 <_dtoa_r+0xb16>
 8004e44:	f1b9 0f00 	cmp.w	r9, #0
 8004e48:	bfcc      	ite	gt
 8004e4a:	464f      	movgt	r7, r9
 8004e4c:	2701      	movle	r7, #1
 8004e4e:	f04f 0800 	mov.w	r8, #0
 8004e52:	9a03      	ldr	r2, [sp, #12]
 8004e54:	4417      	add	r7, r2
 8004e56:	4659      	mov	r1, fp
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	9308      	str	r3, [sp, #32]
 8004e5e:	f000 fa7b 	bl	8005358 <__lshift>
 8004e62:	4621      	mov	r1, r4
 8004e64:	4683      	mov	fp, r0
 8004e66:	f000 fae7 	bl	8005438 <__mcmp>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	dcb2      	bgt.n	8004dd4 <_dtoa_r+0xac4>
 8004e6e:	d102      	bne.n	8004e76 <_dtoa_r+0xb66>
 8004e70:	9b08      	ldr	r3, [sp, #32]
 8004e72:	07db      	lsls	r3, r3, #31
 8004e74:	d4ae      	bmi.n	8004dd4 <_dtoa_r+0xac4>
 8004e76:	463b      	mov	r3, r7
 8004e78:	461f      	mov	r7, r3
 8004e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e7e:	2a30      	cmp	r2, #48	; 0x30
 8004e80:	d0fa      	beq.n	8004e78 <_dtoa_r+0xb68>
 8004e82:	e6f9      	b.n	8004c78 <_dtoa_r+0x968>
 8004e84:	9a03      	ldr	r2, [sp, #12]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d1a5      	bne.n	8004dd6 <_dtoa_r+0xac6>
 8004e8a:	2331      	movs	r3, #49	; 0x31
 8004e8c:	f10a 0a01 	add.w	sl, sl, #1
 8004e90:	e779      	b.n	8004d86 <_dtoa_r+0xa76>
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <_dtoa_r+0xbd4>)
 8004e94:	f7ff baa8 	b.w	80043e8 <_dtoa_r+0xd8>
 8004e98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f47f aa81 	bne.w	80043a2 <_dtoa_r+0x92>
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <_dtoa_r+0xbd8>)
 8004ea2:	f7ff baa1 	b.w	80043e8 <_dtoa_r+0xd8>
 8004ea6:	f1b9 0f00 	cmp.w	r9, #0
 8004eaa:	dc03      	bgt.n	8004eb4 <_dtoa_r+0xba4>
 8004eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	f73f aecb 	bgt.w	8004c4a <_dtoa_r+0x93a>
 8004eb4:	9f03      	ldr	r7, [sp, #12]
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4658      	mov	r0, fp
 8004eba:	f7ff f99d 	bl	80041f8 <quorem>
 8004ebe:	9a03      	ldr	r2, [sp, #12]
 8004ec0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004ec4:	f807 3b01 	strb.w	r3, [r7], #1
 8004ec8:	1aba      	subs	r2, r7, r2
 8004eca:	4591      	cmp	r9, r2
 8004ecc:	ddba      	ble.n	8004e44 <_dtoa_r+0xb34>
 8004ece:	4659      	mov	r1, fp
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 f893 	bl	8005000 <__multadd>
 8004eda:	4683      	mov	fp, r0
 8004edc:	e7eb      	b.n	8004eb6 <_dtoa_r+0xba6>
 8004ede:	bf00      	nop
 8004ee0:	080067b7 	.word	0x080067b7
 8004ee4:	08006714 	.word	0x08006714
 8004ee8:	08006738 	.word	0x08006738

08004eec <_localeconv_r>:
 8004eec:	4800      	ldr	r0, [pc, #0]	; (8004ef0 <_localeconv_r+0x4>)
 8004eee:	4770      	bx	lr
 8004ef0:	20000170 	.word	0x20000170

08004ef4 <malloc>:
 8004ef4:	4b02      	ldr	r3, [pc, #8]	; (8004f00 <malloc+0xc>)
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	f000 bc1d 	b.w	8005738 <_malloc_r>
 8004efe:	bf00      	nop
 8004f00:	2000001c 	.word	0x2000001c

08004f04 <memchr>:
 8004f04:	4603      	mov	r3, r0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	b2c9      	uxtb	r1, r1
 8004f0a:	4402      	add	r2, r0
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	d101      	bne.n	8004f16 <memchr+0x12>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e003      	b.n	8004f1e <memchr+0x1a>
 8004f16:	7804      	ldrb	r4, [r0, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	428c      	cmp	r4, r1
 8004f1c:	d1f6      	bne.n	8004f0c <memchr+0x8>
 8004f1e:	bd10      	pop	{r4, pc}

08004f20 <memcpy>:
 8004f20:	440a      	add	r2, r1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	4770      	bx	lr
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f32:	4291      	cmp	r1, r2
 8004f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f38:	d1f9      	bne.n	8004f2e <memcpy+0xe>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <_Balloc>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f40:	4604      	mov	r4, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	b976      	cbnz	r6, 8004f64 <_Balloc+0x28>
 8004f46:	2010      	movs	r0, #16
 8004f48:	f7ff ffd4 	bl	8004ef4 <malloc>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6260      	str	r0, [r4, #36]	; 0x24
 8004f50:	b920      	cbnz	r0, 8004f5c <_Balloc+0x20>
 8004f52:	2166      	movs	r1, #102	; 0x66
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <_Balloc+0x78>)
 8004f56:	4818      	ldr	r0, [pc, #96]	; (8004fb8 <_Balloc+0x7c>)
 8004f58:	f000 fdce 	bl	8005af8 <__assert_func>
 8004f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f60:	6006      	str	r6, [r0, #0]
 8004f62:	60c6      	str	r6, [r0, #12]
 8004f64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f66:	68f3      	ldr	r3, [r6, #12]
 8004f68:	b183      	cbz	r3, 8004f8c <_Balloc+0x50>
 8004f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f72:	b9b8      	cbnz	r0, 8004fa4 <_Balloc+0x68>
 8004f74:	2101      	movs	r1, #1
 8004f76:	fa01 f605 	lsl.w	r6, r1, r5
 8004f7a:	1d72      	adds	r2, r6, #5
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	f000 fb5e 	bl	8005640 <_calloc_r>
 8004f84:	b160      	cbz	r0, 8004fa0 <_Balloc+0x64>
 8004f86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f8a:	e00e      	b.n	8004faa <_Balloc+0x6e>
 8004f8c:	2221      	movs	r2, #33	; 0x21
 8004f8e:	2104      	movs	r1, #4
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 fb55 	bl	8005640 <_calloc_r>
 8004f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f98:	60f0      	str	r0, [r6, #12]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e4      	bne.n	8004f6a <_Balloc+0x2e>
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	6802      	ldr	r2, [r0, #0]
 8004fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004faa:	2300      	movs	r3, #0
 8004fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fb0:	e7f7      	b.n	8004fa2 <_Balloc+0x66>
 8004fb2:	bf00      	nop
 8004fb4:	08006745 	.word	0x08006745
 8004fb8:	080067c8 	.word	0x080067c8

08004fbc <_Bfree>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	b976      	cbnz	r6, 8004fe4 <_Bfree+0x28>
 8004fc6:	2010      	movs	r0, #16
 8004fc8:	f7ff ff94 	bl	8004ef4 <malloc>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6268      	str	r0, [r5, #36]	; 0x24
 8004fd0:	b920      	cbnz	r0, 8004fdc <_Bfree+0x20>
 8004fd2:	218a      	movs	r1, #138	; 0x8a
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <_Bfree+0x3c>)
 8004fd6:	4809      	ldr	r0, [pc, #36]	; (8004ffc <_Bfree+0x40>)
 8004fd8:	f000 fd8e 	bl	8005af8 <__assert_func>
 8004fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fe0:	6006      	str	r6, [r0, #0]
 8004fe2:	60c6      	str	r6, [r0, #12]
 8004fe4:	b13c      	cbz	r4, 8004ff6 <_Bfree+0x3a>
 8004fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fe8:	6862      	ldr	r2, [r4, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ff0:	6021      	str	r1, [r4, #0]
 8004ff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	08006745 	.word	0x08006745
 8004ffc:	080067c8 	.word	0x080067c8

08005000 <__multadd>:
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	4607      	mov	r7, r0
 8005006:	460c      	mov	r4, r1
 8005008:	461e      	mov	r6, r3
 800500a:	2000      	movs	r0, #0
 800500c:	690d      	ldr	r5, [r1, #16]
 800500e:	f101 0c14 	add.w	ip, r1, #20
 8005012:	f8dc 3000 	ldr.w	r3, [ip]
 8005016:	3001      	adds	r0, #1
 8005018:	b299      	uxth	r1, r3
 800501a:	fb02 6101 	mla	r1, r2, r1, r6
 800501e:	0c1e      	lsrs	r6, r3, #16
 8005020:	0c0b      	lsrs	r3, r1, #16
 8005022:	fb02 3306 	mla	r3, r2, r6, r3
 8005026:	b289      	uxth	r1, r1
 8005028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800502c:	4285      	cmp	r5, r0
 800502e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005032:	f84c 1b04 	str.w	r1, [ip], #4
 8005036:	dcec      	bgt.n	8005012 <__multadd+0x12>
 8005038:	b30e      	cbz	r6, 800507e <__multadd+0x7e>
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	42ab      	cmp	r3, r5
 800503e:	dc19      	bgt.n	8005074 <__multadd+0x74>
 8005040:	6861      	ldr	r1, [r4, #4]
 8005042:	4638      	mov	r0, r7
 8005044:	3101      	adds	r1, #1
 8005046:	f7ff ff79 	bl	8004f3c <_Balloc>
 800504a:	4680      	mov	r8, r0
 800504c:	b928      	cbnz	r0, 800505a <__multadd+0x5a>
 800504e:	4602      	mov	r2, r0
 8005050:	21b5      	movs	r1, #181	; 0xb5
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <__multadd+0x84>)
 8005054:	480c      	ldr	r0, [pc, #48]	; (8005088 <__multadd+0x88>)
 8005056:	f000 fd4f 	bl	8005af8 <__assert_func>
 800505a:	6922      	ldr	r2, [r4, #16]
 800505c:	f104 010c 	add.w	r1, r4, #12
 8005060:	3202      	adds	r2, #2
 8005062:	0092      	lsls	r2, r2, #2
 8005064:	300c      	adds	r0, #12
 8005066:	f7ff ff5b 	bl	8004f20 <memcpy>
 800506a:	4621      	mov	r1, r4
 800506c:	4638      	mov	r0, r7
 800506e:	f7ff ffa5 	bl	8004fbc <_Bfree>
 8005072:	4644      	mov	r4, r8
 8005074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005078:	3501      	adds	r5, #1
 800507a:	615e      	str	r6, [r3, #20]
 800507c:	6125      	str	r5, [r4, #16]
 800507e:	4620      	mov	r0, r4
 8005080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005084:	080067b7 	.word	0x080067b7
 8005088:	080067c8 	.word	0x080067c8

0800508c <__hi0bits>:
 800508c:	0c02      	lsrs	r2, r0, #16
 800508e:	0412      	lsls	r2, r2, #16
 8005090:	4603      	mov	r3, r0
 8005092:	b9ca      	cbnz	r2, 80050c8 <__hi0bits+0x3c>
 8005094:	0403      	lsls	r3, r0, #16
 8005096:	2010      	movs	r0, #16
 8005098:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800509c:	bf04      	itt	eq
 800509e:	021b      	lsleq	r3, r3, #8
 80050a0:	3008      	addeq	r0, #8
 80050a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80050a6:	bf04      	itt	eq
 80050a8:	011b      	lsleq	r3, r3, #4
 80050aa:	3004      	addeq	r0, #4
 80050ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80050b0:	bf04      	itt	eq
 80050b2:	009b      	lsleq	r3, r3, #2
 80050b4:	3002      	addeq	r0, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	db05      	blt.n	80050c6 <__hi0bits+0x3a>
 80050ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80050be:	f100 0001 	add.w	r0, r0, #1
 80050c2:	bf08      	it	eq
 80050c4:	2020      	moveq	r0, #32
 80050c6:	4770      	bx	lr
 80050c8:	2000      	movs	r0, #0
 80050ca:	e7e5      	b.n	8005098 <__hi0bits+0xc>

080050cc <__lo0bits>:
 80050cc:	6803      	ldr	r3, [r0, #0]
 80050ce:	4602      	mov	r2, r0
 80050d0:	f013 0007 	ands.w	r0, r3, #7
 80050d4:	d00b      	beq.n	80050ee <__lo0bits+0x22>
 80050d6:	07d9      	lsls	r1, r3, #31
 80050d8:	d421      	bmi.n	800511e <__lo0bits+0x52>
 80050da:	0798      	lsls	r0, r3, #30
 80050dc:	bf49      	itett	mi
 80050de:	085b      	lsrmi	r3, r3, #1
 80050e0:	089b      	lsrpl	r3, r3, #2
 80050e2:	2001      	movmi	r0, #1
 80050e4:	6013      	strmi	r3, [r2, #0]
 80050e6:	bf5c      	itt	pl
 80050e8:	2002      	movpl	r0, #2
 80050ea:	6013      	strpl	r3, [r2, #0]
 80050ec:	4770      	bx	lr
 80050ee:	b299      	uxth	r1, r3
 80050f0:	b909      	cbnz	r1, 80050f6 <__lo0bits+0x2a>
 80050f2:	2010      	movs	r0, #16
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	b2d9      	uxtb	r1, r3
 80050f8:	b909      	cbnz	r1, 80050fe <__lo0bits+0x32>
 80050fa:	3008      	adds	r0, #8
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	0719      	lsls	r1, r3, #28
 8005100:	bf04      	itt	eq
 8005102:	091b      	lsreq	r3, r3, #4
 8005104:	3004      	addeq	r0, #4
 8005106:	0799      	lsls	r1, r3, #30
 8005108:	bf04      	itt	eq
 800510a:	089b      	lsreq	r3, r3, #2
 800510c:	3002      	addeq	r0, #2
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d403      	bmi.n	800511a <__lo0bits+0x4e>
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	f100 0001 	add.w	r0, r0, #1
 8005118:	d003      	beq.n	8005122 <__lo0bits+0x56>
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4770      	bx	lr
 800511e:	2000      	movs	r0, #0
 8005120:	4770      	bx	lr
 8005122:	2020      	movs	r0, #32
 8005124:	4770      	bx	lr
	...

08005128 <__i2b>:
 8005128:	b510      	push	{r4, lr}
 800512a:	460c      	mov	r4, r1
 800512c:	2101      	movs	r1, #1
 800512e:	f7ff ff05 	bl	8004f3c <_Balloc>
 8005132:	4602      	mov	r2, r0
 8005134:	b928      	cbnz	r0, 8005142 <__i2b+0x1a>
 8005136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <__i2b+0x24>)
 800513c:	4804      	ldr	r0, [pc, #16]	; (8005150 <__i2b+0x28>)
 800513e:	f000 fcdb 	bl	8005af8 <__assert_func>
 8005142:	2301      	movs	r3, #1
 8005144:	6144      	str	r4, [r0, #20]
 8005146:	6103      	str	r3, [r0, #16]
 8005148:	bd10      	pop	{r4, pc}
 800514a:	bf00      	nop
 800514c:	080067b7 	.word	0x080067b7
 8005150:	080067c8 	.word	0x080067c8

08005154 <__multiply>:
 8005154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	4691      	mov	r9, r2
 800515a:	690a      	ldr	r2, [r1, #16]
 800515c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005160:	460c      	mov	r4, r1
 8005162:	429a      	cmp	r2, r3
 8005164:	bfbe      	ittt	lt
 8005166:	460b      	movlt	r3, r1
 8005168:	464c      	movlt	r4, r9
 800516a:	4699      	movlt	r9, r3
 800516c:	6927      	ldr	r7, [r4, #16]
 800516e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	6861      	ldr	r1, [r4, #4]
 8005176:	eb07 060a 	add.w	r6, r7, sl
 800517a:	42b3      	cmp	r3, r6
 800517c:	b085      	sub	sp, #20
 800517e:	bfb8      	it	lt
 8005180:	3101      	addlt	r1, #1
 8005182:	f7ff fedb 	bl	8004f3c <_Balloc>
 8005186:	b930      	cbnz	r0, 8005196 <__multiply+0x42>
 8005188:	4602      	mov	r2, r0
 800518a:	f240 115d 	movw	r1, #349	; 0x15d
 800518e:	4b43      	ldr	r3, [pc, #268]	; (800529c <__multiply+0x148>)
 8005190:	4843      	ldr	r0, [pc, #268]	; (80052a0 <__multiply+0x14c>)
 8005192:	f000 fcb1 	bl	8005af8 <__assert_func>
 8005196:	f100 0514 	add.w	r5, r0, #20
 800519a:	462b      	mov	r3, r5
 800519c:	2200      	movs	r2, #0
 800519e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051a2:	4543      	cmp	r3, r8
 80051a4:	d321      	bcc.n	80051ea <__multiply+0x96>
 80051a6:	f104 0314 	add.w	r3, r4, #20
 80051aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80051ae:	f109 0314 	add.w	r3, r9, #20
 80051b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80051b6:	9202      	str	r2, [sp, #8]
 80051b8:	1b3a      	subs	r2, r7, r4
 80051ba:	3a15      	subs	r2, #21
 80051bc:	f022 0203 	bic.w	r2, r2, #3
 80051c0:	3204      	adds	r2, #4
 80051c2:	f104 0115 	add.w	r1, r4, #21
 80051c6:	428f      	cmp	r7, r1
 80051c8:	bf38      	it	cc
 80051ca:	2204      	movcc	r2, #4
 80051cc:	9201      	str	r2, [sp, #4]
 80051ce:	9a02      	ldr	r2, [sp, #8]
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d80c      	bhi.n	80051f0 <__multiply+0x9c>
 80051d6:	2e00      	cmp	r6, #0
 80051d8:	dd03      	ble.n	80051e2 <__multiply+0x8e>
 80051da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d059      	beq.n	8005296 <__multiply+0x142>
 80051e2:	6106      	str	r6, [r0, #16]
 80051e4:	b005      	add	sp, #20
 80051e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ea:	f843 2b04 	str.w	r2, [r3], #4
 80051ee:	e7d8      	b.n	80051a2 <__multiply+0x4e>
 80051f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80051f4:	f1ba 0f00 	cmp.w	sl, #0
 80051f8:	d023      	beq.n	8005242 <__multiply+0xee>
 80051fa:	46a9      	mov	r9, r5
 80051fc:	f04f 0c00 	mov.w	ip, #0
 8005200:	f104 0e14 	add.w	lr, r4, #20
 8005204:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005208:	f8d9 1000 	ldr.w	r1, [r9]
 800520c:	fa1f fb82 	uxth.w	fp, r2
 8005210:	b289      	uxth	r1, r1
 8005212:	fb0a 110b 	mla	r1, sl, fp, r1
 8005216:	4461      	add	r1, ip
 8005218:	f8d9 c000 	ldr.w	ip, [r9]
 800521c:	0c12      	lsrs	r2, r2, #16
 800521e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005222:	fb0a c202 	mla	r2, sl, r2, ip
 8005226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800522a:	b289      	uxth	r1, r1
 800522c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005230:	4577      	cmp	r7, lr
 8005232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005236:	f849 1b04 	str.w	r1, [r9], #4
 800523a:	d8e3      	bhi.n	8005204 <__multiply+0xb0>
 800523c:	9a01      	ldr	r2, [sp, #4]
 800523e:	f845 c002 	str.w	ip, [r5, r2]
 8005242:	9a03      	ldr	r2, [sp, #12]
 8005244:	3304      	adds	r3, #4
 8005246:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800524a:	f1b9 0f00 	cmp.w	r9, #0
 800524e:	d020      	beq.n	8005292 <__multiply+0x13e>
 8005250:	46ae      	mov	lr, r5
 8005252:	f04f 0a00 	mov.w	sl, #0
 8005256:	6829      	ldr	r1, [r5, #0]
 8005258:	f104 0c14 	add.w	ip, r4, #20
 800525c:	f8bc b000 	ldrh.w	fp, [ip]
 8005260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005264:	b289      	uxth	r1, r1
 8005266:	fb09 220b 	mla	r2, r9, fp, r2
 800526a:	4492      	add	sl, r2
 800526c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005270:	f84e 1b04 	str.w	r1, [lr], #4
 8005274:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005278:	f8be 1000 	ldrh.w	r1, [lr]
 800527c:	0c12      	lsrs	r2, r2, #16
 800527e:	fb09 1102 	mla	r1, r9, r2, r1
 8005282:	4567      	cmp	r7, ip
 8005284:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005288:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800528c:	d8e6      	bhi.n	800525c <__multiply+0x108>
 800528e:	9a01      	ldr	r2, [sp, #4]
 8005290:	50a9      	str	r1, [r5, r2]
 8005292:	3504      	adds	r5, #4
 8005294:	e79b      	b.n	80051ce <__multiply+0x7a>
 8005296:	3e01      	subs	r6, #1
 8005298:	e79d      	b.n	80051d6 <__multiply+0x82>
 800529a:	bf00      	nop
 800529c:	080067b7 	.word	0x080067b7
 80052a0:	080067c8 	.word	0x080067c8

080052a4 <__pow5mult>:
 80052a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a8:	4615      	mov	r5, r2
 80052aa:	f012 0203 	ands.w	r2, r2, #3
 80052ae:	4606      	mov	r6, r0
 80052b0:	460f      	mov	r7, r1
 80052b2:	d007      	beq.n	80052c4 <__pow5mult+0x20>
 80052b4:	4c25      	ldr	r4, [pc, #148]	; (800534c <__pow5mult+0xa8>)
 80052b6:	3a01      	subs	r2, #1
 80052b8:	2300      	movs	r3, #0
 80052ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052be:	f7ff fe9f 	bl	8005000 <__multadd>
 80052c2:	4607      	mov	r7, r0
 80052c4:	10ad      	asrs	r5, r5, #2
 80052c6:	d03d      	beq.n	8005344 <__pow5mult+0xa0>
 80052c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80052ca:	b97c      	cbnz	r4, 80052ec <__pow5mult+0x48>
 80052cc:	2010      	movs	r0, #16
 80052ce:	f7ff fe11 	bl	8004ef4 <malloc>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6270      	str	r0, [r6, #36]	; 0x24
 80052d6:	b928      	cbnz	r0, 80052e4 <__pow5mult+0x40>
 80052d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80052dc:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <__pow5mult+0xac>)
 80052de:	481d      	ldr	r0, [pc, #116]	; (8005354 <__pow5mult+0xb0>)
 80052e0:	f000 fc0a 	bl	8005af8 <__assert_func>
 80052e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052e8:	6004      	str	r4, [r0, #0]
 80052ea:	60c4      	str	r4, [r0, #12]
 80052ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80052f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052f4:	b94c      	cbnz	r4, 800530a <__pow5mult+0x66>
 80052f6:	f240 2171 	movw	r1, #625	; 0x271
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7ff ff14 	bl	8005128 <__i2b>
 8005300:	2300      	movs	r3, #0
 8005302:	4604      	mov	r4, r0
 8005304:	f8c8 0008 	str.w	r0, [r8, #8]
 8005308:	6003      	str	r3, [r0, #0]
 800530a:	f04f 0900 	mov.w	r9, #0
 800530e:	07eb      	lsls	r3, r5, #31
 8005310:	d50a      	bpl.n	8005328 <__pow5mult+0x84>
 8005312:	4639      	mov	r1, r7
 8005314:	4622      	mov	r2, r4
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff ff1c 	bl	8005154 <__multiply>
 800531c:	4680      	mov	r8, r0
 800531e:	4639      	mov	r1, r7
 8005320:	4630      	mov	r0, r6
 8005322:	f7ff fe4b 	bl	8004fbc <_Bfree>
 8005326:	4647      	mov	r7, r8
 8005328:	106d      	asrs	r5, r5, #1
 800532a:	d00b      	beq.n	8005344 <__pow5mult+0xa0>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	b938      	cbnz	r0, 8005340 <__pow5mult+0x9c>
 8005330:	4622      	mov	r2, r4
 8005332:	4621      	mov	r1, r4
 8005334:	4630      	mov	r0, r6
 8005336:	f7ff ff0d 	bl	8005154 <__multiply>
 800533a:	6020      	str	r0, [r4, #0]
 800533c:	f8c0 9000 	str.w	r9, [r0]
 8005340:	4604      	mov	r4, r0
 8005342:	e7e4      	b.n	800530e <__pow5mult+0x6a>
 8005344:	4638      	mov	r0, r7
 8005346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534a:	bf00      	nop
 800534c:	08006918 	.word	0x08006918
 8005350:	08006745 	.word	0x08006745
 8005354:	080067c8 	.word	0x080067c8

08005358 <__lshift>:
 8005358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	460c      	mov	r4, r1
 800535e:	4607      	mov	r7, r0
 8005360:	4691      	mov	r9, r2
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	6849      	ldr	r1, [r1, #4]
 8005366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800536a:	68a3      	ldr	r3, [r4, #8]
 800536c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005370:	f108 0601 	add.w	r6, r8, #1
 8005374:	42b3      	cmp	r3, r6
 8005376:	db0b      	blt.n	8005390 <__lshift+0x38>
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff fddf 	bl	8004f3c <_Balloc>
 800537e:	4605      	mov	r5, r0
 8005380:	b948      	cbnz	r0, 8005396 <__lshift+0x3e>
 8005382:	4602      	mov	r2, r0
 8005384:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005388:	4b29      	ldr	r3, [pc, #164]	; (8005430 <__lshift+0xd8>)
 800538a:	482a      	ldr	r0, [pc, #168]	; (8005434 <__lshift+0xdc>)
 800538c:	f000 fbb4 	bl	8005af8 <__assert_func>
 8005390:	3101      	adds	r1, #1
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	e7ee      	b.n	8005374 <__lshift+0x1c>
 8005396:	2300      	movs	r3, #0
 8005398:	f100 0114 	add.w	r1, r0, #20
 800539c:	f100 0210 	add.w	r2, r0, #16
 80053a0:	4618      	mov	r0, r3
 80053a2:	4553      	cmp	r3, sl
 80053a4:	db37      	blt.n	8005416 <__lshift+0xbe>
 80053a6:	6920      	ldr	r0, [r4, #16]
 80053a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053ac:	f104 0314 	add.w	r3, r4, #20
 80053b0:	f019 091f 	ands.w	r9, r9, #31
 80053b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80053bc:	d02f      	beq.n	800541e <__lshift+0xc6>
 80053be:	468a      	mov	sl, r1
 80053c0:	f04f 0c00 	mov.w	ip, #0
 80053c4:	f1c9 0e20 	rsb	lr, r9, #32
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	fa02 f209 	lsl.w	r2, r2, r9
 80053ce:	ea42 020c 	orr.w	r2, r2, ip
 80053d2:	f84a 2b04 	str.w	r2, [sl], #4
 80053d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053da:	4298      	cmp	r0, r3
 80053dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80053e0:	d8f2      	bhi.n	80053c8 <__lshift+0x70>
 80053e2:	1b03      	subs	r3, r0, r4
 80053e4:	3b15      	subs	r3, #21
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	3304      	adds	r3, #4
 80053ec:	f104 0215 	add.w	r2, r4, #21
 80053f0:	4290      	cmp	r0, r2
 80053f2:	bf38      	it	cc
 80053f4:	2304      	movcc	r3, #4
 80053f6:	f841 c003 	str.w	ip, [r1, r3]
 80053fa:	f1bc 0f00 	cmp.w	ip, #0
 80053fe:	d001      	beq.n	8005404 <__lshift+0xac>
 8005400:	f108 0602 	add.w	r6, r8, #2
 8005404:	3e01      	subs	r6, #1
 8005406:	4638      	mov	r0, r7
 8005408:	4621      	mov	r1, r4
 800540a:	612e      	str	r6, [r5, #16]
 800540c:	f7ff fdd6 	bl	8004fbc <_Bfree>
 8005410:	4628      	mov	r0, r5
 8005412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005416:	f842 0f04 	str.w	r0, [r2, #4]!
 800541a:	3301      	adds	r3, #1
 800541c:	e7c1      	b.n	80053a2 <__lshift+0x4a>
 800541e:	3904      	subs	r1, #4
 8005420:	f853 2b04 	ldr.w	r2, [r3], #4
 8005424:	4298      	cmp	r0, r3
 8005426:	f841 2f04 	str.w	r2, [r1, #4]!
 800542a:	d8f9      	bhi.n	8005420 <__lshift+0xc8>
 800542c:	e7ea      	b.n	8005404 <__lshift+0xac>
 800542e:	bf00      	nop
 8005430:	080067b7 	.word	0x080067b7
 8005434:	080067c8 	.word	0x080067c8

08005438 <__mcmp>:
 8005438:	4603      	mov	r3, r0
 800543a:	690a      	ldr	r2, [r1, #16]
 800543c:	6900      	ldr	r0, [r0, #16]
 800543e:	b530      	push	{r4, r5, lr}
 8005440:	1a80      	subs	r0, r0, r2
 8005442:	d10d      	bne.n	8005460 <__mcmp+0x28>
 8005444:	3314      	adds	r3, #20
 8005446:	3114      	adds	r1, #20
 8005448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800544c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005458:	4295      	cmp	r5, r2
 800545a:	d002      	beq.n	8005462 <__mcmp+0x2a>
 800545c:	d304      	bcc.n	8005468 <__mcmp+0x30>
 800545e:	2001      	movs	r0, #1
 8005460:	bd30      	pop	{r4, r5, pc}
 8005462:	42a3      	cmp	r3, r4
 8005464:	d3f4      	bcc.n	8005450 <__mcmp+0x18>
 8005466:	e7fb      	b.n	8005460 <__mcmp+0x28>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e7f8      	b.n	8005460 <__mcmp+0x28>
	...

08005470 <__mdiff>:
 8005470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	460d      	mov	r5, r1
 8005476:	4607      	mov	r7, r0
 8005478:	4611      	mov	r1, r2
 800547a:	4628      	mov	r0, r5
 800547c:	4614      	mov	r4, r2
 800547e:	f7ff ffdb 	bl	8005438 <__mcmp>
 8005482:	1e06      	subs	r6, r0, #0
 8005484:	d111      	bne.n	80054aa <__mdiff+0x3a>
 8005486:	4631      	mov	r1, r6
 8005488:	4638      	mov	r0, r7
 800548a:	f7ff fd57 	bl	8004f3c <_Balloc>
 800548e:	4602      	mov	r2, r0
 8005490:	b928      	cbnz	r0, 800549e <__mdiff+0x2e>
 8005492:	f240 2132 	movw	r1, #562	; 0x232
 8005496:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <__mdiff+0x110>)
 8005498:	483a      	ldr	r0, [pc, #232]	; (8005584 <__mdiff+0x114>)
 800549a:	f000 fb2d 	bl	8005af8 <__assert_func>
 800549e:	2301      	movs	r3, #1
 80054a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80054a4:	4610      	mov	r0, r2
 80054a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054aa:	bfa4      	itt	ge
 80054ac:	4623      	movge	r3, r4
 80054ae:	462c      	movge	r4, r5
 80054b0:	4638      	mov	r0, r7
 80054b2:	6861      	ldr	r1, [r4, #4]
 80054b4:	bfa6      	itte	ge
 80054b6:	461d      	movge	r5, r3
 80054b8:	2600      	movge	r6, #0
 80054ba:	2601      	movlt	r6, #1
 80054bc:	f7ff fd3e 	bl	8004f3c <_Balloc>
 80054c0:	4602      	mov	r2, r0
 80054c2:	b918      	cbnz	r0, 80054cc <__mdiff+0x5c>
 80054c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80054c8:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <__mdiff+0x110>)
 80054ca:	e7e5      	b.n	8005498 <__mdiff+0x28>
 80054cc:	f102 0814 	add.w	r8, r2, #20
 80054d0:	46c2      	mov	sl, r8
 80054d2:	f04f 0c00 	mov.w	ip, #0
 80054d6:	6927      	ldr	r7, [r4, #16]
 80054d8:	60c6      	str	r6, [r0, #12]
 80054da:	692e      	ldr	r6, [r5, #16]
 80054dc:	f104 0014 	add.w	r0, r4, #20
 80054e0:	f105 0914 	add.w	r9, r5, #20
 80054e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80054e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80054ec:	3410      	adds	r4, #16
 80054ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80054f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80054f6:	fa1f f18b 	uxth.w	r1, fp
 80054fa:	448c      	add	ip, r1
 80054fc:	b299      	uxth	r1, r3
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	ebac 0101 	sub.w	r1, ip, r1
 8005504:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005508:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800550c:	b289      	uxth	r1, r1
 800550e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005512:	454e      	cmp	r6, r9
 8005514:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005518:	f84a 3b04 	str.w	r3, [sl], #4
 800551c:	d8e7      	bhi.n	80054ee <__mdiff+0x7e>
 800551e:	1b73      	subs	r3, r6, r5
 8005520:	3b15      	subs	r3, #21
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	3515      	adds	r5, #21
 8005528:	3304      	adds	r3, #4
 800552a:	42ae      	cmp	r6, r5
 800552c:	bf38      	it	cc
 800552e:	2304      	movcc	r3, #4
 8005530:	4418      	add	r0, r3
 8005532:	4443      	add	r3, r8
 8005534:	461e      	mov	r6, r3
 8005536:	4605      	mov	r5, r0
 8005538:	4575      	cmp	r5, lr
 800553a:	d30e      	bcc.n	800555a <__mdiff+0xea>
 800553c:	f10e 0103 	add.w	r1, lr, #3
 8005540:	1a09      	subs	r1, r1, r0
 8005542:	f021 0103 	bic.w	r1, r1, #3
 8005546:	3803      	subs	r0, #3
 8005548:	4586      	cmp	lr, r0
 800554a:	bf38      	it	cc
 800554c:	2100      	movcc	r1, #0
 800554e:	4419      	add	r1, r3
 8005550:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005554:	b18b      	cbz	r3, 800557a <__mdiff+0x10a>
 8005556:	6117      	str	r7, [r2, #16]
 8005558:	e7a4      	b.n	80054a4 <__mdiff+0x34>
 800555a:	f855 8b04 	ldr.w	r8, [r5], #4
 800555e:	fa1f f188 	uxth.w	r1, r8
 8005562:	4461      	add	r1, ip
 8005564:	140c      	asrs	r4, r1, #16
 8005566:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800556a:	b289      	uxth	r1, r1
 800556c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005570:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005574:	f846 1b04 	str.w	r1, [r6], #4
 8005578:	e7de      	b.n	8005538 <__mdiff+0xc8>
 800557a:	3f01      	subs	r7, #1
 800557c:	e7e8      	b.n	8005550 <__mdiff+0xe0>
 800557e:	bf00      	nop
 8005580:	080067b7 	.word	0x080067b7
 8005584:	080067c8 	.word	0x080067c8

08005588 <__d2b>:
 8005588:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800558c:	2101      	movs	r1, #1
 800558e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005592:	4690      	mov	r8, r2
 8005594:	461d      	mov	r5, r3
 8005596:	f7ff fcd1 	bl	8004f3c <_Balloc>
 800559a:	4604      	mov	r4, r0
 800559c:	b930      	cbnz	r0, 80055ac <__d2b+0x24>
 800559e:	4602      	mov	r2, r0
 80055a0:	f240 310a 	movw	r1, #778	; 0x30a
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <__d2b+0xb0>)
 80055a6:	4825      	ldr	r0, [pc, #148]	; (800563c <__d2b+0xb4>)
 80055a8:	f000 faa6 	bl	8005af8 <__assert_func>
 80055ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80055b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80055b4:	bb2d      	cbnz	r5, 8005602 <__d2b+0x7a>
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	f1b8 0300 	subs.w	r3, r8, #0
 80055bc:	d026      	beq.n	800560c <__d2b+0x84>
 80055be:	4668      	mov	r0, sp
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	f7ff fd83 	bl	80050cc <__lo0bits>
 80055c6:	9900      	ldr	r1, [sp, #0]
 80055c8:	b1f0      	cbz	r0, 8005608 <__d2b+0x80>
 80055ca:	9a01      	ldr	r2, [sp, #4]
 80055cc:	f1c0 0320 	rsb	r3, r0, #32
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	430b      	orrs	r3, r1
 80055d6:	40c2      	lsrs	r2, r0
 80055d8:	6163      	str	r3, [r4, #20]
 80055da:	9201      	str	r2, [sp, #4]
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2102      	movne	r1, #2
 80055e4:	2101      	moveq	r1, #1
 80055e6:	61a3      	str	r3, [r4, #24]
 80055e8:	6121      	str	r1, [r4, #16]
 80055ea:	b1c5      	cbz	r5, 800561e <__d2b+0x96>
 80055ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80055f0:	4405      	add	r5, r0
 80055f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055f6:	603d      	str	r5, [r7, #0]
 80055f8:	6030      	str	r0, [r6, #0]
 80055fa:	4620      	mov	r0, r4
 80055fc:	b002      	add	sp, #8
 80055fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005606:	e7d6      	b.n	80055b6 <__d2b+0x2e>
 8005608:	6161      	str	r1, [r4, #20]
 800560a:	e7e7      	b.n	80055dc <__d2b+0x54>
 800560c:	a801      	add	r0, sp, #4
 800560e:	f7ff fd5d 	bl	80050cc <__lo0bits>
 8005612:	2101      	movs	r1, #1
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	6121      	str	r1, [r4, #16]
 8005618:	6163      	str	r3, [r4, #20]
 800561a:	3020      	adds	r0, #32
 800561c:	e7e5      	b.n	80055ea <__d2b+0x62>
 800561e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005622:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005626:	6038      	str	r0, [r7, #0]
 8005628:	6918      	ldr	r0, [r3, #16]
 800562a:	f7ff fd2f 	bl	800508c <__hi0bits>
 800562e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005632:	6031      	str	r1, [r6, #0]
 8005634:	e7e1      	b.n	80055fa <__d2b+0x72>
 8005636:	bf00      	nop
 8005638:	080067b7 	.word	0x080067b7
 800563c:	080067c8 	.word	0x080067c8

08005640 <_calloc_r>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	fba1 5402 	umull	r5, r4, r1, r2
 8005646:	b934      	cbnz	r4, 8005656 <_calloc_r+0x16>
 8005648:	4629      	mov	r1, r5
 800564a:	f000 f875 	bl	8005738 <_malloc_r>
 800564e:	4606      	mov	r6, r0
 8005650:	b928      	cbnz	r0, 800565e <_calloc_r+0x1e>
 8005652:	4630      	mov	r0, r6
 8005654:	bd70      	pop	{r4, r5, r6, pc}
 8005656:	220c      	movs	r2, #12
 8005658:	2600      	movs	r6, #0
 800565a:	6002      	str	r2, [r0, #0]
 800565c:	e7f9      	b.n	8005652 <_calloc_r+0x12>
 800565e:	462a      	mov	r2, r5
 8005660:	4621      	mov	r1, r4
 8005662:	f7fe f92d 	bl	80038c0 <memset>
 8005666:	e7f4      	b.n	8005652 <_calloc_r+0x12>

08005668 <_free_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4605      	mov	r5, r0
 800566c:	2900      	cmp	r1, #0
 800566e:	d040      	beq.n	80056f2 <_free_r+0x8a>
 8005670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005674:	1f0c      	subs	r4, r1, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	bfb8      	it	lt
 800567a:	18e4      	addlt	r4, r4, r3
 800567c:	f000 fa98 	bl	8005bb0 <__malloc_lock>
 8005680:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <_free_r+0x8c>)
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	b933      	cbnz	r3, 8005694 <_free_r+0x2c>
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	6014      	str	r4, [r2, #0]
 800568a:	4628      	mov	r0, r5
 800568c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005690:	f000 ba94 	b.w	8005bbc <__malloc_unlock>
 8005694:	42a3      	cmp	r3, r4
 8005696:	d908      	bls.n	80056aa <_free_r+0x42>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	1821      	adds	r1, r4, r0
 800569c:	428b      	cmp	r3, r1
 800569e:	bf01      	itttt	eq
 80056a0:	6819      	ldreq	r1, [r3, #0]
 80056a2:	685b      	ldreq	r3, [r3, #4]
 80056a4:	1809      	addeq	r1, r1, r0
 80056a6:	6021      	streq	r1, [r4, #0]
 80056a8:	e7ed      	b.n	8005686 <_free_r+0x1e>
 80056aa:	461a      	mov	r2, r3
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	b10b      	cbz	r3, 80056b4 <_free_r+0x4c>
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	d9fa      	bls.n	80056aa <_free_r+0x42>
 80056b4:	6811      	ldr	r1, [r2, #0]
 80056b6:	1850      	adds	r0, r2, r1
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d10b      	bne.n	80056d4 <_free_r+0x6c>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	4401      	add	r1, r0
 80056c0:	1850      	adds	r0, r2, r1
 80056c2:	4283      	cmp	r3, r0
 80056c4:	6011      	str	r1, [r2, #0]
 80056c6:	d1e0      	bne.n	800568a <_free_r+0x22>
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4401      	add	r1, r0
 80056ce:	6011      	str	r1, [r2, #0]
 80056d0:	6053      	str	r3, [r2, #4]
 80056d2:	e7da      	b.n	800568a <_free_r+0x22>
 80056d4:	d902      	bls.n	80056dc <_free_r+0x74>
 80056d6:	230c      	movs	r3, #12
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	e7d6      	b.n	800568a <_free_r+0x22>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	1821      	adds	r1, r4, r0
 80056e0:	428b      	cmp	r3, r1
 80056e2:	bf01      	itttt	eq
 80056e4:	6819      	ldreq	r1, [r3, #0]
 80056e6:	685b      	ldreq	r3, [r3, #4]
 80056e8:	1809      	addeq	r1, r1, r0
 80056ea:	6021      	streq	r1, [r4, #0]
 80056ec:	6063      	str	r3, [r4, #4]
 80056ee:	6054      	str	r4, [r2, #4]
 80056f0:	e7cb      	b.n	800568a <_free_r+0x22>
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	200002e4 	.word	0x200002e4

080056f8 <sbrk_aligned>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4e0e      	ldr	r6, [pc, #56]	; (8005734 <sbrk_aligned+0x3c>)
 80056fc:	460c      	mov	r4, r1
 80056fe:	6831      	ldr	r1, [r6, #0]
 8005700:	4605      	mov	r5, r0
 8005702:	b911      	cbnz	r1, 800570a <sbrk_aligned+0x12>
 8005704:	f000 f9e8 	bl	8005ad8 <_sbrk_r>
 8005708:	6030      	str	r0, [r6, #0]
 800570a:	4621      	mov	r1, r4
 800570c:	4628      	mov	r0, r5
 800570e:	f000 f9e3 	bl	8005ad8 <_sbrk_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d00a      	beq.n	800572c <sbrk_aligned+0x34>
 8005716:	1cc4      	adds	r4, r0, #3
 8005718:	f024 0403 	bic.w	r4, r4, #3
 800571c:	42a0      	cmp	r0, r4
 800571e:	d007      	beq.n	8005730 <sbrk_aligned+0x38>
 8005720:	1a21      	subs	r1, r4, r0
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f9d8 	bl	8005ad8 <_sbrk_r>
 8005728:	3001      	adds	r0, #1
 800572a:	d101      	bne.n	8005730 <sbrk_aligned+0x38>
 800572c:	f04f 34ff 	mov.w	r4, #4294967295
 8005730:	4620      	mov	r0, r4
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	200002e8 	.word	0x200002e8

08005738 <_malloc_r>:
 8005738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573c:	1ccd      	adds	r5, r1, #3
 800573e:	f025 0503 	bic.w	r5, r5, #3
 8005742:	3508      	adds	r5, #8
 8005744:	2d0c      	cmp	r5, #12
 8005746:	bf38      	it	cc
 8005748:	250c      	movcc	r5, #12
 800574a:	2d00      	cmp	r5, #0
 800574c:	4607      	mov	r7, r0
 800574e:	db01      	blt.n	8005754 <_malloc_r+0x1c>
 8005750:	42a9      	cmp	r1, r5
 8005752:	d905      	bls.n	8005760 <_malloc_r+0x28>
 8005754:	230c      	movs	r3, #12
 8005756:	2600      	movs	r6, #0
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	4630      	mov	r0, r6
 800575c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005760:	4e2e      	ldr	r6, [pc, #184]	; (800581c <_malloc_r+0xe4>)
 8005762:	f000 fa25 	bl	8005bb0 <__malloc_lock>
 8005766:	6833      	ldr	r3, [r6, #0]
 8005768:	461c      	mov	r4, r3
 800576a:	bb34      	cbnz	r4, 80057ba <_malloc_r+0x82>
 800576c:	4629      	mov	r1, r5
 800576e:	4638      	mov	r0, r7
 8005770:	f7ff ffc2 	bl	80056f8 <sbrk_aligned>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	4604      	mov	r4, r0
 8005778:	d14d      	bne.n	8005816 <_malloc_r+0xde>
 800577a:	6834      	ldr	r4, [r6, #0]
 800577c:	4626      	mov	r6, r4
 800577e:	2e00      	cmp	r6, #0
 8005780:	d140      	bne.n	8005804 <_malloc_r+0xcc>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	4631      	mov	r1, r6
 8005786:	4638      	mov	r0, r7
 8005788:	eb04 0803 	add.w	r8, r4, r3
 800578c:	f000 f9a4 	bl	8005ad8 <_sbrk_r>
 8005790:	4580      	cmp	r8, r0
 8005792:	d13a      	bne.n	800580a <_malloc_r+0xd2>
 8005794:	6821      	ldr	r1, [r4, #0]
 8005796:	3503      	adds	r5, #3
 8005798:	1a6d      	subs	r5, r5, r1
 800579a:	f025 0503 	bic.w	r5, r5, #3
 800579e:	3508      	adds	r5, #8
 80057a0:	2d0c      	cmp	r5, #12
 80057a2:	bf38      	it	cc
 80057a4:	250c      	movcc	r5, #12
 80057a6:	4638      	mov	r0, r7
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7ff ffa5 	bl	80056f8 <sbrk_aligned>
 80057ae:	3001      	adds	r0, #1
 80057b0:	d02b      	beq.n	800580a <_malloc_r+0xd2>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	442b      	add	r3, r5
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	e00e      	b.n	80057d8 <_malloc_r+0xa0>
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	1b52      	subs	r2, r2, r5
 80057be:	d41e      	bmi.n	80057fe <_malloc_r+0xc6>
 80057c0:	2a0b      	cmp	r2, #11
 80057c2:	d916      	bls.n	80057f2 <_malloc_r+0xba>
 80057c4:	1961      	adds	r1, r4, r5
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	6025      	str	r5, [r4, #0]
 80057ca:	bf18      	it	ne
 80057cc:	6059      	strne	r1, [r3, #4]
 80057ce:	6863      	ldr	r3, [r4, #4]
 80057d0:	bf08      	it	eq
 80057d2:	6031      	streq	r1, [r6, #0]
 80057d4:	5162      	str	r2, [r4, r5]
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	4638      	mov	r0, r7
 80057da:	f104 060b 	add.w	r6, r4, #11
 80057de:	f000 f9ed 	bl	8005bbc <__malloc_unlock>
 80057e2:	f026 0607 	bic.w	r6, r6, #7
 80057e6:	1d23      	adds	r3, r4, #4
 80057e8:	1af2      	subs	r2, r6, r3
 80057ea:	d0b6      	beq.n	800575a <_malloc_r+0x22>
 80057ec:	1b9b      	subs	r3, r3, r6
 80057ee:	50a3      	str	r3, [r4, r2]
 80057f0:	e7b3      	b.n	800575a <_malloc_r+0x22>
 80057f2:	6862      	ldr	r2, [r4, #4]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	bf0c      	ite	eq
 80057f8:	6032      	streq	r2, [r6, #0]
 80057fa:	605a      	strne	r2, [r3, #4]
 80057fc:	e7ec      	b.n	80057d8 <_malloc_r+0xa0>
 80057fe:	4623      	mov	r3, r4
 8005800:	6864      	ldr	r4, [r4, #4]
 8005802:	e7b2      	b.n	800576a <_malloc_r+0x32>
 8005804:	4634      	mov	r4, r6
 8005806:	6876      	ldr	r6, [r6, #4]
 8005808:	e7b9      	b.n	800577e <_malloc_r+0x46>
 800580a:	230c      	movs	r3, #12
 800580c:	4638      	mov	r0, r7
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	f000 f9d4 	bl	8005bbc <__malloc_unlock>
 8005814:	e7a1      	b.n	800575a <_malloc_r+0x22>
 8005816:	6025      	str	r5, [r4, #0]
 8005818:	e7de      	b.n	80057d8 <_malloc_r+0xa0>
 800581a:	bf00      	nop
 800581c:	200002e4 	.word	0x200002e4

08005820 <__ssputs_r>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	688e      	ldr	r6, [r1, #8]
 8005826:	4682      	mov	sl, r0
 8005828:	429e      	cmp	r6, r3
 800582a:	460c      	mov	r4, r1
 800582c:	4690      	mov	r8, r2
 800582e:	461f      	mov	r7, r3
 8005830:	d838      	bhi.n	80058a4 <__ssputs_r+0x84>
 8005832:	898a      	ldrh	r2, [r1, #12]
 8005834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005838:	d032      	beq.n	80058a0 <__ssputs_r+0x80>
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	6909      	ldr	r1, [r1, #16]
 800583e:	3301      	adds	r3, #1
 8005840:	eba5 0901 	sub.w	r9, r5, r1
 8005844:	6965      	ldr	r5, [r4, #20]
 8005846:	444b      	add	r3, r9
 8005848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800584c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005850:	106d      	asrs	r5, r5, #1
 8005852:	429d      	cmp	r5, r3
 8005854:	bf38      	it	cc
 8005856:	461d      	movcc	r5, r3
 8005858:	0553      	lsls	r3, r2, #21
 800585a:	d531      	bpl.n	80058c0 <__ssputs_r+0xa0>
 800585c:	4629      	mov	r1, r5
 800585e:	f7ff ff6b 	bl	8005738 <_malloc_r>
 8005862:	4606      	mov	r6, r0
 8005864:	b950      	cbnz	r0, 800587c <__ssputs_r+0x5c>
 8005866:	230c      	movs	r3, #12
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	f8ca 3000 	str.w	r3, [sl]
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005876:	81a3      	strh	r3, [r4, #12]
 8005878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587c:	464a      	mov	r2, r9
 800587e:	6921      	ldr	r1, [r4, #16]
 8005880:	f7ff fb4e 	bl	8004f20 <memcpy>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	6126      	str	r6, [r4, #16]
 8005892:	444e      	add	r6, r9
 8005894:	6026      	str	r6, [r4, #0]
 8005896:	463e      	mov	r6, r7
 8005898:	6165      	str	r5, [r4, #20]
 800589a:	eba5 0509 	sub.w	r5, r5, r9
 800589e:	60a5      	str	r5, [r4, #8]
 80058a0:	42be      	cmp	r6, r7
 80058a2:	d900      	bls.n	80058a6 <__ssputs_r+0x86>
 80058a4:	463e      	mov	r6, r7
 80058a6:	4632      	mov	r2, r6
 80058a8:	4641      	mov	r1, r8
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	f000 f966 	bl	8005b7c <memmove>
 80058b0:	68a3      	ldr	r3, [r4, #8]
 80058b2:	2000      	movs	r0, #0
 80058b4:	1b9b      	subs	r3, r3, r6
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	4433      	add	r3, r6
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	e7db      	b.n	8005878 <__ssputs_r+0x58>
 80058c0:	462a      	mov	r2, r5
 80058c2:	f000 f981 	bl	8005bc8 <_realloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d1e1      	bne.n	8005890 <__ssputs_r+0x70>
 80058cc:	4650      	mov	r0, sl
 80058ce:	6921      	ldr	r1, [r4, #16]
 80058d0:	f7ff feca 	bl	8005668 <_free_r>
 80058d4:	e7c7      	b.n	8005866 <__ssputs_r+0x46>
	...

080058d8 <_svfiprintf_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4698      	mov	r8, r3
 80058de:	898b      	ldrh	r3, [r1, #12]
 80058e0:	4607      	mov	r7, r0
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	460d      	mov	r5, r1
 80058e6:	4614      	mov	r4, r2
 80058e8:	b09d      	sub	sp, #116	; 0x74
 80058ea:	d50e      	bpl.n	800590a <_svfiprintf_r+0x32>
 80058ec:	690b      	ldr	r3, [r1, #16]
 80058ee:	b963      	cbnz	r3, 800590a <_svfiprintf_r+0x32>
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	f7ff ff21 	bl	8005738 <_malloc_r>
 80058f6:	6028      	str	r0, [r5, #0]
 80058f8:	6128      	str	r0, [r5, #16]
 80058fa:	b920      	cbnz	r0, 8005906 <_svfiprintf_r+0x2e>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	e0d1      	b.n	8005aaa <_svfiprintf_r+0x1d2>
 8005906:	2340      	movs	r3, #64	; 0x40
 8005908:	616b      	str	r3, [r5, #20]
 800590a:	2300      	movs	r3, #0
 800590c:	9309      	str	r3, [sp, #36]	; 0x24
 800590e:	2320      	movs	r3, #32
 8005910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005914:	2330      	movs	r3, #48	; 0x30
 8005916:	f04f 0901 	mov.w	r9, #1
 800591a:	f8cd 800c 	str.w	r8, [sp, #12]
 800591e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ac4 <_svfiprintf_r+0x1ec>
 8005922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005926:	4623      	mov	r3, r4
 8005928:	469a      	mov	sl, r3
 800592a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800592e:	b10a      	cbz	r2, 8005934 <_svfiprintf_r+0x5c>
 8005930:	2a25      	cmp	r2, #37	; 0x25
 8005932:	d1f9      	bne.n	8005928 <_svfiprintf_r+0x50>
 8005934:	ebba 0b04 	subs.w	fp, sl, r4
 8005938:	d00b      	beq.n	8005952 <_svfiprintf_r+0x7a>
 800593a:	465b      	mov	r3, fp
 800593c:	4622      	mov	r2, r4
 800593e:	4629      	mov	r1, r5
 8005940:	4638      	mov	r0, r7
 8005942:	f7ff ff6d 	bl	8005820 <__ssputs_r>
 8005946:	3001      	adds	r0, #1
 8005948:	f000 80aa 	beq.w	8005aa0 <_svfiprintf_r+0x1c8>
 800594c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800594e:	445a      	add	r2, fp
 8005950:	9209      	str	r2, [sp, #36]	; 0x24
 8005952:	f89a 3000 	ldrb.w	r3, [sl]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80a2 	beq.w	8005aa0 <_svfiprintf_r+0x1c8>
 800595c:	2300      	movs	r3, #0
 800595e:	f04f 32ff 	mov.w	r2, #4294967295
 8005962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005966:	f10a 0a01 	add.w	sl, sl, #1
 800596a:	9304      	str	r3, [sp, #16]
 800596c:	9307      	str	r3, [sp, #28]
 800596e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005972:	931a      	str	r3, [sp, #104]	; 0x68
 8005974:	4654      	mov	r4, sl
 8005976:	2205      	movs	r2, #5
 8005978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597c:	4851      	ldr	r0, [pc, #324]	; (8005ac4 <_svfiprintf_r+0x1ec>)
 800597e:	f7ff fac1 	bl	8004f04 <memchr>
 8005982:	9a04      	ldr	r2, [sp, #16]
 8005984:	b9d8      	cbnz	r0, 80059be <_svfiprintf_r+0xe6>
 8005986:	06d0      	lsls	r0, r2, #27
 8005988:	bf44      	itt	mi
 800598a:	2320      	movmi	r3, #32
 800598c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005990:	0711      	lsls	r1, r2, #28
 8005992:	bf44      	itt	mi
 8005994:	232b      	movmi	r3, #43	; 0x2b
 8005996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800599a:	f89a 3000 	ldrb.w	r3, [sl]
 800599e:	2b2a      	cmp	r3, #42	; 0x2a
 80059a0:	d015      	beq.n	80059ce <_svfiprintf_r+0xf6>
 80059a2:	4654      	mov	r4, sl
 80059a4:	2000      	movs	r0, #0
 80059a6:	f04f 0c0a 	mov.w	ip, #10
 80059aa:	9a07      	ldr	r2, [sp, #28]
 80059ac:	4621      	mov	r1, r4
 80059ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059b2:	3b30      	subs	r3, #48	; 0x30
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d94e      	bls.n	8005a56 <_svfiprintf_r+0x17e>
 80059b8:	b1b0      	cbz	r0, 80059e8 <_svfiprintf_r+0x110>
 80059ba:	9207      	str	r2, [sp, #28]
 80059bc:	e014      	b.n	80059e8 <_svfiprintf_r+0x110>
 80059be:	eba0 0308 	sub.w	r3, r0, r8
 80059c2:	fa09 f303 	lsl.w	r3, r9, r3
 80059c6:	4313      	orrs	r3, r2
 80059c8:	46a2      	mov	sl, r4
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	e7d2      	b.n	8005974 <_svfiprintf_r+0x9c>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	9103      	str	r1, [sp, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bfbb      	ittet	lt
 80059da:	425b      	neglt	r3, r3
 80059dc:	f042 0202 	orrlt.w	r2, r2, #2
 80059e0:	9307      	strge	r3, [sp, #28]
 80059e2:	9307      	strlt	r3, [sp, #28]
 80059e4:	bfb8      	it	lt
 80059e6:	9204      	strlt	r2, [sp, #16]
 80059e8:	7823      	ldrb	r3, [r4, #0]
 80059ea:	2b2e      	cmp	r3, #46	; 0x2e
 80059ec:	d10c      	bne.n	8005a08 <_svfiprintf_r+0x130>
 80059ee:	7863      	ldrb	r3, [r4, #1]
 80059f0:	2b2a      	cmp	r3, #42	; 0x2a
 80059f2:	d135      	bne.n	8005a60 <_svfiprintf_r+0x188>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	3402      	adds	r4, #2
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	9203      	str	r2, [sp, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfb8      	it	lt
 8005a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005ac8 <_svfiprintf_r+0x1f0>
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	4650      	mov	r0, sl
 8005a10:	7821      	ldrb	r1, [r4, #0]
 8005a12:	f7ff fa77 	bl	8004f04 <memchr>
 8005a16:	b140      	cbz	r0, 8005a2a <_svfiprintf_r+0x152>
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	eba0 000a 	sub.w	r0, r0, sl
 8005a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a22:	9b04      	ldr	r3, [sp, #16]
 8005a24:	3401      	adds	r4, #1
 8005a26:	4303      	orrs	r3, r0
 8005a28:	9304      	str	r3, [sp, #16]
 8005a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2e:	2206      	movs	r2, #6
 8005a30:	4826      	ldr	r0, [pc, #152]	; (8005acc <_svfiprintf_r+0x1f4>)
 8005a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a36:	f7ff fa65 	bl	8004f04 <memchr>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d038      	beq.n	8005ab0 <_svfiprintf_r+0x1d8>
 8005a3e:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <_svfiprintf_r+0x1f8>)
 8005a40:	bb1b      	cbnz	r3, 8005a8a <_svfiprintf_r+0x1b2>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	3307      	adds	r3, #7
 8005a46:	f023 0307 	bic.w	r3, r3, #7
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	9303      	str	r3, [sp, #12]
 8005a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a50:	4433      	add	r3, r6
 8005a52:	9309      	str	r3, [sp, #36]	; 0x24
 8005a54:	e767      	b.n	8005926 <_svfiprintf_r+0x4e>
 8005a56:	460c      	mov	r4, r1
 8005a58:	2001      	movs	r0, #1
 8005a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a5e:	e7a5      	b.n	80059ac <_svfiprintf_r+0xd4>
 8005a60:	2300      	movs	r3, #0
 8005a62:	f04f 0c0a 	mov.w	ip, #10
 8005a66:	4619      	mov	r1, r3
 8005a68:	3401      	adds	r4, #1
 8005a6a:	9305      	str	r3, [sp, #20]
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a72:	3a30      	subs	r2, #48	; 0x30
 8005a74:	2a09      	cmp	r2, #9
 8005a76:	d903      	bls.n	8005a80 <_svfiprintf_r+0x1a8>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0c5      	beq.n	8005a08 <_svfiprintf_r+0x130>
 8005a7c:	9105      	str	r1, [sp, #20]
 8005a7e:	e7c3      	b.n	8005a08 <_svfiprintf_r+0x130>
 8005a80:	4604      	mov	r4, r0
 8005a82:	2301      	movs	r3, #1
 8005a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a88:	e7f0      	b.n	8005a6c <_svfiprintf_r+0x194>
 8005a8a:	ab03      	add	r3, sp, #12
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <_svfiprintf_r+0x1fc>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	f7fd ffb9 	bl	8003a0c <_printf_float>
 8005a9a:	1c42      	adds	r2, r0, #1
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	d1d6      	bne.n	8005a4e <_svfiprintf_r+0x176>
 8005aa0:	89ab      	ldrh	r3, [r5, #12]
 8005aa2:	065b      	lsls	r3, r3, #25
 8005aa4:	f53f af2c 	bmi.w	8005900 <_svfiprintf_r+0x28>
 8005aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aaa:	b01d      	add	sp, #116	; 0x74
 8005aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab0:	ab03      	add	r3, sp, #12
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	462a      	mov	r2, r5
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <_svfiprintf_r+0x1fc>)
 8005aba:	a904      	add	r1, sp, #16
 8005abc:	f7fe fa42 	bl	8003f44 <_printf_i>
 8005ac0:	e7eb      	b.n	8005a9a <_svfiprintf_r+0x1c2>
 8005ac2:	bf00      	nop
 8005ac4:	08006924 	.word	0x08006924
 8005ac8:	0800692a 	.word	0x0800692a
 8005acc:	0800692e 	.word	0x0800692e
 8005ad0:	08003a0d 	.word	0x08003a0d
 8005ad4:	08005821 	.word	0x08005821

08005ad8 <_sbrk_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	2300      	movs	r3, #0
 8005adc:	4d05      	ldr	r5, [pc, #20]	; (8005af4 <_sbrk_r+0x1c>)
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f7fb fdec 	bl	80016c0 <_sbrk>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_sbrk_r+0x1a>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_sbrk_r+0x1a>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	200002ec 	.word	0x200002ec

08005af8 <__assert_func>:
 8005af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005afa:	4614      	mov	r4, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <__assert_func+0x2c>)
 8005b00:	4605      	mov	r5, r0
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68d8      	ldr	r0, [r3, #12]
 8005b06:	b14c      	cbz	r4, 8005b1c <__assert_func+0x24>
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <__assert_func+0x30>)
 8005b0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b0e:	9100      	str	r1, [sp, #0]
 8005b10:	462b      	mov	r3, r5
 8005b12:	4906      	ldr	r1, [pc, #24]	; (8005b2c <__assert_func+0x34>)
 8005b14:	f000 f80e 	bl	8005b34 <fiprintf>
 8005b18:	f000 faaa 	bl	8006070 <abort>
 8005b1c:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <__assert_func+0x38>)
 8005b1e:	461c      	mov	r4, r3
 8005b20:	e7f3      	b.n	8005b0a <__assert_func+0x12>
 8005b22:	bf00      	nop
 8005b24:	2000001c 	.word	0x2000001c
 8005b28:	08006935 	.word	0x08006935
 8005b2c:	08006942 	.word	0x08006942
 8005b30:	08006970 	.word	0x08006970

08005b34 <fiprintf>:
 8005b34:	b40e      	push	{r1, r2, r3}
 8005b36:	b503      	push	{r0, r1, lr}
 8005b38:	4601      	mov	r1, r0
 8005b3a:	ab03      	add	r3, sp, #12
 8005b3c:	4805      	ldr	r0, [pc, #20]	; (8005b54 <fiprintf+0x20>)
 8005b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b42:	6800      	ldr	r0, [r0, #0]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	f000 f895 	bl	8005c74 <_vfiprintf_r>
 8005b4a:	b002      	add	sp, #8
 8005b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b50:	b003      	add	sp, #12
 8005b52:	4770      	bx	lr
 8005b54:	2000001c 	.word	0x2000001c

08005b58 <__ascii_mbtowc>:
 8005b58:	b082      	sub	sp, #8
 8005b5a:	b901      	cbnz	r1, 8005b5e <__ascii_mbtowc+0x6>
 8005b5c:	a901      	add	r1, sp, #4
 8005b5e:	b142      	cbz	r2, 8005b72 <__ascii_mbtowc+0x1a>
 8005b60:	b14b      	cbz	r3, 8005b76 <__ascii_mbtowc+0x1e>
 8005b62:	7813      	ldrb	r3, [r2, #0]
 8005b64:	600b      	str	r3, [r1, #0]
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	1e10      	subs	r0, r2, #0
 8005b6a:	bf18      	it	ne
 8005b6c:	2001      	movne	r0, #1
 8005b6e:	b002      	add	sp, #8
 8005b70:	4770      	bx	lr
 8005b72:	4610      	mov	r0, r2
 8005b74:	e7fb      	b.n	8005b6e <__ascii_mbtowc+0x16>
 8005b76:	f06f 0001 	mvn.w	r0, #1
 8005b7a:	e7f8      	b.n	8005b6e <__ascii_mbtowc+0x16>

08005b7c <memmove>:
 8005b7c:	4288      	cmp	r0, r1
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	eb01 0402 	add.w	r4, r1, r2
 8005b84:	d902      	bls.n	8005b8c <memmove+0x10>
 8005b86:	4284      	cmp	r4, r0
 8005b88:	4623      	mov	r3, r4
 8005b8a:	d807      	bhi.n	8005b9c <memmove+0x20>
 8005b8c:	1e43      	subs	r3, r0, #1
 8005b8e:	42a1      	cmp	r1, r4
 8005b90:	d008      	beq.n	8005ba4 <memmove+0x28>
 8005b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b9a:	e7f8      	b.n	8005b8e <memmove+0x12>
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	4402      	add	r2, r0
 8005ba0:	428a      	cmp	r2, r1
 8005ba2:	d100      	bne.n	8005ba6 <memmove+0x2a>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bae:	e7f7      	b.n	8005ba0 <memmove+0x24>

08005bb0 <__malloc_lock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__malloc_lock+0x8>)
 8005bb2:	f000 bc19 	b.w	80063e8 <__retarget_lock_acquire_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	200002f0 	.word	0x200002f0

08005bbc <__malloc_unlock>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__malloc_unlock+0x8>)
 8005bbe:	f000 bc14 	b.w	80063ea <__retarget_lock_release_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	200002f0 	.word	0x200002f0

08005bc8 <_realloc_r>:
 8005bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4614      	mov	r4, r2
 8005bd0:	460e      	mov	r6, r1
 8005bd2:	b921      	cbnz	r1, 8005bde <_realloc_r+0x16>
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bda:	f7ff bdad 	b.w	8005738 <_malloc_r>
 8005bde:	b92a      	cbnz	r2, 8005bec <_realloc_r+0x24>
 8005be0:	f7ff fd42 	bl	8005668 <_free_r>
 8005be4:	4625      	mov	r5, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bec:	f000 fc64 	bl	80064b8 <_malloc_usable_size_r>
 8005bf0:	4284      	cmp	r4, r0
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	d802      	bhi.n	8005bfc <_realloc_r+0x34>
 8005bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bfa:	d812      	bhi.n	8005c22 <_realloc_r+0x5a>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4640      	mov	r0, r8
 8005c00:	f7ff fd9a 	bl	8005738 <_malloc_r>
 8005c04:	4605      	mov	r5, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0ed      	beq.n	8005be6 <_realloc_r+0x1e>
 8005c0a:	42bc      	cmp	r4, r7
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	4631      	mov	r1, r6
 8005c10:	bf28      	it	cs
 8005c12:	463a      	movcs	r2, r7
 8005c14:	f7ff f984 	bl	8004f20 <memcpy>
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f7ff fd24 	bl	8005668 <_free_r>
 8005c20:	e7e1      	b.n	8005be6 <_realloc_r+0x1e>
 8005c22:	4635      	mov	r5, r6
 8005c24:	e7df      	b.n	8005be6 <_realloc_r+0x1e>

08005c26 <__sfputc_r>:
 8005c26:	6893      	ldr	r3, [r2, #8]
 8005c28:	b410      	push	{r4}
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	6093      	str	r3, [r2, #8]
 8005c30:	da07      	bge.n	8005c42 <__sfputc_r+0x1c>
 8005c32:	6994      	ldr	r4, [r2, #24]
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	db01      	blt.n	8005c3c <__sfputc_r+0x16>
 8005c38:	290a      	cmp	r1, #10
 8005c3a:	d102      	bne.n	8005c42 <__sfputc_r+0x1c>
 8005c3c:	bc10      	pop	{r4}
 8005c3e:	f000 b949 	b.w	8005ed4 <__swbuf_r>
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	1c58      	adds	r0, r3, #1
 8005c46:	6010      	str	r0, [r2, #0]
 8005c48:	7019      	strb	r1, [r3, #0]
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	bc10      	pop	{r4}
 8005c4e:	4770      	bx	lr

08005c50 <__sfputs_r>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	4606      	mov	r6, r0
 8005c54:	460f      	mov	r7, r1
 8005c56:	4614      	mov	r4, r2
 8005c58:	18d5      	adds	r5, r2, r3
 8005c5a:	42ac      	cmp	r4, r5
 8005c5c:	d101      	bne.n	8005c62 <__sfputs_r+0x12>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e007      	b.n	8005c72 <__sfputs_r+0x22>
 8005c62:	463a      	mov	r2, r7
 8005c64:	4630      	mov	r0, r6
 8005c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6a:	f7ff ffdc 	bl	8005c26 <__sfputc_r>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	d1f3      	bne.n	8005c5a <__sfputs_r+0xa>
 8005c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c74 <_vfiprintf_r>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	460d      	mov	r5, r1
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	4698      	mov	r8, r3
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b09d      	sub	sp, #116	; 0x74
 8005c82:	b118      	cbz	r0, 8005c8c <_vfiprintf_r+0x18>
 8005c84:	6983      	ldr	r3, [r0, #24]
 8005c86:	b90b      	cbnz	r3, 8005c8c <_vfiprintf_r+0x18>
 8005c88:	f000 fb10 	bl	80062ac <__sinit>
 8005c8c:	4b89      	ldr	r3, [pc, #548]	; (8005eb4 <_vfiprintf_r+0x240>)
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	d11b      	bne.n	8005cca <_vfiprintf_r+0x56>
 8005c92:	6875      	ldr	r5, [r6, #4]
 8005c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c96:	07d9      	lsls	r1, r3, #31
 8005c98:	d405      	bmi.n	8005ca6 <_vfiprintf_r+0x32>
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	059a      	lsls	r2, r3, #22
 8005c9e:	d402      	bmi.n	8005ca6 <_vfiprintf_r+0x32>
 8005ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ca2:	f000 fba1 	bl	80063e8 <__retarget_lock_acquire_recursive>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	071b      	lsls	r3, r3, #28
 8005caa:	d501      	bpl.n	8005cb0 <_vfiprintf_r+0x3c>
 8005cac:	692b      	ldr	r3, [r5, #16]
 8005cae:	b9eb      	cbnz	r3, 8005cec <_vfiprintf_r+0x78>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f000 f96e 	bl	8005f94 <__swsetup_r>
 8005cb8:	b1c0      	cbz	r0, 8005cec <_vfiprintf_r+0x78>
 8005cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cbc:	07dc      	lsls	r4, r3, #31
 8005cbe:	d50e      	bpl.n	8005cde <_vfiprintf_r+0x6a>
 8005cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc4:	b01d      	add	sp, #116	; 0x74
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	4b7b      	ldr	r3, [pc, #492]	; (8005eb8 <_vfiprintf_r+0x244>)
 8005ccc:	429d      	cmp	r5, r3
 8005cce:	d101      	bne.n	8005cd4 <_vfiprintf_r+0x60>
 8005cd0:	68b5      	ldr	r5, [r6, #8]
 8005cd2:	e7df      	b.n	8005c94 <_vfiprintf_r+0x20>
 8005cd4:	4b79      	ldr	r3, [pc, #484]	; (8005ebc <_vfiprintf_r+0x248>)
 8005cd6:	429d      	cmp	r5, r3
 8005cd8:	bf08      	it	eq
 8005cda:	68f5      	ldreq	r5, [r6, #12]
 8005cdc:	e7da      	b.n	8005c94 <_vfiprintf_r+0x20>
 8005cde:	89ab      	ldrh	r3, [r5, #12]
 8005ce0:	0598      	lsls	r0, r3, #22
 8005ce2:	d4ed      	bmi.n	8005cc0 <_vfiprintf_r+0x4c>
 8005ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ce6:	f000 fb80 	bl	80063ea <__retarget_lock_release_recursive>
 8005cea:	e7e9      	b.n	8005cc0 <_vfiprintf_r+0x4c>
 8005cec:	2300      	movs	r3, #0
 8005cee:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf0:	2320      	movs	r3, #32
 8005cf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cf6:	2330      	movs	r3, #48	; 0x30
 8005cf8:	f04f 0901 	mov.w	r9, #1
 8005cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d00:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ec0 <_vfiprintf_r+0x24c>
 8005d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d08:	4623      	mov	r3, r4
 8005d0a:	469a      	mov	sl, r3
 8005d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d10:	b10a      	cbz	r2, 8005d16 <_vfiprintf_r+0xa2>
 8005d12:	2a25      	cmp	r2, #37	; 0x25
 8005d14:	d1f9      	bne.n	8005d0a <_vfiprintf_r+0x96>
 8005d16:	ebba 0b04 	subs.w	fp, sl, r4
 8005d1a:	d00b      	beq.n	8005d34 <_vfiprintf_r+0xc0>
 8005d1c:	465b      	mov	r3, fp
 8005d1e:	4622      	mov	r2, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7ff ff94 	bl	8005c50 <__sfputs_r>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	f000 80aa 	beq.w	8005e82 <_vfiprintf_r+0x20e>
 8005d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d30:	445a      	add	r2, fp
 8005d32:	9209      	str	r2, [sp, #36]	; 0x24
 8005d34:	f89a 3000 	ldrb.w	r3, [sl]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80a2 	beq.w	8005e82 <_vfiprintf_r+0x20e>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295
 8005d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d48:	f10a 0a01 	add.w	sl, sl, #1
 8005d4c:	9304      	str	r3, [sp, #16]
 8005d4e:	9307      	str	r3, [sp, #28]
 8005d50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d54:	931a      	str	r3, [sp, #104]	; 0x68
 8005d56:	4654      	mov	r4, sl
 8005d58:	2205      	movs	r2, #5
 8005d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5e:	4858      	ldr	r0, [pc, #352]	; (8005ec0 <_vfiprintf_r+0x24c>)
 8005d60:	f7ff f8d0 	bl	8004f04 <memchr>
 8005d64:	9a04      	ldr	r2, [sp, #16]
 8005d66:	b9d8      	cbnz	r0, 8005da0 <_vfiprintf_r+0x12c>
 8005d68:	06d1      	lsls	r1, r2, #27
 8005d6a:	bf44      	itt	mi
 8005d6c:	2320      	movmi	r3, #32
 8005d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d72:	0713      	lsls	r3, r2, #28
 8005d74:	bf44      	itt	mi
 8005d76:	232b      	movmi	r3, #43	; 0x2b
 8005d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d80:	2b2a      	cmp	r3, #42	; 0x2a
 8005d82:	d015      	beq.n	8005db0 <_vfiprintf_r+0x13c>
 8005d84:	4654      	mov	r4, sl
 8005d86:	2000      	movs	r0, #0
 8005d88:	f04f 0c0a 	mov.w	ip, #10
 8005d8c:	9a07      	ldr	r2, [sp, #28]
 8005d8e:	4621      	mov	r1, r4
 8005d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d94:	3b30      	subs	r3, #48	; 0x30
 8005d96:	2b09      	cmp	r3, #9
 8005d98:	d94e      	bls.n	8005e38 <_vfiprintf_r+0x1c4>
 8005d9a:	b1b0      	cbz	r0, 8005dca <_vfiprintf_r+0x156>
 8005d9c:	9207      	str	r2, [sp, #28]
 8005d9e:	e014      	b.n	8005dca <_vfiprintf_r+0x156>
 8005da0:	eba0 0308 	sub.w	r3, r0, r8
 8005da4:	fa09 f303 	lsl.w	r3, r9, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	46a2      	mov	sl, r4
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	e7d2      	b.n	8005d56 <_vfiprintf_r+0xe2>
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	1d19      	adds	r1, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	9103      	str	r1, [sp, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfbb      	ittet	lt
 8005dbc:	425b      	neglt	r3, r3
 8005dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005dc2:	9307      	strge	r3, [sp, #28]
 8005dc4:	9307      	strlt	r3, [sp, #28]
 8005dc6:	bfb8      	it	lt
 8005dc8:	9204      	strlt	r2, [sp, #16]
 8005dca:	7823      	ldrb	r3, [r4, #0]
 8005dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005dce:	d10c      	bne.n	8005dea <_vfiprintf_r+0x176>
 8005dd0:	7863      	ldrb	r3, [r4, #1]
 8005dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd4:	d135      	bne.n	8005e42 <_vfiprintf_r+0x1ce>
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	3402      	adds	r4, #2
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	9203      	str	r2, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfb8      	it	lt
 8005de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005ec4 <_vfiprintf_r+0x250>
 8005dee:	2203      	movs	r2, #3
 8005df0:	4650      	mov	r0, sl
 8005df2:	7821      	ldrb	r1, [r4, #0]
 8005df4:	f7ff f886 	bl	8004f04 <memchr>
 8005df8:	b140      	cbz	r0, 8005e0c <_vfiprintf_r+0x198>
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	eba0 000a 	sub.w	r0, r0, sl
 8005e00:	fa03 f000 	lsl.w	r0, r3, r0
 8005e04:	9b04      	ldr	r3, [sp, #16]
 8005e06:	3401      	adds	r4, #1
 8005e08:	4303      	orrs	r3, r0
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e10:	2206      	movs	r2, #6
 8005e12:	482d      	ldr	r0, [pc, #180]	; (8005ec8 <_vfiprintf_r+0x254>)
 8005e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e18:	f7ff f874 	bl	8004f04 <memchr>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d03f      	beq.n	8005ea0 <_vfiprintf_r+0x22c>
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <_vfiprintf_r+0x258>)
 8005e22:	bb1b      	cbnz	r3, 8005e6c <_vfiprintf_r+0x1f8>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	3307      	adds	r3, #7
 8005e28:	f023 0307 	bic.w	r3, r3, #7
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	9303      	str	r3, [sp, #12]
 8005e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e32:	443b      	add	r3, r7
 8005e34:	9309      	str	r3, [sp, #36]	; 0x24
 8005e36:	e767      	b.n	8005d08 <_vfiprintf_r+0x94>
 8005e38:	460c      	mov	r4, r1
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e40:	e7a5      	b.n	8005d8e <_vfiprintf_r+0x11a>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f04f 0c0a 	mov.w	ip, #10
 8005e48:	4619      	mov	r1, r3
 8005e4a:	3401      	adds	r4, #1
 8005e4c:	9305      	str	r3, [sp, #20]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e54:	3a30      	subs	r2, #48	; 0x30
 8005e56:	2a09      	cmp	r2, #9
 8005e58:	d903      	bls.n	8005e62 <_vfiprintf_r+0x1ee>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0c5      	beq.n	8005dea <_vfiprintf_r+0x176>
 8005e5e:	9105      	str	r1, [sp, #20]
 8005e60:	e7c3      	b.n	8005dea <_vfiprintf_r+0x176>
 8005e62:	4604      	mov	r4, r0
 8005e64:	2301      	movs	r3, #1
 8005e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e6a:	e7f0      	b.n	8005e4e <_vfiprintf_r+0x1da>
 8005e6c:	ab03      	add	r3, sp, #12
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	462a      	mov	r2, r5
 8005e72:	4630      	mov	r0, r6
 8005e74:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <_vfiprintf_r+0x25c>)
 8005e76:	a904      	add	r1, sp, #16
 8005e78:	f7fd fdc8 	bl	8003a0c <_printf_float>
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	1c78      	adds	r0, r7, #1
 8005e80:	d1d6      	bne.n	8005e30 <_vfiprintf_r+0x1bc>
 8005e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e84:	07d9      	lsls	r1, r3, #31
 8005e86:	d405      	bmi.n	8005e94 <_vfiprintf_r+0x220>
 8005e88:	89ab      	ldrh	r3, [r5, #12]
 8005e8a:	059a      	lsls	r2, r3, #22
 8005e8c:	d402      	bmi.n	8005e94 <_vfiprintf_r+0x220>
 8005e8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e90:	f000 faab 	bl	80063ea <__retarget_lock_release_recursive>
 8005e94:	89ab      	ldrh	r3, [r5, #12]
 8005e96:	065b      	lsls	r3, r3, #25
 8005e98:	f53f af12 	bmi.w	8005cc0 <_vfiprintf_r+0x4c>
 8005e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e9e:	e711      	b.n	8005cc4 <_vfiprintf_r+0x50>
 8005ea0:	ab03      	add	r3, sp, #12
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <_vfiprintf_r+0x25c>)
 8005eaa:	a904      	add	r1, sp, #16
 8005eac:	f7fe f84a 	bl	8003f44 <_printf_i>
 8005eb0:	e7e4      	b.n	8005e7c <_vfiprintf_r+0x208>
 8005eb2:	bf00      	nop
 8005eb4:	08006a9c 	.word	0x08006a9c
 8005eb8:	08006abc 	.word	0x08006abc
 8005ebc:	08006a7c 	.word	0x08006a7c
 8005ec0:	08006924 	.word	0x08006924
 8005ec4:	0800692a 	.word	0x0800692a
 8005ec8:	0800692e 	.word	0x0800692e
 8005ecc:	08003a0d 	.word	0x08003a0d
 8005ed0:	08005c51 	.word	0x08005c51

08005ed4 <__swbuf_r>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	4605      	mov	r5, r0
 8005edc:	b118      	cbz	r0, 8005ee6 <__swbuf_r+0x12>
 8005ede:	6983      	ldr	r3, [r0, #24]
 8005ee0:	b90b      	cbnz	r3, 8005ee6 <__swbuf_r+0x12>
 8005ee2:	f000 f9e3 	bl	80062ac <__sinit>
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <__swbuf_r+0x98>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	d12b      	bne.n	8005f44 <__swbuf_r+0x70>
 8005eec:	686c      	ldr	r4, [r5, #4]
 8005eee:	69a3      	ldr	r3, [r4, #24]
 8005ef0:	60a3      	str	r3, [r4, #8]
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	071a      	lsls	r2, r3, #28
 8005ef6:	d52f      	bpl.n	8005f58 <__swbuf_r+0x84>
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	b36b      	cbz	r3, 8005f58 <__swbuf_r+0x84>
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6820      	ldr	r0, [r4, #0]
 8005f00:	b2f6      	uxtb	r6, r6
 8005f02:	1ac0      	subs	r0, r0, r3
 8005f04:	6963      	ldr	r3, [r4, #20]
 8005f06:	4637      	mov	r7, r6
 8005f08:	4283      	cmp	r3, r0
 8005f0a:	dc04      	bgt.n	8005f16 <__swbuf_r+0x42>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f938 	bl	8006184 <_fflush_r>
 8005f14:	bb30      	cbnz	r0, 8005f64 <__swbuf_r+0x90>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	3001      	adds	r0, #1
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	60a3      	str	r3, [r4, #8]
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	701e      	strb	r6, [r3, #0]
 8005f26:	6963      	ldr	r3, [r4, #20]
 8005f28:	4283      	cmp	r3, r0
 8005f2a:	d004      	beq.n	8005f36 <__swbuf_r+0x62>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	07db      	lsls	r3, r3, #31
 8005f30:	d506      	bpl.n	8005f40 <__swbuf_r+0x6c>
 8005f32:	2e0a      	cmp	r6, #10
 8005f34:	d104      	bne.n	8005f40 <__swbuf_r+0x6c>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 f923 	bl	8006184 <_fflush_r>
 8005f3e:	b988      	cbnz	r0, 8005f64 <__swbuf_r+0x90>
 8005f40:	4638      	mov	r0, r7
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <__swbuf_r+0x9c>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d101      	bne.n	8005f4e <__swbuf_r+0x7a>
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	e7cf      	b.n	8005eee <__swbuf_r+0x1a>
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <__swbuf_r+0xa0>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	bf08      	it	eq
 8005f54:	68ec      	ldreq	r4, [r5, #12]
 8005f56:	e7ca      	b.n	8005eee <__swbuf_r+0x1a>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 f81a 	bl	8005f94 <__swsetup_r>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d0cb      	beq.n	8005efc <__swbuf_r+0x28>
 8005f64:	f04f 37ff 	mov.w	r7, #4294967295
 8005f68:	e7ea      	b.n	8005f40 <__swbuf_r+0x6c>
 8005f6a:	bf00      	nop
 8005f6c:	08006a9c 	.word	0x08006a9c
 8005f70:	08006abc 	.word	0x08006abc
 8005f74:	08006a7c 	.word	0x08006a7c

08005f78 <__ascii_wctomb>:
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	b141      	cbz	r1, 8005f90 <__ascii_wctomb+0x18>
 8005f7e:	2aff      	cmp	r2, #255	; 0xff
 8005f80:	d904      	bls.n	8005f8c <__ascii_wctomb+0x14>
 8005f82:	228a      	movs	r2, #138	; 0x8a
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	4770      	bx	lr
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	700a      	strb	r2, [r1, #0]
 8005f90:	4770      	bx	lr
	...

08005f94 <__swsetup_r>:
 8005f94:	4b32      	ldr	r3, [pc, #200]	; (8006060 <__swsetup_r+0xcc>)
 8005f96:	b570      	push	{r4, r5, r6, lr}
 8005f98:	681d      	ldr	r5, [r3, #0]
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	b125      	cbz	r5, 8005faa <__swsetup_r+0x16>
 8005fa0:	69ab      	ldr	r3, [r5, #24]
 8005fa2:	b913      	cbnz	r3, 8005faa <__swsetup_r+0x16>
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f981 	bl	80062ac <__sinit>
 8005faa:	4b2e      	ldr	r3, [pc, #184]	; (8006064 <__swsetup_r+0xd0>)
 8005fac:	429c      	cmp	r4, r3
 8005fae:	d10f      	bne.n	8005fd0 <__swsetup_r+0x3c>
 8005fb0:	686c      	ldr	r4, [r5, #4]
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fb8:	0719      	lsls	r1, r3, #28
 8005fba:	d42c      	bmi.n	8006016 <__swsetup_r+0x82>
 8005fbc:	06dd      	lsls	r5, r3, #27
 8005fbe:	d411      	bmi.n	8005fe4 <__swsetup_r+0x50>
 8005fc0:	2309      	movs	r3, #9
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	e03e      	b.n	800604e <__swsetup_r+0xba>
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <__swsetup_r+0xd4>)
 8005fd2:	429c      	cmp	r4, r3
 8005fd4:	d101      	bne.n	8005fda <__swsetup_r+0x46>
 8005fd6:	68ac      	ldr	r4, [r5, #8]
 8005fd8:	e7eb      	b.n	8005fb2 <__swsetup_r+0x1e>
 8005fda:	4b24      	ldr	r3, [pc, #144]	; (800606c <__swsetup_r+0xd8>)
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	bf08      	it	eq
 8005fe0:	68ec      	ldreq	r4, [r5, #12]
 8005fe2:	e7e6      	b.n	8005fb2 <__swsetup_r+0x1e>
 8005fe4:	0758      	lsls	r0, r3, #29
 8005fe6:	d512      	bpl.n	800600e <__swsetup_r+0x7a>
 8005fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fea:	b141      	cbz	r1, 8005ffe <__swsetup_r+0x6a>
 8005fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d002      	beq.n	8005ffa <__swsetup_r+0x66>
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff fb37 	bl	8005668 <_free_r>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006004:	81a3      	strh	r3, [r4, #12]
 8006006:	2300      	movs	r3, #0
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	6923      	ldr	r3, [r4, #16]
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	f043 0308 	orr.w	r3, r3, #8
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	b94b      	cbnz	r3, 800602e <__swsetup_r+0x9a>
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006024:	d003      	beq.n	800602e <__swsetup_r+0x9a>
 8006026:	4621      	mov	r1, r4
 8006028:	4630      	mov	r0, r6
 800602a:	f000 fa05 	bl	8006438 <__smakebuf_r>
 800602e:	89a0      	ldrh	r0, [r4, #12]
 8006030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006034:	f010 0301 	ands.w	r3, r0, #1
 8006038:	d00a      	beq.n	8006050 <__swsetup_r+0xbc>
 800603a:	2300      	movs	r3, #0
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	6963      	ldr	r3, [r4, #20]
 8006040:	425b      	negs	r3, r3
 8006042:	61a3      	str	r3, [r4, #24]
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	b943      	cbnz	r3, 800605a <__swsetup_r+0xc6>
 8006048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800604c:	d1ba      	bne.n	8005fc4 <__swsetup_r+0x30>
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	0781      	lsls	r1, r0, #30
 8006052:	bf58      	it	pl
 8006054:	6963      	ldrpl	r3, [r4, #20]
 8006056:	60a3      	str	r3, [r4, #8]
 8006058:	e7f4      	b.n	8006044 <__swsetup_r+0xb0>
 800605a:	2000      	movs	r0, #0
 800605c:	e7f7      	b.n	800604e <__swsetup_r+0xba>
 800605e:	bf00      	nop
 8006060:	2000001c 	.word	0x2000001c
 8006064:	08006a9c 	.word	0x08006a9c
 8006068:	08006abc 	.word	0x08006abc
 800606c:	08006a7c 	.word	0x08006a7c

08006070 <abort>:
 8006070:	2006      	movs	r0, #6
 8006072:	b508      	push	{r3, lr}
 8006074:	f000 fa50 	bl	8006518 <raise>
 8006078:	2001      	movs	r0, #1
 800607a:	f7fb faad 	bl	80015d8 <_exit>
	...

08006080 <__sflush_r>:
 8006080:	898a      	ldrh	r2, [r1, #12]
 8006082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006084:	4605      	mov	r5, r0
 8006086:	0710      	lsls	r0, r2, #28
 8006088:	460c      	mov	r4, r1
 800608a:	d457      	bmi.n	800613c <__sflush_r+0xbc>
 800608c:	684b      	ldr	r3, [r1, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	dc04      	bgt.n	800609c <__sflush_r+0x1c>
 8006092:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc01      	bgt.n	800609c <__sflush_r+0x1c>
 8006098:	2000      	movs	r0, #0
 800609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800609c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800609e:	2e00      	cmp	r6, #0
 80060a0:	d0fa      	beq.n	8006098 <__sflush_r+0x18>
 80060a2:	2300      	movs	r3, #0
 80060a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060a8:	682f      	ldr	r7, [r5, #0]
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	d032      	beq.n	8006114 <__sflush_r+0x94>
 80060ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	075a      	lsls	r2, r3, #29
 80060b4:	d505      	bpl.n	80060c2 <__sflush_r+0x42>
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	1ac0      	subs	r0, r0, r3
 80060ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060bc:	b10b      	cbz	r3, 80060c2 <__sflush_r+0x42>
 80060be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060c0:	1ac0      	subs	r0, r0, r3
 80060c2:	2300      	movs	r3, #0
 80060c4:	4602      	mov	r2, r0
 80060c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060c8:	4628      	mov	r0, r5
 80060ca:	6a21      	ldr	r1, [r4, #32]
 80060cc:	47b0      	blx	r6
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	d106      	bne.n	80060e2 <__sflush_r+0x62>
 80060d4:	6829      	ldr	r1, [r5, #0]
 80060d6:	291d      	cmp	r1, #29
 80060d8:	d82c      	bhi.n	8006134 <__sflush_r+0xb4>
 80060da:	4a29      	ldr	r2, [pc, #164]	; (8006180 <__sflush_r+0x100>)
 80060dc:	40ca      	lsrs	r2, r1
 80060de:	07d6      	lsls	r6, r2, #31
 80060e0:	d528      	bpl.n	8006134 <__sflush_r+0xb4>
 80060e2:	2200      	movs	r2, #0
 80060e4:	6062      	str	r2, [r4, #4]
 80060e6:	6922      	ldr	r2, [r4, #16]
 80060e8:	04d9      	lsls	r1, r3, #19
 80060ea:	6022      	str	r2, [r4, #0]
 80060ec:	d504      	bpl.n	80060f8 <__sflush_r+0x78>
 80060ee:	1c42      	adds	r2, r0, #1
 80060f0:	d101      	bne.n	80060f6 <__sflush_r+0x76>
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	b903      	cbnz	r3, 80060f8 <__sflush_r+0x78>
 80060f6:	6560      	str	r0, [r4, #84]	; 0x54
 80060f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060fa:	602f      	str	r7, [r5, #0]
 80060fc:	2900      	cmp	r1, #0
 80060fe:	d0cb      	beq.n	8006098 <__sflush_r+0x18>
 8006100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006104:	4299      	cmp	r1, r3
 8006106:	d002      	beq.n	800610e <__sflush_r+0x8e>
 8006108:	4628      	mov	r0, r5
 800610a:	f7ff faad 	bl	8005668 <_free_r>
 800610e:	2000      	movs	r0, #0
 8006110:	6360      	str	r0, [r4, #52]	; 0x34
 8006112:	e7c2      	b.n	800609a <__sflush_r+0x1a>
 8006114:	6a21      	ldr	r1, [r4, #32]
 8006116:	2301      	movs	r3, #1
 8006118:	4628      	mov	r0, r5
 800611a:	47b0      	blx	r6
 800611c:	1c41      	adds	r1, r0, #1
 800611e:	d1c7      	bne.n	80060b0 <__sflush_r+0x30>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0c4      	beq.n	80060b0 <__sflush_r+0x30>
 8006126:	2b1d      	cmp	r3, #29
 8006128:	d001      	beq.n	800612e <__sflush_r+0xae>
 800612a:	2b16      	cmp	r3, #22
 800612c:	d101      	bne.n	8006132 <__sflush_r+0xb2>
 800612e:	602f      	str	r7, [r5, #0]
 8006130:	e7b2      	b.n	8006098 <__sflush_r+0x18>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	e7ae      	b.n	800609a <__sflush_r+0x1a>
 800613c:	690f      	ldr	r7, [r1, #16]
 800613e:	2f00      	cmp	r7, #0
 8006140:	d0aa      	beq.n	8006098 <__sflush_r+0x18>
 8006142:	0793      	lsls	r3, r2, #30
 8006144:	bf18      	it	ne
 8006146:	2300      	movne	r3, #0
 8006148:	680e      	ldr	r6, [r1, #0]
 800614a:	bf08      	it	eq
 800614c:	694b      	ldreq	r3, [r1, #20]
 800614e:	1bf6      	subs	r6, r6, r7
 8006150:	600f      	str	r7, [r1, #0]
 8006152:	608b      	str	r3, [r1, #8]
 8006154:	2e00      	cmp	r6, #0
 8006156:	dd9f      	ble.n	8006098 <__sflush_r+0x18>
 8006158:	4633      	mov	r3, r6
 800615a:	463a      	mov	r2, r7
 800615c:	4628      	mov	r0, r5
 800615e:	6a21      	ldr	r1, [r4, #32]
 8006160:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006164:	47e0      	blx	ip
 8006166:	2800      	cmp	r0, #0
 8006168:	dc06      	bgt.n	8006178 <__sflush_r+0xf8>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	e790      	b.n	800609a <__sflush_r+0x1a>
 8006178:	4407      	add	r7, r0
 800617a:	1a36      	subs	r6, r6, r0
 800617c:	e7ea      	b.n	8006154 <__sflush_r+0xd4>
 800617e:	bf00      	nop
 8006180:	20400001 	.word	0x20400001

08006184 <_fflush_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	4605      	mov	r5, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b913      	cbnz	r3, 8006194 <_fflush_r+0x10>
 800618e:	2500      	movs	r5, #0
 8006190:	4628      	mov	r0, r5
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	b118      	cbz	r0, 800619e <_fflush_r+0x1a>
 8006196:	6983      	ldr	r3, [r0, #24]
 8006198:	b90b      	cbnz	r3, 800619e <_fflush_r+0x1a>
 800619a:	f000 f887 	bl	80062ac <__sinit>
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <_fflush_r+0x6c>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	d11b      	bne.n	80061dc <_fflush_r+0x58>
 80061a4:	686c      	ldr	r4, [r5, #4]
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ef      	beq.n	800618e <_fflush_r+0xa>
 80061ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061b0:	07d0      	lsls	r0, r2, #31
 80061b2:	d404      	bmi.n	80061be <_fflush_r+0x3a>
 80061b4:	0599      	lsls	r1, r3, #22
 80061b6:	d402      	bmi.n	80061be <_fflush_r+0x3a>
 80061b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ba:	f000 f915 	bl	80063e8 <__retarget_lock_acquire_recursive>
 80061be:	4628      	mov	r0, r5
 80061c0:	4621      	mov	r1, r4
 80061c2:	f7ff ff5d 	bl	8006080 <__sflush_r>
 80061c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061c8:	4605      	mov	r5, r0
 80061ca:	07da      	lsls	r2, r3, #31
 80061cc:	d4e0      	bmi.n	8006190 <_fflush_r+0xc>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	059b      	lsls	r3, r3, #22
 80061d2:	d4dd      	bmi.n	8006190 <_fflush_r+0xc>
 80061d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d6:	f000 f908 	bl	80063ea <__retarget_lock_release_recursive>
 80061da:	e7d9      	b.n	8006190 <_fflush_r+0xc>
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <_fflush_r+0x70>)
 80061de:	429c      	cmp	r4, r3
 80061e0:	d101      	bne.n	80061e6 <_fflush_r+0x62>
 80061e2:	68ac      	ldr	r4, [r5, #8]
 80061e4:	e7df      	b.n	80061a6 <_fflush_r+0x22>
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <_fflush_r+0x74>)
 80061e8:	429c      	cmp	r4, r3
 80061ea:	bf08      	it	eq
 80061ec:	68ec      	ldreq	r4, [r5, #12]
 80061ee:	e7da      	b.n	80061a6 <_fflush_r+0x22>
 80061f0:	08006a9c 	.word	0x08006a9c
 80061f4:	08006abc 	.word	0x08006abc
 80061f8:	08006a7c 	.word	0x08006a7c

080061fc <std>:
 80061fc:	2300      	movs	r3, #0
 80061fe:	b510      	push	{r4, lr}
 8006200:	4604      	mov	r4, r0
 8006202:	e9c0 3300 	strd	r3, r3, [r0]
 8006206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800620a:	6083      	str	r3, [r0, #8]
 800620c:	8181      	strh	r1, [r0, #12]
 800620e:	6643      	str	r3, [r0, #100]	; 0x64
 8006210:	81c2      	strh	r2, [r0, #14]
 8006212:	6183      	str	r3, [r0, #24]
 8006214:	4619      	mov	r1, r3
 8006216:	2208      	movs	r2, #8
 8006218:	305c      	adds	r0, #92	; 0x5c
 800621a:	f7fd fb51 	bl	80038c0 <memset>
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <std+0x38>)
 8006220:	6224      	str	r4, [r4, #32]
 8006222:	6263      	str	r3, [r4, #36]	; 0x24
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <std+0x3c>)
 8006226:	62a3      	str	r3, [r4, #40]	; 0x28
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <std+0x40>)
 800622a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800622c:	4b04      	ldr	r3, [pc, #16]	; (8006240 <std+0x44>)
 800622e:	6323      	str	r3, [r4, #48]	; 0x30
 8006230:	bd10      	pop	{r4, pc}
 8006232:	bf00      	nop
 8006234:	08006551 	.word	0x08006551
 8006238:	08006573 	.word	0x08006573
 800623c:	080065ab 	.word	0x080065ab
 8006240:	080065cf 	.word	0x080065cf

08006244 <_cleanup_r>:
 8006244:	4901      	ldr	r1, [pc, #4]	; (800624c <_cleanup_r+0x8>)
 8006246:	f000 b8af 	b.w	80063a8 <_fwalk_reent>
 800624a:	bf00      	nop
 800624c:	08006185 	.word	0x08006185

08006250 <__sfmoreglue>:
 8006250:	2268      	movs	r2, #104	; 0x68
 8006252:	b570      	push	{r4, r5, r6, lr}
 8006254:	1e4d      	subs	r5, r1, #1
 8006256:	4355      	muls	r5, r2
 8006258:	460e      	mov	r6, r1
 800625a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800625e:	f7ff fa6b 	bl	8005738 <_malloc_r>
 8006262:	4604      	mov	r4, r0
 8006264:	b140      	cbz	r0, 8006278 <__sfmoreglue+0x28>
 8006266:	2100      	movs	r1, #0
 8006268:	e9c0 1600 	strd	r1, r6, [r0]
 800626c:	300c      	adds	r0, #12
 800626e:	60a0      	str	r0, [r4, #8]
 8006270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006274:	f7fd fb24 	bl	80038c0 <memset>
 8006278:	4620      	mov	r0, r4
 800627a:	bd70      	pop	{r4, r5, r6, pc}

0800627c <__sfp_lock_acquire>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__sfp_lock_acquire+0x8>)
 800627e:	f000 b8b3 	b.w	80063e8 <__retarget_lock_acquire_recursive>
 8006282:	bf00      	nop
 8006284:	200002f1 	.word	0x200002f1

08006288 <__sfp_lock_release>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__sfp_lock_release+0x8>)
 800628a:	f000 b8ae 	b.w	80063ea <__retarget_lock_release_recursive>
 800628e:	bf00      	nop
 8006290:	200002f1 	.word	0x200002f1

08006294 <__sinit_lock_acquire>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__sinit_lock_acquire+0x8>)
 8006296:	f000 b8a7 	b.w	80063e8 <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	200002f2 	.word	0x200002f2

080062a0 <__sinit_lock_release>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__sinit_lock_release+0x8>)
 80062a2:	f000 b8a2 	b.w	80063ea <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	200002f2 	.word	0x200002f2

080062ac <__sinit>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	4604      	mov	r4, r0
 80062b0:	f7ff fff0 	bl	8006294 <__sinit_lock_acquire>
 80062b4:	69a3      	ldr	r3, [r4, #24]
 80062b6:	b11b      	cbz	r3, 80062c0 <__sinit+0x14>
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062bc:	f7ff bff0 	b.w	80062a0 <__sinit_lock_release>
 80062c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062c4:	6523      	str	r3, [r4, #80]	; 0x50
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <__sinit+0x68>)
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <__sinit+0x6c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	bf08      	it	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	4620      	mov	r0, r4
 80062d6:	bf08      	it	eq
 80062d8:	61a3      	streq	r3, [r4, #24]
 80062da:	f000 f81f 	bl	800631c <__sfp>
 80062de:	6060      	str	r0, [r4, #4]
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f81b 	bl	800631c <__sfp>
 80062e6:	60a0      	str	r0, [r4, #8]
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 f817 	bl	800631c <__sfp>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2104      	movs	r1, #4
 80062f2:	60e0      	str	r0, [r4, #12]
 80062f4:	6860      	ldr	r0, [r4, #4]
 80062f6:	f7ff ff81 	bl	80061fc <std>
 80062fa:	2201      	movs	r2, #1
 80062fc:	2109      	movs	r1, #9
 80062fe:	68a0      	ldr	r0, [r4, #8]
 8006300:	f7ff ff7c 	bl	80061fc <std>
 8006304:	2202      	movs	r2, #2
 8006306:	2112      	movs	r1, #18
 8006308:	68e0      	ldr	r0, [r4, #12]
 800630a:	f7ff ff77 	bl	80061fc <std>
 800630e:	2301      	movs	r3, #1
 8006310:	61a3      	str	r3, [r4, #24]
 8006312:	e7d1      	b.n	80062b8 <__sinit+0xc>
 8006314:	08006700 	.word	0x08006700
 8006318:	08006245 	.word	0x08006245

0800631c <__sfp>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	4607      	mov	r7, r0
 8006320:	f7ff ffac 	bl	800627c <__sfp_lock_acquire>
 8006324:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <__sfp+0x84>)
 8006326:	681e      	ldr	r6, [r3, #0]
 8006328:	69b3      	ldr	r3, [r6, #24]
 800632a:	b913      	cbnz	r3, 8006332 <__sfp+0x16>
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ffbd 	bl	80062ac <__sinit>
 8006332:	3648      	adds	r6, #72	; 0x48
 8006334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006338:	3b01      	subs	r3, #1
 800633a:	d503      	bpl.n	8006344 <__sfp+0x28>
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	b30b      	cbz	r3, 8006384 <__sfp+0x68>
 8006340:	6836      	ldr	r6, [r6, #0]
 8006342:	e7f7      	b.n	8006334 <__sfp+0x18>
 8006344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006348:	b9d5      	cbnz	r5, 8006380 <__sfp+0x64>
 800634a:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <__sfp+0x88>)
 800634c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006350:	60e3      	str	r3, [r4, #12]
 8006352:	6665      	str	r5, [r4, #100]	; 0x64
 8006354:	f000 f847 	bl	80063e6 <__retarget_lock_init_recursive>
 8006358:	f7ff ff96 	bl	8006288 <__sfp_lock_release>
 800635c:	2208      	movs	r2, #8
 800635e:	4629      	mov	r1, r5
 8006360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006368:	6025      	str	r5, [r4, #0]
 800636a:	61a5      	str	r5, [r4, #24]
 800636c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006370:	f7fd faa6 	bl	80038c0 <memset>
 8006374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800637c:	4620      	mov	r0, r4
 800637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006380:	3468      	adds	r4, #104	; 0x68
 8006382:	e7d9      	b.n	8006338 <__sfp+0x1c>
 8006384:	2104      	movs	r1, #4
 8006386:	4638      	mov	r0, r7
 8006388:	f7ff ff62 	bl	8006250 <__sfmoreglue>
 800638c:	4604      	mov	r4, r0
 800638e:	6030      	str	r0, [r6, #0]
 8006390:	2800      	cmp	r0, #0
 8006392:	d1d5      	bne.n	8006340 <__sfp+0x24>
 8006394:	f7ff ff78 	bl	8006288 <__sfp_lock_release>
 8006398:	230c      	movs	r3, #12
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	e7ee      	b.n	800637c <__sfp+0x60>
 800639e:	bf00      	nop
 80063a0:	08006700 	.word	0x08006700
 80063a4:	ffff0001 	.word	0xffff0001

080063a8 <_fwalk_reent>:
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	4606      	mov	r6, r0
 80063ae:	4688      	mov	r8, r1
 80063b0:	2700      	movs	r7, #0
 80063b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063ba:	f1b9 0901 	subs.w	r9, r9, #1
 80063be:	d505      	bpl.n	80063cc <_fwalk_reent+0x24>
 80063c0:	6824      	ldr	r4, [r4, #0]
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	d1f7      	bne.n	80063b6 <_fwalk_reent+0xe>
 80063c6:	4638      	mov	r0, r7
 80063c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063cc:	89ab      	ldrh	r3, [r5, #12]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d907      	bls.n	80063e2 <_fwalk_reent+0x3a>
 80063d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063d6:	3301      	adds	r3, #1
 80063d8:	d003      	beq.n	80063e2 <_fwalk_reent+0x3a>
 80063da:	4629      	mov	r1, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	47c0      	blx	r8
 80063e0:	4307      	orrs	r7, r0
 80063e2:	3568      	adds	r5, #104	; 0x68
 80063e4:	e7e9      	b.n	80063ba <_fwalk_reent+0x12>

080063e6 <__retarget_lock_init_recursive>:
 80063e6:	4770      	bx	lr

080063e8 <__retarget_lock_acquire_recursive>:
 80063e8:	4770      	bx	lr

080063ea <__retarget_lock_release_recursive>:
 80063ea:	4770      	bx	lr

080063ec <__swhatbuf_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460e      	mov	r6, r1
 80063f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f4:	4614      	mov	r4, r2
 80063f6:	2900      	cmp	r1, #0
 80063f8:	461d      	mov	r5, r3
 80063fa:	b096      	sub	sp, #88	; 0x58
 80063fc:	da08      	bge.n	8006410 <__swhatbuf_r+0x24>
 80063fe:	2200      	movs	r2, #0
 8006400:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	061a      	lsls	r2, r3, #24
 8006408:	d410      	bmi.n	800642c <__swhatbuf_r+0x40>
 800640a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800640e:	e00e      	b.n	800642e <__swhatbuf_r+0x42>
 8006410:	466a      	mov	r2, sp
 8006412:	f000 f903 	bl	800661c <_fstat_r>
 8006416:	2800      	cmp	r0, #0
 8006418:	dbf1      	blt.n	80063fe <__swhatbuf_r+0x12>
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006420:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006424:	425a      	negs	r2, r3
 8006426:	415a      	adcs	r2, r3
 8006428:	602a      	str	r2, [r5, #0]
 800642a:	e7ee      	b.n	800640a <__swhatbuf_r+0x1e>
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	2000      	movs	r0, #0
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	b016      	add	sp, #88	; 0x58
 8006434:	bd70      	pop	{r4, r5, r6, pc}
	...

08006438 <__smakebuf_r>:
 8006438:	898b      	ldrh	r3, [r1, #12]
 800643a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800643c:	079d      	lsls	r5, r3, #30
 800643e:	4606      	mov	r6, r0
 8006440:	460c      	mov	r4, r1
 8006442:	d507      	bpl.n	8006454 <__smakebuf_r+0x1c>
 8006444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	2301      	movs	r3, #1
 800644e:	6163      	str	r3, [r4, #20]
 8006450:	b002      	add	sp, #8
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	466a      	mov	r2, sp
 8006456:	ab01      	add	r3, sp, #4
 8006458:	f7ff ffc8 	bl	80063ec <__swhatbuf_r>
 800645c:	9900      	ldr	r1, [sp, #0]
 800645e:	4605      	mov	r5, r0
 8006460:	4630      	mov	r0, r6
 8006462:	f7ff f969 	bl	8005738 <_malloc_r>
 8006466:	b948      	cbnz	r0, 800647c <__smakebuf_r+0x44>
 8006468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d4ef      	bmi.n	8006450 <__smakebuf_r+0x18>
 8006470:	f023 0303 	bic.w	r3, r3, #3
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	e7e3      	b.n	8006444 <__smakebuf_r+0xc>
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <__smakebuf_r+0x7c>)
 800647e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	6020      	str	r0, [r4, #0]
 8006484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	9b00      	ldr	r3, [sp, #0]
 800648c:	6120      	str	r0, [r4, #16]
 800648e:	6163      	str	r3, [r4, #20]
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	b15b      	cbz	r3, 80064ac <__smakebuf_r+0x74>
 8006494:	4630      	mov	r0, r6
 8006496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800649a:	f000 f8d1 	bl	8006640 <_isatty_r>
 800649e:	b128      	cbz	r0, 80064ac <__smakebuf_r+0x74>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	89a0      	ldrh	r0, [r4, #12]
 80064ae:	4305      	orrs	r5, r0
 80064b0:	81a5      	strh	r5, [r4, #12]
 80064b2:	e7cd      	b.n	8006450 <__smakebuf_r+0x18>
 80064b4:	08006245 	.word	0x08006245

080064b8 <_malloc_usable_size_r>:
 80064b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064bc:	1f18      	subs	r0, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfbc      	itt	lt
 80064c2:	580b      	ldrlt	r3, [r1, r0]
 80064c4:	18c0      	addlt	r0, r0, r3
 80064c6:	4770      	bx	lr

080064c8 <_raise_r>:
 80064c8:	291f      	cmp	r1, #31
 80064ca:	b538      	push	{r3, r4, r5, lr}
 80064cc:	4604      	mov	r4, r0
 80064ce:	460d      	mov	r5, r1
 80064d0:	d904      	bls.n	80064dc <_raise_r+0x14>
 80064d2:	2316      	movs	r3, #22
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064de:	b112      	cbz	r2, 80064e6 <_raise_r+0x1e>
 80064e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064e4:	b94b      	cbnz	r3, 80064fa <_raise_r+0x32>
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 f830 	bl	800654c <_getpid_r>
 80064ec:	462a      	mov	r2, r5
 80064ee:	4601      	mov	r1, r0
 80064f0:	4620      	mov	r0, r4
 80064f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f6:	f000 b817 	b.w	8006528 <_kill_r>
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d00a      	beq.n	8006514 <_raise_r+0x4c>
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	d103      	bne.n	800650a <_raise_r+0x42>
 8006502:	2316      	movs	r3, #22
 8006504:	6003      	str	r3, [r0, #0]
 8006506:	2001      	movs	r0, #1
 8006508:	e7e7      	b.n	80064da <_raise_r+0x12>
 800650a:	2400      	movs	r4, #0
 800650c:	4628      	mov	r0, r5
 800650e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006512:	4798      	blx	r3
 8006514:	2000      	movs	r0, #0
 8006516:	e7e0      	b.n	80064da <_raise_r+0x12>

08006518 <raise>:
 8006518:	4b02      	ldr	r3, [pc, #8]	; (8006524 <raise+0xc>)
 800651a:	4601      	mov	r1, r0
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	f7ff bfd3 	b.w	80064c8 <_raise_r>
 8006522:	bf00      	nop
 8006524:	2000001c 	.word	0x2000001c

08006528 <_kill_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	2300      	movs	r3, #0
 800652c:	4d06      	ldr	r5, [pc, #24]	; (8006548 <_kill_r+0x20>)
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	4611      	mov	r1, r2
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	f7fb f83f 	bl	80015b8 <_kill>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	d102      	bne.n	8006544 <_kill_r+0x1c>
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	b103      	cbz	r3, 8006544 <_kill_r+0x1c>
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	bf00      	nop
 8006548:	200002ec 	.word	0x200002ec

0800654c <_getpid_r>:
 800654c:	f7fb b82d 	b.w	80015aa <_getpid>

08006550 <__sread>:
 8006550:	b510      	push	{r4, lr}
 8006552:	460c      	mov	r4, r1
 8006554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006558:	f000 f894 	bl	8006684 <_read_r>
 800655c:	2800      	cmp	r0, #0
 800655e:	bfab      	itete	ge
 8006560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006562:	89a3      	ldrhlt	r3, [r4, #12]
 8006564:	181b      	addge	r3, r3, r0
 8006566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800656a:	bfac      	ite	ge
 800656c:	6563      	strge	r3, [r4, #84]	; 0x54
 800656e:	81a3      	strhlt	r3, [r4, #12]
 8006570:	bd10      	pop	{r4, pc}

08006572 <__swrite>:
 8006572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	461f      	mov	r7, r3
 8006578:	898b      	ldrh	r3, [r1, #12]
 800657a:	4605      	mov	r5, r0
 800657c:	05db      	lsls	r3, r3, #23
 800657e:	460c      	mov	r4, r1
 8006580:	4616      	mov	r6, r2
 8006582:	d505      	bpl.n	8006590 <__swrite+0x1e>
 8006584:	2302      	movs	r3, #2
 8006586:	2200      	movs	r2, #0
 8006588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658c:	f000 f868 	bl	8006660 <_lseek_r>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	4632      	mov	r2, r6
 8006594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	4628      	mov	r0, r5
 800659c:	463b      	mov	r3, r7
 800659e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	f000 b817 	b.w	80065d8 <_write_r>

080065aa <__sseek>:
 80065aa:	b510      	push	{r4, lr}
 80065ac:	460c      	mov	r4, r1
 80065ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b2:	f000 f855 	bl	8006660 <_lseek_r>
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	bf15      	itete	ne
 80065bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80065be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065c6:	81a3      	strheq	r3, [r4, #12]
 80065c8:	bf18      	it	ne
 80065ca:	81a3      	strhne	r3, [r4, #12]
 80065cc:	bd10      	pop	{r4, pc}

080065ce <__sclose>:
 80065ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d2:	f000 b813 	b.w	80065fc <_close_r>
	...

080065d8 <_write_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	2200      	movs	r2, #0
 80065e2:	4d05      	ldr	r5, [pc, #20]	; (80065f8 <_write_r+0x20>)
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f7fb f81d 	bl	8001626 <_write>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_write_r+0x1e>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_write_r+0x1e>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	200002ec 	.word	0x200002ec

080065fc <_close_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	2300      	movs	r3, #0
 8006600:	4d05      	ldr	r5, [pc, #20]	; (8006618 <_close_r+0x1c>)
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fb f829 	bl	800165e <_close>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_close_r+0x1a>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_close_r+0x1a>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	200002ec 	.word	0x200002ec

0800661c <_fstat_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	2300      	movs	r3, #0
 8006620:	4d06      	ldr	r5, [pc, #24]	; (800663c <_fstat_r+0x20>)
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	f7fb f823 	bl	8001674 <_fstat>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d102      	bne.n	8006638 <_fstat_r+0x1c>
 8006632:	682b      	ldr	r3, [r5, #0]
 8006634:	b103      	cbz	r3, 8006638 <_fstat_r+0x1c>
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	bf00      	nop
 800663c:	200002ec 	.word	0x200002ec

08006640 <_isatty_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	2300      	movs	r3, #0
 8006644:	4d05      	ldr	r5, [pc, #20]	; (800665c <_isatty_r+0x1c>)
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	f7fb f821 	bl	8001692 <_isatty>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_isatty_r+0x1a>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_isatty_r+0x1a>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	200002ec 	.word	0x200002ec

08006660 <_lseek_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	2200      	movs	r2, #0
 800666a:	4d05      	ldr	r5, [pc, #20]	; (8006680 <_lseek_r+0x20>)
 800666c:	602a      	str	r2, [r5, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f7fb f819 	bl	80016a6 <_lseek>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_lseek_r+0x1e>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_lseek_r+0x1e>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	200002ec 	.word	0x200002ec

08006684 <_read_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4604      	mov	r4, r0
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	2200      	movs	r2, #0
 800668e:	4d05      	ldr	r5, [pc, #20]	; (80066a4 <_read_r+0x20>)
 8006690:	602a      	str	r2, [r5, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f7fa ffaa 	bl	80015ec <_read>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_read_r+0x1e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_read_r+0x1e>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	200002ec 	.word	0x200002ec

080066a8 <_init>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr

080066b4 <_fini>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr
