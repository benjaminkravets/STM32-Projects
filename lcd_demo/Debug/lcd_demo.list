
lcd_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007410  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007520  08007520  00017520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800793c  0800793c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800793c  0800793c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800793c  0800793c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001ec  08007b30  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007b30  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd90  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1e  00000000  00000000  0002bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0002dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  0002e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018764  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9a9  00000000  00000000  00047e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0ea  00000000  00000000  000567c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e28af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be4  00000000  00000000  000e2900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007508 	.word	0x08007508

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007508 	.word	0x08007508

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <HD44780_Init+0xec>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HD44780_Init+0xf0>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <HD44780_Init+0xf4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HD44780_Init+0xec>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d907      	bls.n	8000b5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HD44780_Init+0xf4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HD44780_Init+0xf4>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e006      	b.n	8000b6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HD44780_Init+0xf4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HD44780_Init+0xf4>)
 8000b68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000b6a:	f000 f985 	bl	8000e78 <DelayInit>
  HAL_Delay(50);
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f000 ffca 	bl	8001b08 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HD44780_Init+0xf0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f943 	bl	8000e04 <ExpanderWrite>
  HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 ffc1 	bl	8001b08 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000b86:	2030      	movs	r0, #48	; 0x30
 8000b88:	f000 f92b 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b8c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b90:	f000 f99a 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000b94:	2030      	movs	r0, #48	; 0x30
 8000b96:	f000 f924 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b9a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b9e:	f000 f993 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ba2:	2030      	movs	r0, #48	; 0x30
 8000ba4:	f000 f91d 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000ba8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bac:	f000 f98c 	bl	8000ec8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f000 f916 	bl	8000de2 <Write4Bits>
  DelayUS(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f000 f986 	bl	8000ec8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HD44780_Init+0xf4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f8ce 	bl	8000d68 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HD44780_Init+0xf8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000bd2:	f000 f875 	bl	8000cc0 <HD44780_Display>
  HD44780_Clear();
 8000bd6:	f000 f82b 	bl	8000c30 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HD44780_Init+0xfc>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HD44780_Init+0xfc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8bc 	bl	8000d68 <SendCommand>
  DelayUS(4500);
 8000bf0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bf4:	f000 f968 	bl	8000ec8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000bf8:	490b      	ldr	r1, [pc, #44]	; (8000c28 <HD44780_Init+0x100>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f876 	bl	8000cec <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c00:	490a      	ldr	r1, [pc, #40]	; (8000c2c <HD44780_Init+0x104>)
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 f872 	bl	8000cec <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c08:	f000 f81d 	bl	8000c46 <HD44780_Home>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000020b 	.word	0x2000020b
 8000c18:	2000020c 	.word	0x2000020c
 8000c1c:	20000208 	.word	0x20000208
 8000c20:	20000209 	.word	0x20000209
 8000c24:	2000020a 	.word	0x2000020a
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f897 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3e:	f000 f943 	bl	8000ec8 <DelayUS>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HD44780_Home>:

void HD44780_Home()
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 f88c 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c54:	f000 f938 	bl	8000ec8 <DelayUS>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HD44780_SetCursor+0x5c>)
 8000c6e:	f107 0408 	add.w	r4, r7, #8
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d303      	bcc.n	8000c8a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3318      	adds	r3, #24
 8000c90:	443b      	add	r3, r7
 8000c92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f85d 	bl	8000d68 <SendCommand>
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08007520 	.word	0x08007520
 8000cbc:	2000020b 	.word	0x2000020b

08000cc0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HD44780_Display+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f843 	bl	8000d68 <SendCommand>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000209 	.word	0x20000209

08000cec <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f82a 	bl	8000d68 <SendCommand>
  for (int i=0; i<8; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e009      	b.n	8000d2e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f82e 	bl	8000d84 <SendChar>
  for (int i=0; i<8; i++)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	ddf2      	ble.n	8000d1a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d46:	e006      	b.n	8000d56 <HD44780_PrintStr+0x18>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f817 	bl	8000d84 <SendChar>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f4      	bne.n	8000d48 <HD44780_PrintStr+0xa>
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f812 	bl	8000da0 <Send>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2101      	movs	r1, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f804 	bl	8000da0 <Send>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f80b 	bl	8000de2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f804 	bl	8000de2 <Write4Bits>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f808 	bl	8000e04 <ExpanderWrite>
  PulseEnable(value);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f820 	bl	8000e3c <PulseEnable>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <ExpanderWrite+0x30>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e1a:	f107 020f 	add.w	r2, r7, #15
 8000e1e:	230a      	movs	r3, #10
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	214e      	movs	r1, #78	; 0x4e
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <ExpanderWrite+0x34>)
 8000e28:	f001 fa3e 	bl	80022a8 <HAL_I2C_Master_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000020c 	.word	0x2000020c
 8000e38:	20000210 	.word	0x20000210

08000e3c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffd8 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e54:	2014      	movs	r0, #20
 8000e56:	f000 f837 	bl	8000ec8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffce 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e68:	2014      	movs	r0, #20
 8000e6a:	f000 f82d 	bl	8000ec8 <DelayUS>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <DelayInit>:

static void DelayInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <DelayInit+0x48>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <DelayInit+0x48>)
 8000e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e86:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <DelayInit+0x48>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <DelayInit+0x48>)
 8000e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e92:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <DelayInit+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <DelayInit+0x4c>)
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <DelayInit+0x4c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <DelayInit+0x4c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <DelayInit+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000eb2:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb4:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb6:	bf00      	nop
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000edf0 	.word	0xe000edf0
 8000ec4:	e0001000 	.word	0xe0001000

08000ec8 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <DelayUS+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <DelayUS+0x44>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9a      	lsrs	r2, r3, #18
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <DelayUS+0x48>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <DelayUS+0x48>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f6      	bhi.n	8000eea <DelayUS+0x22>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	e0001000 	.word	0xe0001000

08000f14 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2275      	movs	r2, #117	; 0x75
 8000f2c:	21d0      	movs	r1, #208	; 0xd0
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f30:	f001 fbb2 	bl	8002698 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b68      	cmp	r3, #104	; 0x68
 8000f38:	d13b      	bne.n	8000fb2 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	226b      	movs	r2, #107	; 0x6b
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f54:	f001 faa6 	bl	80024a4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2219      	movs	r2, #25
 8000f6e:	21d0      	movs	r1, #208	; 0xd0
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f72:	f001 fa97 	bl	80024a4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dbb      	adds	r3, r7, #6
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	221c      	movs	r2, #28
 8000f8c:	21d0      	movs	r1, #208	; 0xd0
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f90:	f001 fa88 	bl	80024a4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	221b      	movs	r2, #27
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MPU6050_Init+0xa8>)
 8000fae:	f001 fa79 	bl	80024a4 <HAL_I2C_Mem_Write>
	}

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000264 	.word	0x20000264

08000fc0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2306      	movs	r3, #6
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	223b      	movs	r2, #59	; 0x3b
 8000fd8:	21d0      	movs	r1, #208	; 0xd0
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MPU6050_Read_Accel+0xd8>)
 8000fdc:	f001 fb5c 	bl	8002698 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000fe0:	783b      	ldrb	r3, [r7, #0]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001002:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001014:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f1 	bl	8000404 <__aeabi_i2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001028:	f7ff fb80 	bl	800072c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd28 	bl	8000a88 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MPU6050_Read_Accel+0xec>)
 800103c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f9dd 	bl	8000404 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001050:	f7ff fb6c 	bl	800072c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd14 	bl	8000a88 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MPU6050_Read_Accel+0xf0>)
 8001064:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9c9 	bl	8000404 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001078:	f7ff fb58 	bl	800072c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <MPU6050_Read_Accel+0xf4>)
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000264 	.word	0x20000264
 800109c:	20000300 	.word	0x20000300
 80010a0:	20000302 	.word	0x20000302
 80010a4:	20000304 	.word	0x20000304
 80010a8:	40d00000 	.word	0x40d00000
 80010ac:	2000030c 	.word	0x2000030c
 80010b0:	20000310 	.word	0x20000310
 80010b4:	20000314 	.word	0x20000314

080010b8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2306      	movs	r3, #6
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	463b      	mov	r3, r7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2243      	movs	r2, #67	; 0x43
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	4831      	ldr	r0, [pc, #196]	; (8001198 <MPU6050_Read_Gyro+0xe0>)
 80010d4:	f001 fae0 	bl	8002698 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	787b      	ldrb	r3, [r7, #1]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 80010fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 800110c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f975 	bl	8000404 <__aeabi_i2d>
 800111a:	a31d      	add	r3, pc, #116	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fb04 	bl	800072c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcac 	bl	8000a88 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <MPU6050_Read_Gyro+0xf0>)
 8001134:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	a313      	add	r3, pc, #76	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff faf0 	bl	800072c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc98 	bl	8000a88 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <MPU6050_Read_Gyro+0xf4>)
 800115c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a309      	add	r3, pc, #36	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc84 	bl	8000a88 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MPU6050_Read_Gyro+0xf8>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40606000 	.word	0x40606000
 8001198:	20000264 	.word	0x20000264
 800119c:	20000306 	.word	0x20000306
 80011a0:	20000308 	.word	0x20000308
 80011a4:	2000030a 	.word	0x2000030a
 80011a8:	20000318 	.word	0x20000318
 80011ac:	2000031c 	.word	0x2000031c
 80011b0:	20000320 	.word	0x20000320

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  int32_t CH1_DC = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t CH2_DC = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  int32_t CH3_DC = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  int32_t CH4_DC = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  int32_t quar_const = 16383;
 80011ca:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011ce:	617b      	str	r3, [r7, #20]
  int32_t final_pwm = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  char snum[5];
  float sinatra = -1;
 80011d4:	4b65      	ldr	r3, [pc, #404]	; (800136c <main+0x1b8>)
 80011d6:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f000 fc34 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f8d8 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 fa0e 	bl	8001600 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011e4:	f000 f91a 	bl	800141c <MX_I2C1_Init>
  MX_I2C2_Init();
 80011e8:	f000 f946 	bl	8001478 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011ec:	f000 f972 	bl	80014d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011f0:	2100      	movs	r1, #0
 80011f2:	485f      	ldr	r0, [pc, #380]	; (8001370 <main+0x1bc>)
 80011f4:	f002 fd42 	bl	8003c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011f8:	2104      	movs	r1, #4
 80011fa:	485d      	ldr	r0, [pc, #372]	; (8001370 <main+0x1bc>)
 80011fc:	f002 fd3e 	bl	8003c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001200:	2108      	movs	r1, #8
 8001202:	485b      	ldr	r0, [pc, #364]	; (8001370 <main+0x1bc>)
 8001204:	f002 fd3a 	bl	8003c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001208:	210c      	movs	r1, #12
 800120a:	4859      	ldr	r0, [pc, #356]	; (8001370 <main+0x1bc>)
 800120c:	f002 fd36 	bl	8003c7c <HAL_TIM_PWM_Start>
  HD44780_Init(2);
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fc89 	bl	8000b28 <HD44780_Init>
  MPU6050_Init();
 8001216:	f7ff fe7d 	bl	8000f14 <MPU6050_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // read the Accelerometer and Gyro values

	  MPU6050_Read_Accel();
 800121a:	f7ff fed1 	bl	8000fc0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 800121e:	f7ff ff4b 	bl	80010b8 <MPU6050_Read_Gyro>

	  HD44780_Clear();
 8001222:	f7ff fd05 	bl	8000c30 <HD44780_Clear>



	  HD44780_SetCursor(0,0);
 8001226:	2100      	movs	r1, #0
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fd17 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ax);
 800122e:	4b51      	ldr	r3, [pc, #324]	; (8001374 <main+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8f8 	bl	8000428 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	1d38      	adds	r0, r7, #4
 800123e:	e9cd 2300 	strd	r2, r3, [sp]
 8001242:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <main+0x1c4>)
 8001244:	2107      	movs	r1, #7
 8001246:	f003 fed1 	bl	8004fec <sniprintf>
	  HD44780_PrintStr(snum);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd76 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(5,0);
 8001252:	2100      	movs	r1, #0
 8001254:	2005      	movs	r0, #5
 8001256:	f7ff fd01 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ay);
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <main+0x1c8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f8e2 	bl	8000428 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	1d38      	adds	r0, r7, #4
 800126a:	e9cd 2300 	strd	r2, r3, [sp]
 800126e:	4a42      	ldr	r2, [pc, #264]	; (8001378 <main+0x1c4>)
 8001270:	2107      	movs	r1, #7
 8001272:	f003 febb 	bl	8004fec <sniprintf>
	  HD44780_PrintStr(snum);
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fd60 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(11,0);
 800127e:	2100      	movs	r1, #0
 8001280:	200b      	movs	r0, #11
 8001282:	f7ff fceb 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Az);
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <main+0x1cc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8cc 	bl	8000428 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	1d38      	adds	r0, r7, #4
 8001296:	e9cd 2300 	strd	r2, r3, [sp]
 800129a:	4a37      	ldr	r2, [pc, #220]	; (8001378 <main+0x1c4>)
 800129c:	2107      	movs	r1, #7
 800129e:	f003 fea5 	bl	8004fec <sniprintf>
	  HD44780_PrintStr(snum);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fd4a 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(0,1);
 80012aa:	2101      	movs	r1, #1
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fcd5 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%d", Accel_X_RAW);
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <main+0x1d0>)
 80012b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b8:	1d38      	adds	r0, r7, #4
 80012ba:	4a33      	ldr	r2, [pc, #204]	; (8001388 <main+0x1d4>)
 80012bc:	2107      	movs	r1, #7
 80012be:	f003 fe95 	bl	8004fec <sniprintf>
	  HD44780_PrintStr(snum);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd3a 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(8,1);
 80012ca:	2101      	movs	r1, #1
 80012cc:	2008      	movs	r0, #8
 80012ce:	f7ff fcc5 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%d", Accel_Y_RAW);
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <main+0x1d8>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	1d38      	adds	r0, r7, #4
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <main+0x1d4>)
 80012dc:	2107      	movs	r1, #7
 80012de:	f003 fe85 	bl	8004fec <sniprintf>
	  HD44780_PrintStr(snum);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd2a 	bl	8000d3e <HD44780_PrintStr>





	  HAL_Delay(100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f000 fc0c 	bl	8001b08 <HAL_Delay>
	  HD44780_PrintStr(snum);

	*/


	  TIM2->CCR1 = (32767 + ((Accel_X_RAW - Accel_Y_RAW) * 4));
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <main+0x1d0>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <main+0x1d8>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001306:	337f      	adds	r3, #127	; 0x7f
 8001308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130c:	6353      	str	r3, [r2, #52]	; 0x34

	  TIM2->CCR2 = (32767 + ((-Accel_X_RAW - Accel_Y_RAW) * 4));
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <main+0x1d0>)
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	425b      	negs	r3, r3
 8001316:	4a1d      	ldr	r2, [pc, #116]	; (800138c <main+0x1d8>)
 8001318:	f9b2 2000 	ldrsh.w	r2, [r2]
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001324:	337f      	adds	r3, #127	; 0x7f
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	6393      	str	r3, [r2, #56]	; 0x38

	  TIM2->CCR3 = (32767 + ((Accel_X_RAW + Accel_Y_RAW) * 4));
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <main+0x1d0>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	461a      	mov	r2, r3
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <main+0x1d8>)
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001342:	337f      	adds	r3, #127	; 0x7f
 8001344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001348:	63d3      	str	r3, [r2, #60]	; 0x3c

	  TIM2->CCR4 = (32767 + ((-Accel_X_RAW + Accel_Y_RAW) * 4));
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <main+0x1d8>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	461a      	mov	r2, r3
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <main+0x1d0>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001360:	337f      	adds	r3, #127	; 0x7f
 8001362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
	  MPU6050_Read_Accel();
 8001368:	e757      	b.n	800121a <main+0x66>
 800136a:	bf00      	nop
 800136c:	bf800000 	.word	0xbf800000
 8001370:	200002b8 	.word	0x200002b8
 8001374:	2000030c 	.word	0x2000030c
 8001378:	08007530 	.word	0x08007530
 800137c:	20000310 	.word	0x20000310
 8001380:	20000314 	.word	0x20000314
 8001384:	20000300 	.word	0x20000300
 8001388:	08007538 	.word	0x08007538
 800138c:	20000302 	.word	0x20000302

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 f9bc 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 ffa1 	bl	8003320 <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e4:	f000 f93a 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2302      	movs	r3, #2
 80013ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fa0e 	bl	8003824 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800140e:	f000 f925 	bl	800165c <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	; 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_I2C1_Init+0x50>)
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <MX_I2C1_Init+0x54>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_I2C1_Init+0x50>)
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_I2C1_Init+0x58>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_I2C1_Init+0x50>)
 800143a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_I2C1_Init+0x50>)
 800145a:	f000 fde1 	bl	8002020 <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 f8fa 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000210 	.word	0x20000210
 8001470:	40005400 	.word	0x40005400
 8001474:	000186a0 	.word	0x000186a0

08001478 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C2_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_I2C2_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_I2C2_Init+0x58>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C2_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_I2C2_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014b6:	f000 fdb3 	bl	8002020 <HAL_I2C_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014c0:	f000 f8cc 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000264 	.word	0x20000264
 80014cc:	40005800 	.word	0x40005800
 80014d0:	000186a0 	.word	0x000186a0

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001504:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <MX_TIM2_Init+0x128>)
 8001506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <MX_TIM2_Init+0x128>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <MX_TIM2_Init+0x128>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <MX_TIM2_Init+0x128>)
 800151a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <MX_TIM2_Init+0x128>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_TIM2_Init+0x128>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800152c:	4833      	ldr	r0, [pc, #204]	; (80015fc <MX_TIM2_Init+0x128>)
 800152e:	f002 fafd 	bl	8003b2c <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001538:	f000 f890 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	4619      	mov	r1, r3
 8001548:	482c      	ldr	r0, [pc, #176]	; (80015fc <MX_TIM2_Init+0x128>)
 800154a:	f002 fcf7 	bl	8003f3c <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001554:	f000 f882 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001558:	4828      	ldr	r0, [pc, #160]	; (80015fc <MX_TIM2_Init+0x128>)
 800155a:	f002 fb36 	bl	8003bca <HAL_TIM_PWM_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001564:	f000 f87a 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	4619      	mov	r1, r3
 8001576:	4821      	ldr	r0, [pc, #132]	; (80015fc <MX_TIM2_Init+0x128>)
 8001578:	f003 f848 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001582:	f000 f86b 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <MX_TIM2_Init+0x128>)
 800159e:	f002 fc0f 	bl	8003dc0 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015a8:	f000 f858 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2204      	movs	r2, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4812      	ldr	r0, [pc, #72]	; (80015fc <MX_TIM2_Init+0x128>)
 80015b4:	f002 fc04 	bl	8003dc0 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015be:	f000 f84d 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2208      	movs	r2, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_TIM2_Init+0x128>)
 80015ca:	f002 fbf9 	bl	8003dc0 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80015d4:	f000 f842 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	220c      	movs	r2, #12
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <MX_TIM2_Init+0x128>)
 80015e0:	f002 fbee 	bl	8003dc0 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80015ea:	f000 f837 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <MX_TIM2_Init+0x128>)
 80015f0:	f000 f8e4 	bl	80017bc <HAL_TIM_MspPostInit>

}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200002b8 	.word	0x200002b8

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_GPIO_Init+0x58>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <MX_GPIO_Init+0x58>)
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_GPIO_Init+0x58>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_GPIO_Init+0x58>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <MX_GPIO_Init+0x58>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6193      	str	r3, [r2, #24]
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_GPIO_Init+0x58>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_GPIO_Init+0x58>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a07      	ldr	r2, [pc, #28]	; (8001658 <MX_GPIO_Init+0x58>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <MX_GPIO_Init+0x58>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_MspInit+0x40>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_MspInit+0x40>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_MspInit+0x40>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_MspInit+0x40>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_MspInit+0x40>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_MspInit+0x40>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <HAL_I2C_MspInit+0xc8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d124      	bne.n	8001716 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e4:	23c0      	movs	r3, #192	; 0xc0
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4821      	ldr	r0, [pc, #132]	; (800177c <HAL_I2C_MspInit+0xd0>)
 80016f8:	f000 fb0e 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 8001702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001706:	61d3      	str	r3, [r2, #28]
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001714:	e029      	b.n	800176a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_I2C_MspInit+0xd4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d124      	bne.n	800176a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001738:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173e:	2312      	movs	r3, #18
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4619      	mov	r1, r3
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <HAL_I2C_MspInit+0xd0>)
 800174e:	f000 fae3 	bl	8001d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_I2C_MspInit+0xcc>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40021000 	.word	0x40021000
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40005800 	.word	0x40005800

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001794:	d10b      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_TIM_Base_MspInit+0x34>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_TIM_Base_MspInit+0x34>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_TIM_Base_MspInit+0x34>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017da:	d117      	bne.n	800180c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_TIM_MspPostInit+0x58>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <HAL_TIM_MspPostInit+0x58>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_TIM_MspPostInit+0x58>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017f4:	230f      	movs	r3, #15
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	4804      	ldr	r0, [pc, #16]	; (8001818 <HAL_TIM_MspPostInit+0x5c>)
 8001808:	f000 fa86 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000
 8001818:	40010800 	.word	0x40010800

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001862:	f000 f935 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
	return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001882:	f002 ff21 	bl	80046c8 <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
	return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
	}

return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
	}
	return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001944:	605a      	str	r2, [r3, #4]
	return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <_isatty>:

int _isatty(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
	return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f002 fe8a 	bl	80046c8 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20005000 	.word	0x20005000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	20000324 	.word	0x20000324
 80019e8:	20000340 	.word	0x20000340

080019ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1e:	f7ff ffe5 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f002 fe57 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a26:	f7ff fbc5 	bl	80011b4 <main>
  bx lr
 8001a2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001a34:	08007944 	.word	0x08007944
  ldr r2, =_sbss
 8001a38:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001a3c:	2000033c 	.word	0x2000033c

08001a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_2_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_Init+0x28>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_Init+0x28>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f92b 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 f808 	bl	8001a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fe02 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x54>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x58>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f935 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 f90b 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <HAL_InitTick+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000010 	.word	0x20000010
 8001ac8:	20000018 	.word	0x20000018
 8001acc:	20000014 	.word	0x20000014

08001ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <HAL_IncTick+0x20>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000018 	.word	0x20000018
 8001af0:	20000328 	.word	0x20000328

08001af4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000328 	.word	0x20000328

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffe0 	bl	8001af4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000018 	.word	0x20000018

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff90 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff49 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff5e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff90 	bl	8001c08 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5f 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffb0 	bl	8001c6c <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e169      	b.n	8002000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8158 	bne.w	8001ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a9a      	ldr	r2, [pc, #616]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a90      	ldr	r2, [pc, #576]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a79      	ldr	r2, [pc, #484]	; (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80b1 	beq.w	8001ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3f      	ldr	r2, [pc, #252]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f04:	2300      	movs	r3, #0
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	492f      	ldr	r1, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	492c      	ldr	r1, [pc, #176]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4928      	ldr	r1, [pc, #160]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4922      	ldr	r1, [pc, #136]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	491e      	ldr	r1, [pc, #120]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4914      	ldr	r1, [pc, #80]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e021      	b.n	8001ffa <HAL_GPIO_Init+0x2e2>
 8001fb6:	bf00      	nop
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10310000 	.word	0x10310000
 8001fc0:	10220000 	.word	0x10220000
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	10120000 	.word	0x10120000
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_GPIO_Init+0x304>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_GPIO_Init+0x304>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae8e 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e12b      	b.n	800228a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb30 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002084:	f001 fd20 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 8002088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a81      	ldr	r2, [pc, #516]	; (8002294 <HAL_I2C_Init+0x274>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d807      	bhi.n	80020a4 <HAL_I2C_Init+0x84>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a80      	ldr	r2, [pc, #512]	; (8002298 <HAL_I2C_Init+0x278>)
 8002098:	4293      	cmp	r3, r2
 800209a:	bf94      	ite	ls
 800209c:	2301      	movls	r3, #1
 800209e:	2300      	movhi	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e006      	b.n	80020b2 <HAL_I2C_Init+0x92>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a7d      	ldr	r2, [pc, #500]	; (800229c <HAL_I2C_Init+0x27c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0e7      	b.n	800228a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a78      	ldr	r2, [pc, #480]	; (80022a0 <HAL_I2C_Init+0x280>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0c9b      	lsrs	r3, r3, #18
 80020c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_I2C_Init+0x274>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d802      	bhi.n	80020f4 <HAL_I2C_Init+0xd4>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3301      	adds	r3, #1
 80020f2:	e009      	b.n	8002108 <HAL_I2C_Init+0xe8>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <HAL_I2C_Init+0x284>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	3301      	adds	r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	430b      	orrs	r3, r1
 800210e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800211a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	495c      	ldr	r1, [pc, #368]	; (8002294 <HAL_I2C_Init+0x274>)
 8002124:	428b      	cmp	r3, r1
 8002126:	d819      	bhi.n	800215c <HAL_I2C_Init+0x13c>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e59      	subs	r1, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fbb1 f3f3 	udiv	r3, r1, r3
 8002136:	1c59      	adds	r1, r3, #1
 8002138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800213c:	400b      	ands	r3, r1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_I2C_Init+0x138>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e59      	subs	r1, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002156:	e051      	b.n	80021fc <HAL_I2C_Init+0x1dc>
 8002158:	2304      	movs	r3, #4
 800215a:	e04f      	b.n	80021fc <HAL_I2C_Init+0x1dc>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <HAL_I2C_Init+0x168>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e012      	b.n	80021ae <HAL_I2C_Init+0x18e>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e58      	subs	r0, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	0099      	lsls	r1, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Init+0x196>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e022      	b.n	80021fc <HAL_I2C_Init+0x1dc>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10e      	bne.n	80021dc <HAL_I2C_Init+0x1bc>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e58      	subs	r0, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	440b      	add	r3, r1
 80021cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	e00f      	b.n	80021fc <HAL_I2C_Init+0x1dc>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e58      	subs	r0, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	0099      	lsls	r1, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	6809      	ldr	r1, [r1, #0]
 8002200:	4313      	orrs	r3, r2
 8002202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800222a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6911      	ldr	r1, [r2, #16]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68d2      	ldr	r2, [r2, #12]
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	430b      	orrs	r3, r1
 800223e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	000186a0 	.word	0x000186a0
 8002298:	001e847f 	.word	0x001e847f
 800229c:	003d08ff 	.word	0x003d08ff
 80022a0:	431bde83 	.word	0x431bde83
 80022a4:	10624dd3 	.word	0x10624dd3

080022a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	460b      	mov	r3, r1
 80022b6:	817b      	strh	r3, [r7, #10]
 80022b8:	4613      	mov	r3, r2
 80022ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff fc1a 	bl	8001af4 <HAL_GetTick>
 80022c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	f040 80e0 	bne.w	8002490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2319      	movs	r3, #25
 80022d6:	2201      	movs	r2, #1
 80022d8:	4970      	ldr	r1, [pc, #448]	; (800249c <HAL_I2C_Master_Transmit+0x1f4>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fe44 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e0d3      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0x50>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0cc      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d007      	beq.n	800231e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2210      	movs	r2, #16
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	893a      	ldrh	r2, [r7, #8]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a50      	ldr	r2, [pc, #320]	; (80024a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002360:	8979      	ldrh	r1, [r7, #10]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fbfe 	bl	8002b68 <I2C_MasterRequestWrite>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e08d      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800238c:	e066      	b.n	800245c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	6a39      	ldr	r1, [r7, #32]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 febe 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06b      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11b      	bne.n	8002430 <HAL_I2C_Master_Transmit+0x188>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d017      	beq.n	8002430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	6a39      	ldr	r1, [r7, #32]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 feae 	bl	8003196 <I2C_WaitOnBTFFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e01a      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d194      	bne.n	800238e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	00100002 	.word	0x00100002
 80024a0:	ffff0000 	.word	0xffff0000

080024a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7ff fb19 	bl	8001af4 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	f040 80d9 	bne.w	8002684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2319      	movs	r3, #25
 80024d8:	2201      	movs	r2, #1
 80024da:	496d      	ldr	r1, [pc, #436]	; (8002690 <HAL_I2C_Mem_Write+0x1ec>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fd43 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0cc      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Mem_Write+0x56>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0c5      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d007      	beq.n	8002520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2221      	movs	r2, #33	; 0x21
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a4d      	ldr	r2, [pc, #308]	; (8002694 <HAL_I2C_Mem_Write+0x1f0>)
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002562:	88f8      	ldrh	r0, [r7, #6]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	8979      	ldrh	r1, [r7, #10]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4603      	mov	r3, r0
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb7a 	bl	8002c6c <I2C_RequestMemoryWrite>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d052      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e081      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fdc4 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11b      	bne.n	8002624 <HAL_I2C_Mem_Write+0x180>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1aa      	bne.n	8002582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fdb0 	bl	8003196 <I2C_WaitOnBTFFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e016      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	00100002 	.word	0x00100002
 8002694:	ffff0000 	.word	0xffff0000

08002698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	460b      	mov	r3, r1
 80026ac:	813b      	strh	r3, [r7, #8]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026b6:	f7ff fa1d 	bl	8001af4 <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	f040 8244 	bne.w	8002b52 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2319      	movs	r3, #25
 80026d0:	2201      	movs	r2, #1
 80026d2:	4982      	ldr	r1, [pc, #520]	; (80028dc <HAL_I2C_Mem_Read+0x244>)
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fc47 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
 80026e2:	e237      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x5a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e230      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d007      	beq.n	8002718 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2222      	movs	r2, #34	; 0x22
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a62      	ldr	r2, [pc, #392]	; (80028e0 <HAL_I2C_Mem_Read+0x248>)
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800275a:	88f8      	ldrh	r0, [r7, #6]
 800275c:	893a      	ldrh	r2, [r7, #8]
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	4603      	mov	r3, r0
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fb14 	bl	8002d98 <I2C_RequestMemoryRead>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1ec      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e1c0      	b.n	8002b2c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d11e      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027c2:	b672      	cpsid	i
}
 80027c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027ec:	b662      	cpsie	i
}
 80027ee:	e035      	b.n	800285c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11e      	bne.n	8002836 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002832:	b662      	cpsie	i
}
 8002834:	e012      	b.n	800285c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002844:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800285c:	e166      	b.n	8002b2c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	2b03      	cmp	r3, #3
 8002864:	f200 811f 	bhi.w	8002aa6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	2b01      	cmp	r3, #1
 800286e:	d123      	bne.n	80028b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fccf 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e167      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b6:	e139      	b.n	8002b2c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d152      	bne.n	8002966 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	2200      	movs	r2, #0
 80028c8:	4906      	ldr	r1, [pc, #24]	; (80028e4 <HAL_I2C_Mem_Read+0x24c>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fb4c 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e13c      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
 80028da:	bf00      	nop
 80028dc:	00100002 	.word	0x00100002
 80028e0:	ffff0000 	.word	0xffff0000
 80028e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800292e:	b662      	cpsie	i
}
 8002930:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002964:	e0e2      	b.n	8002b2c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	2200      	movs	r2, #0
 800296e:	497b      	ldr	r1, [pc, #492]	; (8002b5c <HAL_I2C_Mem_Read+0x4c4>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 faf9 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0e9      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029c6:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <HAL_I2C_Mem_Read+0x4c8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	08db      	lsrs	r3, r3, #3
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_I2C_Mem_Read+0x4cc>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0a1a      	lsrs	r2, r3, #8
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00da      	lsls	r2, r3, #3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d118      	bne.n	8002a1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0e:	b662      	cpsie	i
}
 8002a10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e09a      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d1d9      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a6e:	b662      	cpsie	i
}
 8002a70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa4:	e042      	b.n	8002b2c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fbb4 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e04c      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d118      	bne.n	8002b2c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f ae94 	bne.w	800285e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	00010004 	.word	0x00010004
 8002b60:	20000010 	.word	0x20000010
 8002b64:	14f8b589 	.word	0x14f8b589

08002b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d006      	beq.n	8002b92 <I2C_MasterRequestWrite+0x2a>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <I2C_MasterRequestWrite+0x2a>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b90:	d108      	bne.n	8002ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e00b      	b.n	8002bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d107      	bne.n	8002bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f9cd 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be2:	d103      	bne.n	8002bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e035      	b.n	8002c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf8:	d108      	bne.n	8002c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e01b      	b.n	8002c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	11db      	asrs	r3, r3, #7
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 0306 	and.w	r3, r3, #6
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f063 030f 	orn	r3, r3, #15
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <I2C_MasterRequestWrite+0xfc>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f9f3 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e010      	b.n	8002c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4907      	ldr	r1, [pc, #28]	; (8002c68 <I2C_MasterRequestWrite+0x100>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f9e3 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00010008 	.word	0x00010008
 8002c68:	00010002 	.word	0x00010002

08002c6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	813b      	strh	r3, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f960 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbc:	d103      	bne.n	8002cc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e05f      	b.n	8002d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	492d      	ldr	r1, [pc, #180]	; (8002d94 <I2C_RequestMemoryWrite+0x128>)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f998 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e04c      	b.n	8002d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	6a39      	ldr	r1, [r7, #32]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa02 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d107      	bne.n	8002d2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02b      	b.n	8002d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d38:	893b      	ldrh	r3, [r7, #8]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	e021      	b.n	8002d88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d44:	893b      	ldrh	r3, [r7, #8]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	6a39      	ldr	r1, [r7, #32]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f9dc 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d107      	bne.n	8002d7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e005      	b.n	8002d8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7e:	893b      	ldrh	r3, [r7, #8]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	00010002 	.word	0x00010002

08002d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	817b      	strh	r3, [r7, #10]
 8002daa:	460b      	mov	r3, r1
 8002dac:	813b      	strh	r3, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f8c2 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	d103      	bne.n	8002e02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0aa      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	4952      	ldr	r1, [pc, #328]	; (8002f64 <I2C_RequestMemoryRead+0x1cc>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8fa 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e097      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f964 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e076      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e021      	b.n	8002ec4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f93e 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e050      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f923 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e035      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f82b 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d103      	bne.n	8002f30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e013      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f34:	897b      	ldrh	r3, [r7, #10]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	4906      	ldr	r1, [pc, #24]	; (8002f64 <I2C_RequestMemoryRead+0x1cc>)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f863 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	00010002 	.word	0x00010002

08002f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	e025      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d021      	beq.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe fdb7 	bl	8001af4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e023      	b.n	800300e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10d      	bne.n	8002fec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	e00c      	b.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	429a      	cmp	r2, r3
 800300a:	d0b6      	beq.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003024:	e051      	b.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003034:	d123      	bne.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800304e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e046      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d021      	beq.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe fd35 	bl	8001af4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e020      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10c      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e00b      	b.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d18d      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003120:	e02d      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8ce 	bl	80032c4 <I2C_IsAcknowledgeFailed>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02d      	b.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d021      	beq.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe fcdb 	bl	8001af4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d1ca      	bne.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a2:	e02d      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f88d 	bl	80032c4 <I2C_IsAcknowledgeFailed>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e02d      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d021      	beq.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fe fc9a 	bl	8001af4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d1ca      	bne.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003224:	e042      	b.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b10      	cmp	r3, #16
 8003232:	d119      	bne.n	8003268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0210 	mvn.w	r2, #16
 800323c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e029      	b.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003268:	f7fe fc44 	bl	8001af4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d1b5      	bne.n	8003226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d11b      	bne.n	8003314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e272      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8087 	beq.w	800344e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003340:	4b92      	ldr	r3, [pc, #584]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b04      	cmp	r3, #4
 800334a:	d00c      	beq.n	8003366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800334c:	4b8f      	ldr	r3, [pc, #572]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d112      	bne.n	800337e <HAL_RCC_OscConfig+0x5e>
 8003358:	4b8c      	ldr	r3, [pc, #560]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d10b      	bne.n	800337e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003366:	4b89      	ldr	r3, [pc, #548]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06c      	beq.n	800344c <HAL_RCC_OscConfig+0x12c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d168      	bne.n	800344c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e24c      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x76>
 8003388:	4b80      	ldr	r3, [pc, #512]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a7f      	ldr	r2, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e02e      	b.n	80033f4 <HAL_RCC_OscConfig+0xd4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x98>
 800339e:	4b7b      	ldr	r3, [pc, #492]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7a      	ldr	r2, [pc, #488]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b78      	ldr	r3, [pc, #480]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a77      	ldr	r2, [pc, #476]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xd4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0xbc>
 80033c2:	4b72      	ldr	r3, [pc, #456]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a71      	ldr	r2, [pc, #452]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xd4>
 80033dc:	4b6b      	ldr	r3, [pc, #428]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b68      	ldr	r3, [pc, #416]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a67      	ldr	r2, [pc, #412]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fb7a 	bl	8001af4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fb76 	bl	8001af4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e200      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xe4>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fb66 	bl	8001af4 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fb62 	bl	8001af4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1ec      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x10c>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800345a:	4b4c      	ldr	r3, [pc, #304]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x18c>
 8003472:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c0      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4939      	ldr	r1, [pc, #228]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fe fb1b 	bl	8001af4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fe fb17 	bl	8001af4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1a1      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b2a      	ldr	r3, [pc, #168]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4927      	ldr	r1, [pc, #156]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fafa 	bl	8001af4 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe faf6 	bl	8001af4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e180      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03a      	beq.n	80035a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d019      	beq.n	800356a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353c:	f7fe fada 	bl	8001af4 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe fad6 	bl	8001af4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e160      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_RCC_OscConfig+0x26c>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003562:	2001      	movs	r0, #1
 8003564:	f000 fac4 	bl	8003af0 <RCC_Delay>
 8003568:	e01c      	b.n	80035a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fe fac0 	bl	8001af4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003576:	e00f      	b.n	8003598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fabc 	bl	8001af4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d908      	bls.n	8003598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e146      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	42420000 	.word	0x42420000
 8003594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e9      	bne.n	8003578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a6 	beq.w	80036fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b8b      	ldr	r3, [pc, #556]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10d      	bne.n	80035de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4a87      	ldr	r2, [pc, #540]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	61d3      	str	r3, [r2, #28]
 80035ce:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b82      	ldr	r3, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7e      	ldr	r2, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe fa7d 	bl	8001af4 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe fa79 	bl	8001af4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b64      	cmp	r3, #100	; 0x64
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e103      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x4c8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x312>
 8003624:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4a6e      	ldr	r2, [pc, #440]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	e02d      	b.n	800368e <HAL_RCC_OscConfig+0x36e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x334>
 800363a:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a69      	ldr	r2, [pc, #420]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6213      	str	r3, [r2, #32]
 8003646:	4b67      	ldr	r3, [pc, #412]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a66      	ldr	r2, [pc, #408]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
 8003652:	e01c      	b.n	800368e <HAL_RCC_OscConfig+0x36e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0x356>
 800365c:	4b61      	ldr	r3, [pc, #388]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a60      	ldr	r2, [pc, #384]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6213      	str	r3, [r2, #32]
 8003668:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4a5d      	ldr	r2, [pc, #372]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0x36e>
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a5a      	ldr	r2, [pc, #360]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fe fa2d 	bl	8001af4 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe fa29 	bl	8001af4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0b1      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <HAL_RCC_OscConfig+0x37e>
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fe fa17 	bl	8001af4 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fa13 	bl	8001af4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e09b      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ee      	bne.n	80036ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f2:	4b3c      	ldr	r3, [pc, #240]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a3b      	ldr	r2, [pc, #236]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8087 	beq.w	8003816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003708:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d061      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d146      	bne.n	80037aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371c:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x4cc>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fe f9e7 	bl	8001af4 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe f9e3 	bl	8001af4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e06d      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003750:	d108      	bne.n	8003764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	4921      	ldr	r1, [pc, #132]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003764:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a19      	ldr	r1, [r3, #32]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	430b      	orrs	r3, r1
 8003776:	491b      	ldr	r1, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x4cc>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe f9b7 	bl	8001af4 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378a:	f7fe f9b3 	bl	8001af4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e03d      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x46a>
 80037a8:	e035      	b.n	8003816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe f9a0 	bl	8001af4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe f99c 	bl	8001af4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e026      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x498>
 80037d6:	e01e      	b.n	8003816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e019      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_OscConfig+0x500>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	429a      	cmp	r2, r3
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0d0      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d910      	bls.n	8003868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b67      	ldr	r3, [pc, #412]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4965      	ldr	r1, [pc, #404]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0b8      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003880:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a58      	ldr	r2, [pc, #352]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800388a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a52      	ldr	r2, [pc, #328]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	494d      	ldr	r1, [pc, #308]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d040      	beq.n	8003944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d115      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e07f      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e073      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4936      	ldr	r1, [pc, #216]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003914:	f7fe f8ee 	bl	8001af4 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fe f8ea 	bl	8001af4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e053      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d210      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4922      	ldr	r1, [pc, #136]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e032      	b.n	80039da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4916      	ldr	r1, [pc, #88]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039b2:	f000 f821 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80039b6:	4602      	mov	r2, r0
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	490a      	ldr	r1, [pc, #40]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	5ccb      	ldrb	r3, [r1, r3]
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1cc>)
 80039cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1d0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe f84c 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40022000 	.word	0x40022000
 80039e8:	40021000 	.word	0x40021000
 80039ec:	0800754c 	.word	0x0800754c
 80039f0:	20000010 	.word	0x20000010
 80039f4:	20000014 	.word	0x20000014

080039f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b490      	push	{r4, r7}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a00:	1d3c      	adds	r4, r7, #4
 8003a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a08:	f240 2301 	movw	r3, #513	; 0x201
 8003a0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x40>
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x46>
 8003a36:	e02b      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a3a:	623b      	str	r3, [r7, #32]
      break;
 8003a3c:	e02b      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	0c9b      	lsrs	r3, r3, #18
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3328      	adds	r3, #40	; 0x28
 8003a48:	443b      	add	r3, r7
 8003a4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	0c5b      	lsrs	r3, r3, #17
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	3328      	adds	r3, #40	; 0x28
 8003a66:	443b      	add	r3, r7
 8003a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7e:	e004      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	623b      	str	r3, [r7, #32]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a92:	623b      	str	r3, [r7, #32]
      break;
 8003a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a96:	6a3b      	ldr	r3, [r7, #32]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc90      	pop	{r4, r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	0800753c 	.word	0x0800753c
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	007a1200 	.word	0x007a1200
 8003ab0:	003d0900 	.word	0x003d0900

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b02      	ldr	r3, [pc, #8]	; (8003ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	20000010 	.word	0x20000010

08003ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003acc:	f7ff fff2 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	0800755c 	.word	0x0800755c

08003af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <RCC_Delay+0x34>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <RCC_Delay+0x38>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0a5b      	lsrs	r3, r3, #9
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b0c:	bf00      	nop
  }
  while (Delay --);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	60fa      	str	r2, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <RCC_Delay+0x1c>
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	20000010 	.word	0x20000010
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e041      	b.n	8003bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fe16 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f000 faaa 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e041      	b.n	8003c60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f839 	bl	8003c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f000 fa5b 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x24>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e022      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x6a>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d109      	bne.n	8003cba <HAL_TIM_PWM_Start+0x3e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e015      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x6a>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start+0x58>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x6a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e05e      	b.n	8003dac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x82>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	e013      	b.n	8003d26 <HAL_TIM_PWM_Start+0xaa>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x92>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	e00b      	b.n	8003d26 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xa2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	e003      	b.n	8003d26 <HAL_TIM_PWM_Start+0xaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fc48 	bl	80045c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_TIM_PWM_Start+0x138>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <HAL_TIM_PWM_Start+0x138>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIM_PWM_Start+0xfa>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_PWM_Start+0xfa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_TIM_PWM_Start+0x13c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_PWM_Start+0xfa>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <HAL_TIM_PWM_Start+0x140>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d010      	beq.n	8003daa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	e007      	b.n	8003daa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800

08003dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0ac      	b.n	8003f34 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	f200 809f 	bhi.w	8003f28 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003f29 	.word	0x08003f29
 8003df8:	08003f29 	.word	0x08003f29
 8003dfc:	08003f29 	.word	0x08003f29
 8003e00:	08003e65 	.word	0x08003e65
 8003e04:	08003f29 	.word	0x08003f29
 8003e08:	08003f29 	.word	0x08003f29
 8003e0c:	08003f29 	.word	0x08003f29
 8003e10:	08003ea7 	.word	0x08003ea7
 8003e14:	08003f29 	.word	0x08003f29
 8003e18:	08003f29 	.word	0x08003f29
 8003e1c:	08003f29 	.word	0x08003f29
 8003e20:	08003ee7 	.word	0x08003ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f9ac 	bl	8004188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0208 	orr.w	r2, r2, #8
 8003e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6999      	ldr	r1, [r3, #24]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	619a      	str	r2, [r3, #24]
      break;
 8003e62:	e062      	b.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f9f2 	bl	8004254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6999      	ldr	r1, [r3, #24]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	021a      	lsls	r2, r3, #8
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	619a      	str	r2, [r3, #24]
      break;
 8003ea4:	e041      	b.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fa3b 	bl	8004328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0208 	orr.w	r2, r2, #8
 8003ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0204 	bic.w	r2, r2, #4
 8003ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69d9      	ldr	r1, [r3, #28]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	61da      	str	r2, [r3, #28]
      break;
 8003ee4:	e021      	b.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fa85 	bl	80043fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	021a      	lsls	r2, r3, #8
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	61da      	str	r2, [r3, #28]
      break;
 8003f26:	e000      	b.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIM_ConfigClockSource+0x18>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e0b3      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x180>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8c:	d03e      	beq.n	800400c <HAL_TIM_ConfigClockSource+0xd0>
 8003f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f92:	f200 8087 	bhi.w	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	f000 8085 	beq.w	80040a8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d87f      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fa4:	2b70      	cmp	r3, #112	; 0x70
 8003fa6:	d01a      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0xa2>
 8003fa8:	2b70      	cmp	r3, #112	; 0x70
 8003faa:	d87b      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fac:	2b60      	cmp	r3, #96	; 0x60
 8003fae:	d050      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x116>
 8003fb0:	2b60      	cmp	r3, #96	; 0x60
 8003fb2:	d877      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fb4:	2b50      	cmp	r3, #80	; 0x50
 8003fb6:	d03c      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0xf6>
 8003fb8:	2b50      	cmp	r3, #80	; 0x50
 8003fba:	d873      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d058      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x136>
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d86f      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	d064      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x156>
 8003fc8:	2b30      	cmp	r3, #48	; 0x30
 8003fca:	d86b      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d060      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x156>
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d867      	bhi.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d05c      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x156>
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d05a      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fdc:	e062      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f000 faca 	bl	8004586 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004000:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	609a      	str	r2, [r3, #8]
      break;
 800400a:	e04e      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f000 fab3 	bl	8004586 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402e:	609a      	str	r2, [r3, #8]
      break;
 8004030:	e03b      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	461a      	mov	r2, r3
 8004040:	f000 fa2a 	bl	8004498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2150      	movs	r1, #80	; 0x50
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fa81 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8004050:	e02b      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	461a      	mov	r2, r3
 8004060:	f000 fa48 	bl	80044f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2160      	movs	r1, #96	; 0x60
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fa71 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8004070:	e01b      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	461a      	mov	r2, r3
 8004080:	f000 fa0a 	bl	8004498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2140      	movs	r1, #64	; 0x40
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa61 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 8004090:	e00b      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f000 fa58 	bl	8004552 <TIM_ITRx_SetConfig>
        break;
 80040a2:	e002      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a29      	ldr	r2, [pc, #164]	; (800417c <TIM_Base_SetConfig+0xb8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_Base_SetConfig+0x30>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0x30>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <TIM_Base_SetConfig+0xbc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0x30>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a25      	ldr	r2, [pc, #148]	; (8004184 <TIM_Base_SetConfig+0xc0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <TIM_Base_SetConfig+0xb8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00b      	beq.n	8004126 <TIM_Base_SetConfig+0x62>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004114:	d007      	beq.n	8004126 <TIM_Base_SetConfig+0x62>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a19      	ldr	r2, [pc, #100]	; (8004180 <TIM_Base_SetConfig+0xbc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_Base_SetConfig+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a18      	ldr	r2, [pc, #96]	; (8004184 <TIM_Base_SetConfig+0xc0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d108      	bne.n	8004138 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a07      	ldr	r2, [pc, #28]	; (800417c <TIM_Base_SetConfig+0xb8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d103      	bne.n	800416c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	615a      	str	r2, [r3, #20]
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800

08004188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0302 	bic.w	r3, r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <TIM_OC1_SetConfig+0xc8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10c      	bne.n	80041fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0308 	bic.w	r3, r3, #8
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 0304 	bic.w	r3, r3, #4
 80041fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <TIM_OC1_SetConfig+0xc8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40012c00 	.word	0x40012c00

08004254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0210 	bic.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0320 	bic.w	r3, r3, #32
 800429e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <TIM_OC2_SetConfig+0xd0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10d      	bne.n	80042d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a14      	ldr	r2, [pc, #80]	; (8004324 <TIM_OC2_SetConfig+0xd0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d113      	bne.n	8004300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00

08004328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <TIM_OC3_SetConfig+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10d      	bne.n	80043a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800438c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <TIM_OC3_SetConfig+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d113      	bne.n	80043d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00

080043fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <TIM_OC4_SetConfig+0x98>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d109      	bne.n	8004470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	40012c00 	.word	0x40012c00

08004498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0201 	bic.w	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f023 030a 	bic.w	r3, r3, #10
 80044d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f023 0210 	bic.w	r2, r3, #16
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800451e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	031b      	lsls	r3, r3, #12
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	621a      	str	r2, [r3, #32]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	f043 0307 	orr.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	021a      	lsls	r2, r3, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	609a      	str	r2, [r3, #8]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2201      	movs	r2, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	401a      	ands	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e046      	b.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d009      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10c      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	2000001c 	.word	0x2000001c

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	2600      	movs	r6, #0
 80046d8:	4d0c      	ldr	r5, [pc, #48]	; (800470c <__libc_init_array+0x38>)
 80046da:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	f002 ff10 	bl	8007508 <_init>
 80046e8:	2600      	movs	r6, #0
 80046ea:	4d0a      	ldr	r5, [pc, #40]	; (8004714 <__libc_init_array+0x40>)
 80046ec:	4c0a      	ldr	r4, [pc, #40]	; (8004718 <__libc_init_array+0x44>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	0800793c 	.word	0x0800793c
 8004710:	0800793c 	.word	0x0800793c
 8004714:	0800793c 	.word	0x0800793c
 8004718:	08007940 	.word	0x08007940

0800471c <memset>:
 800471c:	4603      	mov	r3, r0
 800471e:	4402      	add	r2, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <__cvt>:
 800472c:	2b00      	cmp	r3, #0
 800472e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004732:	461f      	mov	r7, r3
 8004734:	bfbb      	ittet	lt
 8004736:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800473a:	461f      	movlt	r7, r3
 800473c:	2300      	movge	r3, #0
 800473e:	232d      	movlt	r3, #45	; 0x2d
 8004740:	b088      	sub	sp, #32
 8004742:	4614      	mov	r4, r2
 8004744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004746:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004748:	7013      	strb	r3, [r2, #0]
 800474a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800474c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004750:	f023 0820 	bic.w	r8, r3, #32
 8004754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004758:	d005      	beq.n	8004766 <__cvt+0x3a>
 800475a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800475e:	d100      	bne.n	8004762 <__cvt+0x36>
 8004760:	3501      	adds	r5, #1
 8004762:	2302      	movs	r3, #2
 8004764:	e000      	b.n	8004768 <__cvt+0x3c>
 8004766:	2303      	movs	r3, #3
 8004768:	aa07      	add	r2, sp, #28
 800476a:	9204      	str	r2, [sp, #16]
 800476c:	aa06      	add	r2, sp, #24
 800476e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004772:	e9cd 3500 	strd	r3, r5, [sp]
 8004776:	4622      	mov	r2, r4
 8004778:	463b      	mov	r3, r7
 800477a:	f000 fcf9 	bl	8005170 <_dtoa_r>
 800477e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004782:	4606      	mov	r6, r0
 8004784:	d102      	bne.n	800478c <__cvt+0x60>
 8004786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d522      	bpl.n	80047d2 <__cvt+0xa6>
 800478c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004790:	eb06 0905 	add.w	r9, r6, r5
 8004794:	d110      	bne.n	80047b8 <__cvt+0x8c>
 8004796:	7833      	ldrb	r3, [r6, #0]
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d10a      	bne.n	80047b2 <__cvt+0x86>
 800479c:	2200      	movs	r2, #0
 800479e:	2300      	movs	r3, #0
 80047a0:	4620      	mov	r0, r4
 80047a2:	4639      	mov	r1, r7
 80047a4:	f7fc f900 	bl	80009a8 <__aeabi_dcmpeq>
 80047a8:	b918      	cbnz	r0, 80047b2 <__cvt+0x86>
 80047aa:	f1c5 0501 	rsb	r5, r5, #1
 80047ae:	f8ca 5000 	str.w	r5, [sl]
 80047b2:	f8da 3000 	ldr.w	r3, [sl]
 80047b6:	4499      	add	r9, r3
 80047b8:	2200      	movs	r2, #0
 80047ba:	2300      	movs	r3, #0
 80047bc:	4620      	mov	r0, r4
 80047be:	4639      	mov	r1, r7
 80047c0:	f7fc f8f2 	bl	80009a8 <__aeabi_dcmpeq>
 80047c4:	b108      	cbz	r0, 80047ca <__cvt+0x9e>
 80047c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80047ca:	2230      	movs	r2, #48	; 0x30
 80047cc:	9b07      	ldr	r3, [sp, #28]
 80047ce:	454b      	cmp	r3, r9
 80047d0:	d307      	bcc.n	80047e2 <__cvt+0xb6>
 80047d2:	4630      	mov	r0, r6
 80047d4:	9b07      	ldr	r3, [sp, #28]
 80047d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047d8:	1b9b      	subs	r3, r3, r6
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	b008      	add	sp, #32
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	9107      	str	r1, [sp, #28]
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e7f0      	b.n	80047cc <__cvt+0xa0>

080047ea <__exponent>:
 80047ea:	4603      	mov	r3, r0
 80047ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ee:	2900      	cmp	r1, #0
 80047f0:	f803 2b02 	strb.w	r2, [r3], #2
 80047f4:	bfb6      	itet	lt
 80047f6:	222d      	movlt	r2, #45	; 0x2d
 80047f8:	222b      	movge	r2, #43	; 0x2b
 80047fa:	4249      	neglt	r1, r1
 80047fc:	2909      	cmp	r1, #9
 80047fe:	7042      	strb	r2, [r0, #1]
 8004800:	dd2b      	ble.n	800485a <__exponent+0x70>
 8004802:	f10d 0407 	add.w	r4, sp, #7
 8004806:	46a4      	mov	ip, r4
 8004808:	270a      	movs	r7, #10
 800480a:	fb91 f6f7 	sdiv	r6, r1, r7
 800480e:	460a      	mov	r2, r1
 8004810:	46a6      	mov	lr, r4
 8004812:	fb07 1516 	mls	r5, r7, r6, r1
 8004816:	2a63      	cmp	r2, #99	; 0x63
 8004818:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800481c:	4631      	mov	r1, r6
 800481e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004822:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004826:	dcf0      	bgt.n	800480a <__exponent+0x20>
 8004828:	3130      	adds	r1, #48	; 0x30
 800482a:	f1ae 0502 	sub.w	r5, lr, #2
 800482e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004832:	4629      	mov	r1, r5
 8004834:	1c44      	adds	r4, r0, #1
 8004836:	4561      	cmp	r1, ip
 8004838:	d30a      	bcc.n	8004850 <__exponent+0x66>
 800483a:	f10d 0209 	add.w	r2, sp, #9
 800483e:	eba2 020e 	sub.w	r2, r2, lr
 8004842:	4565      	cmp	r5, ip
 8004844:	bf88      	it	hi
 8004846:	2200      	movhi	r2, #0
 8004848:	4413      	add	r3, r2
 800484a:	1a18      	subs	r0, r3, r0
 800484c:	b003      	add	sp, #12
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004854:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004858:	e7ed      	b.n	8004836 <__exponent+0x4c>
 800485a:	2330      	movs	r3, #48	; 0x30
 800485c:	3130      	adds	r1, #48	; 0x30
 800485e:	7083      	strb	r3, [r0, #2]
 8004860:	70c1      	strb	r1, [r0, #3]
 8004862:	1d03      	adds	r3, r0, #4
 8004864:	e7f1      	b.n	800484a <__exponent+0x60>
	...

08004868 <_printf_float>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	b091      	sub	sp, #68	; 0x44
 800486e:	460c      	mov	r4, r1
 8004870:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004874:	4616      	mov	r6, r2
 8004876:	461f      	mov	r7, r3
 8004878:	4605      	mov	r5, r0
 800487a:	f001 fa67 	bl	8005d4c <_localeconv_r>
 800487e:	6803      	ldr	r3, [r0, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	9309      	str	r3, [sp, #36]	; 0x24
 8004884:	f7fb fc64 	bl	8000150 <strlen>
 8004888:	2300      	movs	r3, #0
 800488a:	930e      	str	r3, [sp, #56]	; 0x38
 800488c:	f8d8 3000 	ldr.w	r3, [r8]
 8004890:	900a      	str	r0, [sp, #40]	; 0x28
 8004892:	3307      	adds	r3, #7
 8004894:	f023 0307 	bic.w	r3, r3, #7
 8004898:	f103 0208 	add.w	r2, r3, #8
 800489c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80048a0:	f8d4 b000 	ldr.w	fp, [r4]
 80048a4:	f8c8 2000 	str.w	r2, [r8]
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80048b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80048b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	4640      	mov	r0, r8
 80048c0:	4b9c      	ldr	r3, [pc, #624]	; (8004b34 <_printf_float+0x2cc>)
 80048c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048c4:	f7fc f8a2 	bl	8000a0c <__aeabi_dcmpun>
 80048c8:	bb70      	cbnz	r0, 8004928 <_printf_float+0xc0>
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	4640      	mov	r0, r8
 80048d0:	4b98      	ldr	r3, [pc, #608]	; (8004b34 <_printf_float+0x2cc>)
 80048d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048d4:	f7fc f87c 	bl	80009d0 <__aeabi_dcmple>
 80048d8:	bb30      	cbnz	r0, 8004928 <_printf_float+0xc0>
 80048da:	2200      	movs	r2, #0
 80048dc:	2300      	movs	r3, #0
 80048de:	4640      	mov	r0, r8
 80048e0:	4651      	mov	r1, sl
 80048e2:	f7fc f86b 	bl	80009bc <__aeabi_dcmplt>
 80048e6:	b110      	cbz	r0, 80048ee <_printf_float+0x86>
 80048e8:	232d      	movs	r3, #45	; 0x2d
 80048ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ee:	4b92      	ldr	r3, [pc, #584]	; (8004b38 <_printf_float+0x2d0>)
 80048f0:	4892      	ldr	r0, [pc, #584]	; (8004b3c <_printf_float+0x2d4>)
 80048f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80048f6:	bf94      	ite	ls
 80048f8:	4698      	movls	r8, r3
 80048fa:	4680      	movhi	r8, r0
 80048fc:	2303      	movs	r3, #3
 80048fe:	f04f 0a00 	mov.w	sl, #0
 8004902:	6123      	str	r3, [r4, #16]
 8004904:	f02b 0304 	bic.w	r3, fp, #4
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	4633      	mov	r3, r6
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	9700      	str	r7, [sp, #0]
 8004912:	aa0f      	add	r2, sp, #60	; 0x3c
 8004914:	f000 f9d4 	bl	8004cc0 <_printf_common>
 8004918:	3001      	adds	r0, #1
 800491a:	f040 8090 	bne.w	8004a3e <_printf_float+0x1d6>
 800491e:	f04f 30ff 	mov.w	r0, #4294967295
 8004922:	b011      	add	sp, #68	; 0x44
 8004924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004928:	4642      	mov	r2, r8
 800492a:	4653      	mov	r3, sl
 800492c:	4640      	mov	r0, r8
 800492e:	4651      	mov	r1, sl
 8004930:	f7fc f86c 	bl	8000a0c <__aeabi_dcmpun>
 8004934:	b148      	cbz	r0, 800494a <_printf_float+0xe2>
 8004936:	f1ba 0f00 	cmp.w	sl, #0
 800493a:	bfb8      	it	lt
 800493c:	232d      	movlt	r3, #45	; 0x2d
 800493e:	4880      	ldr	r0, [pc, #512]	; (8004b40 <_printf_float+0x2d8>)
 8004940:	bfb8      	it	lt
 8004942:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004946:	4b7f      	ldr	r3, [pc, #508]	; (8004b44 <_printf_float+0x2dc>)
 8004948:	e7d3      	b.n	80048f2 <_printf_float+0x8a>
 800494a:	6863      	ldr	r3, [r4, #4]
 800494c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	d142      	bne.n	80049da <_printf_float+0x172>
 8004954:	2306      	movs	r3, #6
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	9206      	str	r2, [sp, #24]
 800495c:	aa0e      	add	r2, sp, #56	; 0x38
 800495e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004962:	aa0d      	add	r2, sp, #52	; 0x34
 8004964:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004968:	9203      	str	r2, [sp, #12]
 800496a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800496e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	4642      	mov	r2, r8
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	4628      	mov	r0, r5
 800497c:	4653      	mov	r3, sl
 800497e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004980:	f7ff fed4 	bl	800472c <__cvt>
 8004984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004986:	4680      	mov	r8, r0
 8004988:	2947      	cmp	r1, #71	; 0x47
 800498a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800498c:	d108      	bne.n	80049a0 <_printf_float+0x138>
 800498e:	1cc8      	adds	r0, r1, #3
 8004990:	db02      	blt.n	8004998 <_printf_float+0x130>
 8004992:	6863      	ldr	r3, [r4, #4]
 8004994:	4299      	cmp	r1, r3
 8004996:	dd40      	ble.n	8004a1a <_printf_float+0x1b2>
 8004998:	f1a9 0902 	sub.w	r9, r9, #2
 800499c:	fa5f f989 	uxtb.w	r9, r9
 80049a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049a4:	d81f      	bhi.n	80049e6 <_printf_float+0x17e>
 80049a6:	464a      	mov	r2, r9
 80049a8:	3901      	subs	r1, #1
 80049aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049ae:	910d      	str	r1, [sp, #52]	; 0x34
 80049b0:	f7ff ff1b 	bl	80047ea <__exponent>
 80049b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b6:	4682      	mov	sl, r0
 80049b8:	1813      	adds	r3, r2, r0
 80049ba:	2a01      	cmp	r2, #1
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	dc02      	bgt.n	80049c6 <_printf_float+0x15e>
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	07d2      	lsls	r2, r2, #31
 80049c4:	d501      	bpl.n	80049ca <_printf_float+0x162>
 80049c6:	3301      	adds	r3, #1
 80049c8:	6123      	str	r3, [r4, #16]
 80049ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d09b      	beq.n	800490a <_printf_float+0xa2>
 80049d2:	232d      	movs	r3, #45	; 0x2d
 80049d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d8:	e797      	b.n	800490a <_printf_float+0xa2>
 80049da:	2947      	cmp	r1, #71	; 0x47
 80049dc:	d1bc      	bne.n	8004958 <_printf_float+0xf0>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ba      	bne.n	8004958 <_printf_float+0xf0>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e7b7      	b.n	8004956 <_printf_float+0xee>
 80049e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80049ea:	d118      	bne.n	8004a1e <_printf_float+0x1b6>
 80049ec:	2900      	cmp	r1, #0
 80049ee:	6863      	ldr	r3, [r4, #4]
 80049f0:	dd0b      	ble.n	8004a0a <_printf_float+0x1a2>
 80049f2:	6121      	str	r1, [r4, #16]
 80049f4:	b913      	cbnz	r3, 80049fc <_printf_float+0x194>
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	07d0      	lsls	r0, r2, #31
 80049fa:	d502      	bpl.n	8004a02 <_printf_float+0x19a>
 80049fc:	3301      	adds	r3, #1
 80049fe:	440b      	add	r3, r1
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	f04f 0a00 	mov.w	sl, #0
 8004a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a08:	e7df      	b.n	80049ca <_printf_float+0x162>
 8004a0a:	b913      	cbnz	r3, 8004a12 <_printf_float+0x1aa>
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	07d2      	lsls	r2, r2, #31
 8004a10:	d501      	bpl.n	8004a16 <_printf_float+0x1ae>
 8004a12:	3302      	adds	r3, #2
 8004a14:	e7f4      	b.n	8004a00 <_printf_float+0x198>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e7f2      	b.n	8004a00 <_printf_float+0x198>
 8004a1a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a20:	4299      	cmp	r1, r3
 8004a22:	db05      	blt.n	8004a30 <_printf_float+0x1c8>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	6121      	str	r1, [r4, #16]
 8004a28:	07d8      	lsls	r0, r3, #31
 8004a2a:	d5ea      	bpl.n	8004a02 <_printf_float+0x19a>
 8004a2c:	1c4b      	adds	r3, r1, #1
 8004a2e:	e7e7      	b.n	8004a00 <_printf_float+0x198>
 8004a30:	2900      	cmp	r1, #0
 8004a32:	bfcc      	ite	gt
 8004a34:	2201      	movgt	r2, #1
 8004a36:	f1c1 0202 	rsble	r2, r1, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	e7e0      	b.n	8004a00 <_printf_float+0x198>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	055a      	lsls	r2, r3, #21
 8004a42:	d407      	bmi.n	8004a54 <_printf_float+0x1ec>
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	4642      	mov	r2, r8
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d12b      	bne.n	8004aaa <_printf_float+0x242>
 8004a52:	e764      	b.n	800491e <_printf_float+0xb6>
 8004a54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a58:	f240 80dd 	bls.w	8004c16 <_printf_float+0x3ae>
 8004a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	f7fb ffa0 	bl	80009a8 <__aeabi_dcmpeq>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d033      	beq.n	8004ad4 <_printf_float+0x26c>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	4a35      	ldr	r2, [pc, #212]	; (8004b48 <_printf_float+0x2e0>)
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f af51 	beq.w	800491e <_printf_float+0xb6>
 8004a7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a80:	429a      	cmp	r2, r3
 8004a82:	db02      	blt.n	8004a8a <_printf_float+0x222>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07d8      	lsls	r0, r3, #31
 8004a88:	d50f      	bpl.n	8004aaa <_printf_float+0x242>
 8004a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af42 	beq.w	800491e <_printf_float+0xb6>
 8004a9a:	f04f 0800 	mov.w	r8, #0
 8004a9e:	f104 091a 	add.w	r9, r4, #26
 8004aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4543      	cmp	r3, r8
 8004aa8:	dc09      	bgt.n	8004abe <_printf_float+0x256>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	079b      	lsls	r3, r3, #30
 8004aae:	f100 8102 	bmi.w	8004cb6 <_printf_float+0x44e>
 8004ab2:	68e0      	ldr	r0, [r4, #12]
 8004ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ab6:	4298      	cmp	r0, r3
 8004ab8:	bfb8      	it	lt
 8004aba:	4618      	movlt	r0, r3
 8004abc:	e731      	b.n	8004922 <_printf_float+0xba>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	464a      	mov	r2, r9
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f af28 	beq.w	800491e <_printf_float+0xb6>
 8004ace:	f108 0801 	add.w	r8, r8, #1
 8004ad2:	e7e6      	b.n	8004aa2 <_printf_float+0x23a>
 8004ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	dc38      	bgt.n	8004b4c <_printf_float+0x2e4>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <_printf_float+0x2e0>)
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f af1a 	beq.w	800491e <_printf_float+0xb6>
 8004aea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d102      	bne.n	8004af8 <_printf_float+0x290>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	07d9      	lsls	r1, r3, #31
 8004af6:	d5d8      	bpl.n	8004aaa <_printf_float+0x242>
 8004af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af0b 	beq.w	800491e <_printf_float+0xb6>
 8004b08:	f04f 0900 	mov.w	r9, #0
 8004b0c:	f104 0a1a 	add.w	sl, r4, #26
 8004b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b12:	425b      	negs	r3, r3
 8004b14:	454b      	cmp	r3, r9
 8004b16:	dc01      	bgt.n	8004b1c <_printf_float+0x2b4>
 8004b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b1a:	e794      	b.n	8004a46 <_printf_float+0x1de>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	4652      	mov	r2, sl
 8004b20:	4631      	mov	r1, r6
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	f43f aef9 	beq.w	800491e <_printf_float+0xb6>
 8004b2c:	f109 0901 	add.w	r9, r9, #1
 8004b30:	e7ee      	b.n	8004b10 <_printf_float+0x2a8>
 8004b32:	bf00      	nop
 8004b34:	7fefffff 	.word	0x7fefffff
 8004b38:	08007568 	.word	0x08007568
 8004b3c:	0800756c 	.word	0x0800756c
 8004b40:	08007574 	.word	0x08007574
 8004b44:	08007570 	.word	0x08007570
 8004b48:	08007578 	.word	0x08007578
 8004b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b50:	429a      	cmp	r2, r3
 8004b52:	bfa8      	it	ge
 8004b54:	461a      	movge	r2, r3
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	4691      	mov	r9, r2
 8004b5a:	dc37      	bgt.n	8004bcc <_printf_float+0x364>
 8004b5c:	f04f 0b00 	mov.w	fp, #0
 8004b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b64:	f104 021a 	add.w	r2, r4, #26
 8004b68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b6c:	ebaa 0309 	sub.w	r3, sl, r9
 8004b70:	455b      	cmp	r3, fp
 8004b72:	dc33      	bgt.n	8004bdc <_printf_float+0x374>
 8004b74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	db3b      	blt.n	8004bf4 <_printf_float+0x38c>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	07da      	lsls	r2, r3, #31
 8004b80:	d438      	bmi.n	8004bf4 <_printf_float+0x38c>
 8004b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b86:	eba3 020a 	sub.w	r2, r3, sl
 8004b8a:	eba3 0901 	sub.w	r9, r3, r1
 8004b8e:	4591      	cmp	r9, r2
 8004b90:	bfa8      	it	ge
 8004b92:	4691      	movge	r9, r2
 8004b94:	f1b9 0f00 	cmp.w	r9, #0
 8004b98:	dc34      	bgt.n	8004c04 <_printf_float+0x39c>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ba2:	f104 0a1a 	add.w	sl, r4, #26
 8004ba6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	eba3 0309 	sub.w	r3, r3, r9
 8004bb0:	4543      	cmp	r3, r8
 8004bb2:	f77f af7a 	ble.w	8004aaa <_printf_float+0x242>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4652      	mov	r2, sl
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f aeac 	beq.w	800491e <_printf_float+0xb6>
 8004bc6:	f108 0801 	add.w	r8, r8, #1
 8004bca:	e7ec      	b.n	8004ba6 <_printf_float+0x33e>
 8004bcc:	4613      	mov	r3, r2
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d1c0      	bne.n	8004b5c <_printf_float+0x2f4>
 8004bda:	e6a0      	b.n	800491e <_printf_float+0xb6>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004be4:	47b8      	blx	r7
 8004be6:	3001      	adds	r0, #1
 8004be8:	f43f ae99 	beq.w	800491e <_printf_float+0xb6>
 8004bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bee:	f10b 0b01 	add.w	fp, fp, #1
 8004bf2:	e7b9      	b.n	8004b68 <_printf_float+0x300>
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d1bf      	bne.n	8004b82 <_printf_float+0x31a>
 8004c02:	e68c      	b.n	800491e <_printf_float+0xb6>
 8004c04:	464b      	mov	r3, r9
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	eb08 020a 	add.w	r2, r8, sl
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	d1c2      	bne.n	8004b9a <_printf_float+0x332>
 8004c14:	e683      	b.n	800491e <_printf_float+0xb6>
 8004c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c18:	2a01      	cmp	r2, #1
 8004c1a:	dc01      	bgt.n	8004c20 <_printf_float+0x3b8>
 8004c1c:	07db      	lsls	r3, r3, #31
 8004c1e:	d537      	bpl.n	8004c90 <_printf_float+0x428>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4642      	mov	r2, r8
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f ae77 	beq.w	800491e <_printf_float+0xb6>
 8004c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f ae6f 	beq.w	800491e <_printf_float+0xb6>
 8004c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f7fb feae 	bl	80009a8 <__aeabi_dcmpeq>
 8004c4c:	b9d8      	cbnz	r0, 8004c86 <_printf_float+0x41e>
 8004c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c50:	f108 0201 	add.w	r2, r8, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d10e      	bne.n	8004c7e <_printf_float+0x416>
 8004c60:	e65d      	b.n	800491e <_printf_float+0xb6>
 8004c62:	2301      	movs	r3, #1
 8004c64:	464a      	mov	r2, r9
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f43f ae56 	beq.w	800491e <_printf_float+0xb6>
 8004c72:	f108 0801 	add.w	r8, r8, #1
 8004c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	4543      	cmp	r3, r8
 8004c7c:	dcf1      	bgt.n	8004c62 <_printf_float+0x3fa>
 8004c7e:	4653      	mov	r3, sl
 8004c80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c84:	e6e0      	b.n	8004a48 <_printf_float+0x1e0>
 8004c86:	f04f 0800 	mov.w	r8, #0
 8004c8a:	f104 091a 	add.w	r9, r4, #26
 8004c8e:	e7f2      	b.n	8004c76 <_printf_float+0x40e>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4642      	mov	r2, r8
 8004c94:	e7df      	b.n	8004c56 <_printf_float+0x3ee>
 8004c96:	2301      	movs	r3, #1
 8004c98:	464a      	mov	r2, r9
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f ae3c 	beq.w	800491e <_printf_float+0xb6>
 8004ca6:	f108 0801 	add.w	r8, r8, #1
 8004caa:	68e3      	ldr	r3, [r4, #12]
 8004cac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004cae:	1a5b      	subs	r3, r3, r1
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	dcf0      	bgt.n	8004c96 <_printf_float+0x42e>
 8004cb4:	e6fd      	b.n	8004ab2 <_printf_float+0x24a>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 0919 	add.w	r9, r4, #25
 8004cbe:	e7f4      	b.n	8004caa <_printf_float+0x442>

08004cc0 <_printf_common>:
 8004cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc4:	4616      	mov	r6, r2
 8004cc6:	4699      	mov	r9, r3
 8004cc8:	688a      	ldr	r2, [r1, #8]
 8004cca:	690b      	ldr	r3, [r1, #16]
 8004ccc:	4607      	mov	r7, r0
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	bfb8      	it	lt
 8004cd2:	4613      	movlt	r3, r2
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cda:	460c      	mov	r4, r1
 8004cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce0:	b10a      	cbz	r2, 8004ce6 <_printf_common+0x26>
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	6033      	str	r3, [r6, #0]
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	0699      	lsls	r1, r3, #26
 8004cea:	bf42      	ittt	mi
 8004cec:	6833      	ldrmi	r3, [r6, #0]
 8004cee:	3302      	addmi	r3, #2
 8004cf0:	6033      	strmi	r3, [r6, #0]
 8004cf2:	6825      	ldr	r5, [r4, #0]
 8004cf4:	f015 0506 	ands.w	r5, r5, #6
 8004cf8:	d106      	bne.n	8004d08 <_printf_common+0x48>
 8004cfa:	f104 0a19 	add.w	sl, r4, #25
 8004cfe:	68e3      	ldr	r3, [r4, #12]
 8004d00:	6832      	ldr	r2, [r6, #0]
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	42ab      	cmp	r3, r5
 8004d06:	dc28      	bgt.n	8004d5a <_printf_common+0x9a>
 8004d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d0c:	1e13      	subs	r3, r2, #0
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	bf18      	it	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	0692      	lsls	r2, r2, #26
 8004d16:	d42d      	bmi.n	8004d74 <_printf_common+0xb4>
 8004d18:	4649      	mov	r1, r9
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d20:	47c0      	blx	r8
 8004d22:	3001      	adds	r0, #1
 8004d24:	d020      	beq.n	8004d68 <_printf_common+0xa8>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	68e5      	ldr	r5, [r4, #12]
 8004d2a:	f003 0306 	and.w	r3, r3, #6
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	bf18      	it	ne
 8004d32:	2500      	movne	r5, #0
 8004d34:	6832      	ldr	r2, [r6, #0]
 8004d36:	f04f 0600 	mov.w	r6, #0
 8004d3a:	68a3      	ldr	r3, [r4, #8]
 8004d3c:	bf08      	it	eq
 8004d3e:	1aad      	subeq	r5, r5, r2
 8004d40:	6922      	ldr	r2, [r4, #16]
 8004d42:	bf08      	it	eq
 8004d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	bfc4      	itt	gt
 8004d4c:	1a9b      	subgt	r3, r3, r2
 8004d4e:	18ed      	addgt	r5, r5, r3
 8004d50:	341a      	adds	r4, #26
 8004d52:	42b5      	cmp	r5, r6
 8004d54:	d11a      	bne.n	8004d8c <_printf_common+0xcc>
 8004d56:	2000      	movs	r0, #0
 8004d58:	e008      	b.n	8004d6c <_printf_common+0xac>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4638      	mov	r0, r7
 8004d62:	47c0      	blx	r8
 8004d64:	3001      	adds	r0, #1
 8004d66:	d103      	bne.n	8004d70 <_printf_common+0xb0>
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d70:	3501      	adds	r5, #1
 8004d72:	e7c4      	b.n	8004cfe <_printf_common+0x3e>
 8004d74:	2030      	movs	r0, #48	; 0x30
 8004d76:	18e1      	adds	r1, r4, r3
 8004d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d82:	4422      	add	r2, r4
 8004d84:	3302      	adds	r3, #2
 8004d86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d8a:	e7c5      	b.n	8004d18 <_printf_common+0x58>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4622      	mov	r2, r4
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d0e6      	beq.n	8004d68 <_printf_common+0xa8>
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7d9      	b.n	8004d52 <_printf_common+0x92>
	...

08004da0 <_printf_i>:
 8004da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	7e0f      	ldrb	r7, [r1, #24]
 8004da6:	4691      	mov	r9, r2
 8004da8:	2f78      	cmp	r7, #120	; 0x78
 8004daa:	4680      	mov	r8, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	469a      	mov	sl, r3
 8004db0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004db6:	d807      	bhi.n	8004dc8 <_printf_i+0x28>
 8004db8:	2f62      	cmp	r7, #98	; 0x62
 8004dba:	d80a      	bhi.n	8004dd2 <_printf_i+0x32>
 8004dbc:	2f00      	cmp	r7, #0
 8004dbe:	f000 80d9 	beq.w	8004f74 <_printf_i+0x1d4>
 8004dc2:	2f58      	cmp	r7, #88	; 0x58
 8004dc4:	f000 80a4 	beq.w	8004f10 <_printf_i+0x170>
 8004dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd0:	e03a      	b.n	8004e48 <_printf_i+0xa8>
 8004dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dd6:	2b15      	cmp	r3, #21
 8004dd8:	d8f6      	bhi.n	8004dc8 <_printf_i+0x28>
 8004dda:	a101      	add	r1, pc, #4	; (adr r1, 8004de0 <_printf_i+0x40>)
 8004ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de0:	08004e39 	.word	0x08004e39
 8004de4:	08004e4d 	.word	0x08004e4d
 8004de8:	08004dc9 	.word	0x08004dc9
 8004dec:	08004dc9 	.word	0x08004dc9
 8004df0:	08004dc9 	.word	0x08004dc9
 8004df4:	08004dc9 	.word	0x08004dc9
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004dc9 	.word	0x08004dc9
 8004e00:	08004dc9 	.word	0x08004dc9
 8004e04:	08004dc9 	.word	0x08004dc9
 8004e08:	08004dc9 	.word	0x08004dc9
 8004e0c:	08004f5b 	.word	0x08004f5b
 8004e10:	08004e7d 	.word	0x08004e7d
 8004e14:	08004f3d 	.word	0x08004f3d
 8004e18:	08004dc9 	.word	0x08004dc9
 8004e1c:	08004dc9 	.word	0x08004dc9
 8004e20:	08004f7d 	.word	0x08004f7d
 8004e24:	08004dc9 	.word	0x08004dc9
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004dc9 	.word	0x08004dc9
 8004e30:	08004dc9 	.word	0x08004dc9
 8004e34:	08004f45 	.word	0x08004f45
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	602a      	str	r2, [r5, #0]
 8004e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0a4      	b.n	8004f96 <_printf_i+0x1f6>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	6829      	ldr	r1, [r5, #0]
 8004e50:	0606      	lsls	r6, r0, #24
 8004e52:	f101 0304 	add.w	r3, r1, #4
 8004e56:	d50a      	bpl.n	8004e6e <_printf_i+0xce>
 8004e58:	680e      	ldr	r6, [r1, #0]
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	2e00      	cmp	r6, #0
 8004e5e:	da03      	bge.n	8004e68 <_printf_i+0xc8>
 8004e60:	232d      	movs	r3, #45	; 0x2d
 8004e62:	4276      	negs	r6, r6
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e68:	230a      	movs	r3, #10
 8004e6a:	485e      	ldr	r0, [pc, #376]	; (8004fe4 <_printf_i+0x244>)
 8004e6c:	e019      	b.n	8004ea2 <_printf_i+0x102>
 8004e6e:	680e      	ldr	r6, [r1, #0]
 8004e70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e74:	602b      	str	r3, [r5, #0]
 8004e76:	bf18      	it	ne
 8004e78:	b236      	sxthne	r6, r6
 8004e7a:	e7ef      	b.n	8004e5c <_printf_i+0xbc>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1d19      	adds	r1, r3, #4
 8004e82:	6029      	str	r1, [r5, #0]
 8004e84:	0601      	lsls	r1, r0, #24
 8004e86:	d501      	bpl.n	8004e8c <_printf_i+0xec>
 8004e88:	681e      	ldr	r6, [r3, #0]
 8004e8a:	e002      	b.n	8004e92 <_printf_i+0xf2>
 8004e8c:	0646      	lsls	r6, r0, #25
 8004e8e:	d5fb      	bpl.n	8004e88 <_printf_i+0xe8>
 8004e90:	881e      	ldrh	r6, [r3, #0]
 8004e92:	2f6f      	cmp	r7, #111	; 0x6f
 8004e94:	bf0c      	ite	eq
 8004e96:	2308      	moveq	r3, #8
 8004e98:	230a      	movne	r3, #10
 8004e9a:	4852      	ldr	r0, [pc, #328]	; (8004fe4 <_printf_i+0x244>)
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ea2:	6865      	ldr	r5, [r4, #4]
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	bfa8      	it	ge
 8004ea8:	6821      	ldrge	r1, [r4, #0]
 8004eaa:	60a5      	str	r5, [r4, #8]
 8004eac:	bfa4      	itt	ge
 8004eae:	f021 0104 	bicge.w	r1, r1, #4
 8004eb2:	6021      	strge	r1, [r4, #0]
 8004eb4:	b90e      	cbnz	r6, 8004eba <_printf_i+0x11a>
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	d04d      	beq.n	8004f56 <_printf_i+0x1b6>
 8004eba:	4615      	mov	r5, r2
 8004ebc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ec0:	fb03 6711 	mls	r7, r3, r1, r6
 8004ec4:	5dc7      	ldrb	r7, [r0, r7]
 8004ec6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eca:	4637      	mov	r7, r6
 8004ecc:	42bb      	cmp	r3, r7
 8004ece:	460e      	mov	r6, r1
 8004ed0:	d9f4      	bls.n	8004ebc <_printf_i+0x11c>
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d10b      	bne.n	8004eee <_printf_i+0x14e>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	07de      	lsls	r6, r3, #31
 8004eda:	d508      	bpl.n	8004eee <_printf_i+0x14e>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	6861      	ldr	r1, [r4, #4]
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	bfde      	ittt	le
 8004ee4:	2330      	movle	r3, #48	; 0x30
 8004ee6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eee:	1b52      	subs	r2, r2, r5
 8004ef0:	6122      	str	r2, [r4, #16]
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f8cd a000 	str.w	sl, [sp]
 8004efc:	aa03      	add	r2, sp, #12
 8004efe:	f7ff fedf 	bl	8004cc0 <_printf_common>
 8004f02:	3001      	adds	r0, #1
 8004f04:	d14c      	bne.n	8004fa0 <_printf_i+0x200>
 8004f06:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0a:	b004      	add	sp, #16
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	4834      	ldr	r0, [pc, #208]	; (8004fe4 <_printf_i+0x244>)
 8004f12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f16:	6829      	ldr	r1, [r5, #0]
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f1e:	6029      	str	r1, [r5, #0]
 8004f20:	061d      	lsls	r5, r3, #24
 8004f22:	d514      	bpl.n	8004f4e <_printf_i+0x1ae>
 8004f24:	07df      	lsls	r7, r3, #31
 8004f26:	bf44      	itt	mi
 8004f28:	f043 0320 	orrmi.w	r3, r3, #32
 8004f2c:	6023      	strmi	r3, [r4, #0]
 8004f2e:	b91e      	cbnz	r6, 8004f38 <_printf_i+0x198>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	f023 0320 	bic.w	r3, r3, #32
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	2310      	movs	r3, #16
 8004f3a:	e7af      	b.n	8004e9c <_printf_i+0xfc>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	f043 0320 	orr.w	r3, r3, #32
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	2378      	movs	r3, #120	; 0x78
 8004f46:	4828      	ldr	r0, [pc, #160]	; (8004fe8 <_printf_i+0x248>)
 8004f48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f4c:	e7e3      	b.n	8004f16 <_printf_i+0x176>
 8004f4e:	0659      	lsls	r1, r3, #25
 8004f50:	bf48      	it	mi
 8004f52:	b2b6      	uxthmi	r6, r6
 8004f54:	e7e6      	b.n	8004f24 <_printf_i+0x184>
 8004f56:	4615      	mov	r5, r2
 8004f58:	e7bb      	b.n	8004ed2 <_printf_i+0x132>
 8004f5a:	682b      	ldr	r3, [r5, #0]
 8004f5c:	6826      	ldr	r6, [r4, #0]
 8004f5e:	1d18      	adds	r0, r3, #4
 8004f60:	6961      	ldr	r1, [r4, #20]
 8004f62:	6028      	str	r0, [r5, #0]
 8004f64:	0635      	lsls	r5, r6, #24
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	d501      	bpl.n	8004f6e <_printf_i+0x1ce>
 8004f6a:	6019      	str	r1, [r3, #0]
 8004f6c:	e002      	b.n	8004f74 <_printf_i+0x1d4>
 8004f6e:	0670      	lsls	r0, r6, #25
 8004f70:	d5fb      	bpl.n	8004f6a <_printf_i+0x1ca>
 8004f72:	8019      	strh	r1, [r3, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	4615      	mov	r5, r2
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	e7ba      	b.n	8004ef2 <_printf_i+0x152>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	2100      	movs	r1, #0
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	602a      	str	r2, [r5, #0]
 8004f84:	681d      	ldr	r5, [r3, #0]
 8004f86:	6862      	ldr	r2, [r4, #4]
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f000 feeb 	bl	8005d64 <memchr>
 8004f8e:	b108      	cbz	r0, 8004f94 <_printf_i+0x1f4>
 8004f90:	1b40      	subs	r0, r0, r5
 8004f92:	6060      	str	r0, [r4, #4]
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9e:	e7a8      	b.n	8004ef2 <_printf_i+0x152>
 8004fa0:	462a      	mov	r2, r5
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	47d0      	blx	sl
 8004faa:	3001      	adds	r0, #1
 8004fac:	d0ab      	beq.n	8004f06 <_printf_i+0x166>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	079b      	lsls	r3, r3, #30
 8004fb2:	d413      	bmi.n	8004fdc <_printf_i+0x23c>
 8004fb4:	68e0      	ldr	r0, [r4, #12]
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	4298      	cmp	r0, r3
 8004fba:	bfb8      	it	lt
 8004fbc:	4618      	movlt	r0, r3
 8004fbe:	e7a4      	b.n	8004f0a <_printf_i+0x16a>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	47d0      	blx	sl
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d09b      	beq.n	8004f06 <_printf_i+0x166>
 8004fce:	3501      	adds	r5, #1
 8004fd0:	68e3      	ldr	r3, [r4, #12]
 8004fd2:	9903      	ldr	r1, [sp, #12]
 8004fd4:	1a5b      	subs	r3, r3, r1
 8004fd6:	42ab      	cmp	r3, r5
 8004fd8:	dcf2      	bgt.n	8004fc0 <_printf_i+0x220>
 8004fda:	e7eb      	b.n	8004fb4 <_printf_i+0x214>
 8004fdc:	2500      	movs	r5, #0
 8004fde:	f104 0619 	add.w	r6, r4, #25
 8004fe2:	e7f5      	b.n	8004fd0 <_printf_i+0x230>
 8004fe4:	0800757a 	.word	0x0800757a
 8004fe8:	0800758b 	.word	0x0800758b

08004fec <sniprintf>:
 8004fec:	b40c      	push	{r2, r3}
 8004fee:	b530      	push	{r4, r5, lr}
 8004ff0:	4b17      	ldr	r3, [pc, #92]	; (8005050 <sniprintf+0x64>)
 8004ff2:	1e0c      	subs	r4, r1, #0
 8004ff4:	681d      	ldr	r5, [r3, #0]
 8004ff6:	b09d      	sub	sp, #116	; 0x74
 8004ff8:	da08      	bge.n	800500c <sniprintf+0x20>
 8004ffa:	238b      	movs	r3, #139	; 0x8b
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	b01d      	add	sp, #116	; 0x74
 8005004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005008:	b002      	add	sp, #8
 800500a:	4770      	bx	lr
 800500c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005014:	bf0c      	ite	eq
 8005016:	4623      	moveq	r3, r4
 8005018:	f104 33ff 	addne.w	r3, r4, #4294967295
 800501c:	9304      	str	r3, [sp, #16]
 800501e:	9307      	str	r3, [sp, #28]
 8005020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005024:	9002      	str	r0, [sp, #8]
 8005026:	9006      	str	r0, [sp, #24]
 8005028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800502c:	4628      	mov	r0, r5
 800502e:	ab21      	add	r3, sp, #132	; 0x84
 8005030:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005032:	a902      	add	r1, sp, #8
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	f001 fb7f 	bl	8006738 <_svfiprintf_r>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	bfbc      	itt	lt
 800503e:	238b      	movlt	r3, #139	; 0x8b
 8005040:	602b      	strlt	r3, [r5, #0]
 8005042:	2c00      	cmp	r4, #0
 8005044:	d0dd      	beq.n	8005002 <sniprintf+0x16>
 8005046:	2200      	movs	r2, #0
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e7d9      	b.n	8005002 <sniprintf+0x16>
 800504e:	bf00      	nop
 8005050:	2000001c 	.word	0x2000001c

08005054 <quorem>:
 8005054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	6903      	ldr	r3, [r0, #16]
 800505a:	690c      	ldr	r4, [r1, #16]
 800505c:	4607      	mov	r7, r0
 800505e:	42a3      	cmp	r3, r4
 8005060:	f2c0 8082 	blt.w	8005168 <quorem+0x114>
 8005064:	3c01      	subs	r4, #1
 8005066:	f100 0514 	add.w	r5, r0, #20
 800506a:	f101 0814 	add.w	r8, r1, #20
 800506e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800507c:	3301      	adds	r3, #1
 800507e:	429a      	cmp	r2, r3
 8005080:	fbb2 f6f3 	udiv	r6, r2, r3
 8005084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800508c:	d331      	bcc.n	80050f2 <quorem+0x9e>
 800508e:	f04f 0e00 	mov.w	lr, #0
 8005092:	4640      	mov	r0, r8
 8005094:	46ac      	mov	ip, r5
 8005096:	46f2      	mov	sl, lr
 8005098:	f850 2b04 	ldr.w	r2, [r0], #4
 800509c:	b293      	uxth	r3, r2
 800509e:	fb06 e303 	mla	r3, r6, r3, lr
 80050a2:	0c12      	lsrs	r2, r2, #16
 80050a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	fb06 e202 	mla	r2, r6, r2, lr
 80050ae:	ebaa 0303 	sub.w	r3, sl, r3
 80050b2:	f8dc a000 	ldr.w	sl, [ip]
 80050b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050ba:	fa1f fa8a 	uxth.w	sl, sl
 80050be:	4453      	add	r3, sl
 80050c0:	f8dc a000 	ldr.w	sl, [ip]
 80050c4:	b292      	uxth	r2, r2
 80050c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050d4:	4581      	cmp	r9, r0
 80050d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050da:	f84c 3b04 	str.w	r3, [ip], #4
 80050de:	d2db      	bcs.n	8005098 <quorem+0x44>
 80050e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80050e4:	b92b      	cbnz	r3, 80050f2 <quorem+0x9e>
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	429d      	cmp	r5, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	d32f      	bcc.n	8005150 <quorem+0xfc>
 80050f0:	613c      	str	r4, [r7, #16]
 80050f2:	4638      	mov	r0, r7
 80050f4:	f001 f8d0 	bl	8006298 <__mcmp>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	db25      	blt.n	8005148 <quorem+0xf4>
 80050fc:	4628      	mov	r0, r5
 80050fe:	f04f 0c00 	mov.w	ip, #0
 8005102:	3601      	adds	r6, #1
 8005104:	f858 1b04 	ldr.w	r1, [r8], #4
 8005108:	f8d0 e000 	ldr.w	lr, [r0]
 800510c:	b28b      	uxth	r3, r1
 800510e:	ebac 0303 	sub.w	r3, ip, r3
 8005112:	fa1f f28e 	uxth.w	r2, lr
 8005116:	4413      	add	r3, r2
 8005118:	0c0a      	lsrs	r2, r1, #16
 800511a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800511e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005128:	45c1      	cmp	r9, r8
 800512a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800512e:	f840 3b04 	str.w	r3, [r0], #4
 8005132:	d2e7      	bcs.n	8005104 <quorem+0xb0>
 8005134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005138:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800513c:	b922      	cbnz	r2, 8005148 <quorem+0xf4>
 800513e:	3b04      	subs	r3, #4
 8005140:	429d      	cmp	r5, r3
 8005142:	461a      	mov	r2, r3
 8005144:	d30a      	bcc.n	800515c <quorem+0x108>
 8005146:	613c      	str	r4, [r7, #16]
 8005148:	4630      	mov	r0, r6
 800514a:	b003      	add	sp, #12
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	3b04      	subs	r3, #4
 8005154:	2a00      	cmp	r2, #0
 8005156:	d1cb      	bne.n	80050f0 <quorem+0x9c>
 8005158:	3c01      	subs	r4, #1
 800515a:	e7c6      	b.n	80050ea <quorem+0x96>
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	3b04      	subs	r3, #4
 8005160:	2a00      	cmp	r2, #0
 8005162:	d1f0      	bne.n	8005146 <quorem+0xf2>
 8005164:	3c01      	subs	r4, #1
 8005166:	e7eb      	b.n	8005140 <quorem+0xec>
 8005168:	2000      	movs	r0, #0
 800516a:	e7ee      	b.n	800514a <quorem+0xf6>
 800516c:	0000      	movs	r0, r0
	...

08005170 <_dtoa_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	4616      	mov	r6, r2
 8005176:	461f      	mov	r7, r3
 8005178:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800517a:	b099      	sub	sp, #100	; 0x64
 800517c:	4605      	mov	r5, r0
 800517e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005182:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005186:	b974      	cbnz	r4, 80051a6 <_dtoa_r+0x36>
 8005188:	2010      	movs	r0, #16
 800518a:	f000 fde3 	bl	8005d54 <malloc>
 800518e:	4602      	mov	r2, r0
 8005190:	6268      	str	r0, [r5, #36]	; 0x24
 8005192:	b920      	cbnz	r0, 800519e <_dtoa_r+0x2e>
 8005194:	21ea      	movs	r1, #234	; 0xea
 8005196:	4ba8      	ldr	r3, [pc, #672]	; (8005438 <_dtoa_r+0x2c8>)
 8005198:	48a8      	ldr	r0, [pc, #672]	; (800543c <_dtoa_r+0x2cc>)
 800519a:	f001 fbdd 	bl	8006958 <__assert_func>
 800519e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051a2:	6004      	str	r4, [r0, #0]
 80051a4:	60c4      	str	r4, [r0, #12]
 80051a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	b151      	cbz	r1, 80051c2 <_dtoa_r+0x52>
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	2301      	movs	r3, #1
 80051b0:	4093      	lsls	r3, r2
 80051b2:	604a      	str	r2, [r1, #4]
 80051b4:	608b      	str	r3, [r1, #8]
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 fe30 	bl	8005e1c <_Bfree>
 80051bc:	2200      	movs	r2, #0
 80051be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	1e3b      	subs	r3, r7, #0
 80051c4:	bfaf      	iteee	ge
 80051c6:	2300      	movge	r3, #0
 80051c8:	2201      	movlt	r2, #1
 80051ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051ce:	9305      	strlt	r3, [sp, #20]
 80051d0:	bfa8      	it	ge
 80051d2:	f8c8 3000 	strge.w	r3, [r8]
 80051d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051da:	4b99      	ldr	r3, [pc, #612]	; (8005440 <_dtoa_r+0x2d0>)
 80051dc:	bfb8      	it	lt
 80051de:	f8c8 2000 	strlt.w	r2, [r8]
 80051e2:	ea33 0309 	bics.w	r3, r3, r9
 80051e6:	d119      	bne.n	800521c <_dtoa_r+0xac>
 80051e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80051ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051f4:	4333      	orrs	r3, r6
 80051f6:	f000 857f 	beq.w	8005cf8 <_dtoa_r+0xb88>
 80051fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051fc:	b953      	cbnz	r3, 8005214 <_dtoa_r+0xa4>
 80051fe:	4b91      	ldr	r3, [pc, #580]	; (8005444 <_dtoa_r+0x2d4>)
 8005200:	e022      	b.n	8005248 <_dtoa_r+0xd8>
 8005202:	4b91      	ldr	r3, [pc, #580]	; (8005448 <_dtoa_r+0x2d8>)
 8005204:	9303      	str	r3, [sp, #12]
 8005206:	3308      	adds	r3, #8
 8005208:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	9803      	ldr	r0, [sp, #12]
 800520e:	b019      	add	sp, #100	; 0x64
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <_dtoa_r+0x2d4>)
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	3303      	adds	r3, #3
 800521a:	e7f5      	b.n	8005208 <_dtoa_r+0x98>
 800521c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005220:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	f7fb fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 8005230:	4680      	mov	r8, r0
 8005232:	b158      	cbz	r0, 800524c <_dtoa_r+0xdc>
 8005234:	2301      	movs	r3, #1
 8005236:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8558 	beq.w	8005cf2 <_dtoa_r+0xb82>
 8005242:	4882      	ldr	r0, [pc, #520]	; (800544c <_dtoa_r+0x2dc>)
 8005244:	6018      	str	r0, [r3, #0]
 8005246:	1e43      	subs	r3, r0, #1
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	e7df      	b.n	800520c <_dtoa_r+0x9c>
 800524c:	ab16      	add	r3, sp, #88	; 0x58
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	ab17      	add	r3, sp, #92	; 0x5c
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4628      	mov	r0, r5
 8005256:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800525a:	f001 f8c5 	bl	80063e8 <__d2b>
 800525e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005262:	4683      	mov	fp, r0
 8005264:	2c00      	cmp	r4, #0
 8005266:	d07f      	beq.n	8005368 <_dtoa_r+0x1f8>
 8005268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800526c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800526e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005276:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800527a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800527e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005282:	2200      	movs	r2, #0
 8005284:	4b72      	ldr	r3, [pc, #456]	; (8005450 <_dtoa_r+0x2e0>)
 8005286:	f7fa ff6f 	bl	8000168 <__aeabi_dsub>
 800528a:	a365      	add	r3, pc, #404	; (adr r3, 8005420 <_dtoa_r+0x2b0>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb f922 	bl	80004d8 <__aeabi_dmul>
 8005294:	a364      	add	r3, pc, #400	; (adr r3, 8005428 <_dtoa_r+0x2b8>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fa ff67 	bl	800016c <__adddf3>
 800529e:	4606      	mov	r6, r0
 80052a0:	4620      	mov	r0, r4
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fb f8ae 	bl	8000404 <__aeabi_i2d>
 80052a8:	a361      	add	r3, pc, #388	; (adr r3, 8005430 <_dtoa_r+0x2c0>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fb f913 	bl	80004d8 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	f7fa ff57 	bl	800016c <__adddf3>
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	f7fb fbb9 	bl	8000a38 <__aeabi_d2iz>
 80052c6:	2200      	movs	r2, #0
 80052c8:	4682      	mov	sl, r0
 80052ca:	2300      	movs	r3, #0
 80052cc:	4630      	mov	r0, r6
 80052ce:	4639      	mov	r1, r7
 80052d0:	f7fb fb74 	bl	80009bc <__aeabi_dcmplt>
 80052d4:	b148      	cbz	r0, 80052ea <_dtoa_r+0x17a>
 80052d6:	4650      	mov	r0, sl
 80052d8:	f7fb f894 	bl	8000404 <__aeabi_i2d>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	f7fb fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80052e4:	b908      	cbnz	r0, 80052ea <_dtoa_r+0x17a>
 80052e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ea:	f1ba 0f16 	cmp.w	sl, #22
 80052ee:	d858      	bhi.n	80053a2 <_dtoa_r+0x232>
 80052f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <_dtoa_r+0x2e4>)
 80052f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb fb5d 	bl	80009bc <__aeabi_dcmplt>
 8005302:	2800      	cmp	r0, #0
 8005304:	d04f      	beq.n	80053a6 <_dtoa_r+0x236>
 8005306:	2300      	movs	r3, #0
 8005308:	f10a 3aff 	add.w	sl, sl, #4294967295
 800530c:	930f      	str	r3, [sp, #60]	; 0x3c
 800530e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005310:	1b1c      	subs	r4, r3, r4
 8005312:	1e63      	subs	r3, r4, #1
 8005314:	9309      	str	r3, [sp, #36]	; 0x24
 8005316:	bf49      	itett	mi
 8005318:	f1c4 0301 	rsbmi	r3, r4, #1
 800531c:	2300      	movpl	r3, #0
 800531e:	9306      	strmi	r3, [sp, #24]
 8005320:	2300      	movmi	r3, #0
 8005322:	bf54      	ite	pl
 8005324:	9306      	strpl	r3, [sp, #24]
 8005326:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005328:	f1ba 0f00 	cmp.w	sl, #0
 800532c:	db3d      	blt.n	80053aa <_dtoa_r+0x23a>
 800532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005330:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005334:	4453      	add	r3, sl
 8005336:	9309      	str	r3, [sp, #36]	; 0x24
 8005338:	2300      	movs	r3, #0
 800533a:	930a      	str	r3, [sp, #40]	; 0x28
 800533c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800533e:	2b09      	cmp	r3, #9
 8005340:	f200 808c 	bhi.w	800545c <_dtoa_r+0x2ec>
 8005344:	2b05      	cmp	r3, #5
 8005346:	bfc4      	itt	gt
 8005348:	3b04      	subgt	r3, #4
 800534a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800534c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800534e:	bfc8      	it	gt
 8005350:	2400      	movgt	r4, #0
 8005352:	f1a3 0302 	sub.w	r3, r3, #2
 8005356:	bfd8      	it	le
 8005358:	2401      	movle	r4, #1
 800535a:	2b03      	cmp	r3, #3
 800535c:	f200 808a 	bhi.w	8005474 <_dtoa_r+0x304>
 8005360:	e8df f003 	tbb	[pc, r3]
 8005364:	5b4d4f2d 	.word	0x5b4d4f2d
 8005368:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800536c:	441c      	add	r4, r3
 800536e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005372:	2b20      	cmp	r3, #32
 8005374:	bfc3      	ittte	gt
 8005376:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800537a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800537e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005382:	f1c3 0320 	rsble	r3, r3, #32
 8005386:	bfc6      	itte	gt
 8005388:	fa26 f000 	lsrgt.w	r0, r6, r0
 800538c:	4318      	orrgt	r0, r3
 800538e:	fa06 f003 	lslle.w	r0, r6, r3
 8005392:	f7fb f827 	bl	80003e4 <__aeabi_ui2d>
 8005396:	2301      	movs	r3, #1
 8005398:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800539c:	3c01      	subs	r4, #1
 800539e:	9313      	str	r3, [sp, #76]	; 0x4c
 80053a0:	e76f      	b.n	8005282 <_dtoa_r+0x112>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e7b2      	b.n	800530c <_dtoa_r+0x19c>
 80053a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80053a8:	e7b1      	b.n	800530e <_dtoa_r+0x19e>
 80053aa:	9b06      	ldr	r3, [sp, #24]
 80053ac:	eba3 030a 	sub.w	r3, r3, sl
 80053b0:	9306      	str	r3, [sp, #24]
 80053b2:	f1ca 0300 	rsb	r3, sl, #0
 80053b6:	930a      	str	r3, [sp, #40]	; 0x28
 80053b8:	2300      	movs	r3, #0
 80053ba:	930e      	str	r3, [sp, #56]	; 0x38
 80053bc:	e7be      	b.n	800533c <_dtoa_r+0x1cc>
 80053be:	2300      	movs	r3, #0
 80053c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dc58      	bgt.n	800547a <_dtoa_r+0x30a>
 80053c8:	f04f 0901 	mov.w	r9, #1
 80053cc:	464b      	mov	r3, r9
 80053ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80053d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80053d6:	2200      	movs	r2, #0
 80053d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80053da:	6042      	str	r2, [r0, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	f102 0614 	add.w	r6, r2, #20
 80053e2:	429e      	cmp	r6, r3
 80053e4:	6841      	ldr	r1, [r0, #4]
 80053e6:	d94e      	bls.n	8005486 <_dtoa_r+0x316>
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 fcd7 	bl	8005d9c <_Balloc>
 80053ee:	9003      	str	r0, [sp, #12]
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d14c      	bne.n	800548e <_dtoa_r+0x31e>
 80053f4:	4602      	mov	r2, r0
 80053f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <_dtoa_r+0x2e8>)
 80053fc:	e6cc      	b.n	8005198 <_dtoa_r+0x28>
 80053fe:	2301      	movs	r3, #1
 8005400:	e7de      	b.n	80053c0 <_dtoa_r+0x250>
 8005402:	2300      	movs	r3, #0
 8005404:	930b      	str	r3, [sp, #44]	; 0x2c
 8005406:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005408:	eb0a 0903 	add.w	r9, sl, r3
 800540c:	f109 0301 	add.w	r3, r9, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	9308      	str	r3, [sp, #32]
 8005414:	bfb8      	it	lt
 8005416:	2301      	movlt	r3, #1
 8005418:	e7dd      	b.n	80053d6 <_dtoa_r+0x266>
 800541a:	2301      	movs	r3, #1
 800541c:	e7f2      	b.n	8005404 <_dtoa_r+0x294>
 800541e:	bf00      	nop
 8005420:	636f4361 	.word	0x636f4361
 8005424:	3fd287a7 	.word	0x3fd287a7
 8005428:	8b60c8b3 	.word	0x8b60c8b3
 800542c:	3fc68a28 	.word	0x3fc68a28
 8005430:	509f79fb 	.word	0x509f79fb
 8005434:	3fd34413 	.word	0x3fd34413
 8005438:	080075a9 	.word	0x080075a9
 800543c:	080075c0 	.word	0x080075c0
 8005440:	7ff00000 	.word	0x7ff00000
 8005444:	080075a5 	.word	0x080075a5
 8005448:	0800759c 	.word	0x0800759c
 800544c:	08007579 	.word	0x08007579
 8005450:	3ff80000 	.word	0x3ff80000
 8005454:	080076b0 	.word	0x080076b0
 8005458:	0800761b 	.word	0x0800761b
 800545c:	2401      	movs	r4, #1
 800545e:	2300      	movs	r3, #0
 8005460:	940b      	str	r4, [sp, #44]	; 0x2c
 8005462:	9322      	str	r3, [sp, #136]	; 0x88
 8005464:	f04f 39ff 	mov.w	r9, #4294967295
 8005468:	2200      	movs	r2, #0
 800546a:	2312      	movs	r3, #18
 800546c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005470:	9223      	str	r2, [sp, #140]	; 0x8c
 8005472:	e7b0      	b.n	80053d6 <_dtoa_r+0x266>
 8005474:	2301      	movs	r3, #1
 8005476:	930b      	str	r3, [sp, #44]	; 0x2c
 8005478:	e7f4      	b.n	8005464 <_dtoa_r+0x2f4>
 800547a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800547e:	464b      	mov	r3, r9
 8005480:	f8cd 9020 	str.w	r9, [sp, #32]
 8005484:	e7a7      	b.n	80053d6 <_dtoa_r+0x266>
 8005486:	3101      	adds	r1, #1
 8005488:	6041      	str	r1, [r0, #4]
 800548a:	0052      	lsls	r2, r2, #1
 800548c:	e7a7      	b.n	80053de <_dtoa_r+0x26e>
 800548e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005490:	9a03      	ldr	r2, [sp, #12]
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	9b08      	ldr	r3, [sp, #32]
 8005496:	2b0e      	cmp	r3, #14
 8005498:	f200 80a8 	bhi.w	80055ec <_dtoa_r+0x47c>
 800549c:	2c00      	cmp	r4, #0
 800549e:	f000 80a5 	beq.w	80055ec <_dtoa_r+0x47c>
 80054a2:	f1ba 0f00 	cmp.w	sl, #0
 80054a6:	dd34      	ble.n	8005512 <_dtoa_r+0x3a2>
 80054a8:	4a9a      	ldr	r2, [pc, #616]	; (8005714 <_dtoa_r+0x5a4>)
 80054aa:	f00a 030f 	and.w	r3, sl, #15
 80054ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80054b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80054c2:	d016      	beq.n	80054f2 <_dtoa_r+0x382>
 80054c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c8:	4b93      	ldr	r3, [pc, #588]	; (8005718 <_dtoa_r+0x5a8>)
 80054ca:	2703      	movs	r7, #3
 80054cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054d0:	f7fb f92c 	bl	800072c <__aeabi_ddiv>
 80054d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054d8:	f004 040f 	and.w	r4, r4, #15
 80054dc:	4e8e      	ldr	r6, [pc, #568]	; (8005718 <_dtoa_r+0x5a8>)
 80054de:	b954      	cbnz	r4, 80054f6 <_dtoa_r+0x386>
 80054e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e8:	f7fb f920 	bl	800072c <__aeabi_ddiv>
 80054ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054f0:	e029      	b.n	8005546 <_dtoa_r+0x3d6>
 80054f2:	2702      	movs	r7, #2
 80054f4:	e7f2      	b.n	80054dc <_dtoa_r+0x36c>
 80054f6:	07e1      	lsls	r1, r4, #31
 80054f8:	d508      	bpl.n	800550c <_dtoa_r+0x39c>
 80054fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005502:	f7fa ffe9 	bl	80004d8 <__aeabi_dmul>
 8005506:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800550a:	3701      	adds	r7, #1
 800550c:	1064      	asrs	r4, r4, #1
 800550e:	3608      	adds	r6, #8
 8005510:	e7e5      	b.n	80054de <_dtoa_r+0x36e>
 8005512:	f000 80a5 	beq.w	8005660 <_dtoa_r+0x4f0>
 8005516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800551a:	f1ca 0400 	rsb	r4, sl, #0
 800551e:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <_dtoa_r+0x5a4>)
 8005520:	f004 020f 	and.w	r2, r4, #15
 8005524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa ffd4 	bl	80004d8 <__aeabi_dmul>
 8005530:	2702      	movs	r7, #2
 8005532:	2300      	movs	r3, #0
 8005534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005538:	4e77      	ldr	r6, [pc, #476]	; (8005718 <_dtoa_r+0x5a8>)
 800553a:	1124      	asrs	r4, r4, #4
 800553c:	2c00      	cmp	r4, #0
 800553e:	f040 8084 	bne.w	800564a <_dtoa_r+0x4da>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1d2      	bne.n	80054ec <_dtoa_r+0x37c>
 8005546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 808b 	beq.w	8005664 <_dtoa_r+0x4f4>
 800554e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005552:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005556:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800555a:	2200      	movs	r2, #0
 800555c:	4b6f      	ldr	r3, [pc, #444]	; (800571c <_dtoa_r+0x5ac>)
 800555e:	f7fb fa2d 	bl	80009bc <__aeabi_dcmplt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d07e      	beq.n	8005664 <_dtoa_r+0x4f4>
 8005566:	9b08      	ldr	r3, [sp, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d07b      	beq.n	8005664 <_dtoa_r+0x4f4>
 800556c:	f1b9 0f00 	cmp.w	r9, #0
 8005570:	dd38      	ble.n	80055e4 <_dtoa_r+0x474>
 8005572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005576:	2200      	movs	r2, #0
 8005578:	4b69      	ldr	r3, [pc, #420]	; (8005720 <_dtoa_r+0x5b0>)
 800557a:	f7fa ffad 	bl	80004d8 <__aeabi_dmul>
 800557e:	464c      	mov	r4, r9
 8005580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005584:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005588:	3701      	adds	r7, #1
 800558a:	4638      	mov	r0, r7
 800558c:	f7fa ff3a 	bl	8000404 <__aeabi_i2d>
 8005590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	4b62      	ldr	r3, [pc, #392]	; (8005724 <_dtoa_r+0x5b4>)
 800559c:	f7fa fde6 	bl	800016c <__adddf3>
 80055a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80055a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a8:	9611      	str	r6, [sp, #68]	; 0x44
 80055aa:	2c00      	cmp	r4, #0
 80055ac:	d15d      	bne.n	800566a <_dtoa_r+0x4fa>
 80055ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b2:	2200      	movs	r2, #0
 80055b4:	4b5c      	ldr	r3, [pc, #368]	; (8005728 <_dtoa_r+0x5b8>)
 80055b6:	f7fa fdd7 	bl	8000168 <__aeabi_dsub>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055c2:	4633      	mov	r3, r6
 80055c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055c6:	f7fb fa17 	bl	80009f8 <__aeabi_dcmpgt>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f040 829c 	bne.w	8005b08 <_dtoa_r+0x998>
 80055d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055da:	f7fb f9ef 	bl	80009bc <__aeabi_dcmplt>
 80055de:	2800      	cmp	r0, #0
 80055e0:	f040 8290 	bne.w	8005b04 <_dtoa_r+0x994>
 80055e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f2c0 8152 	blt.w	8005898 <_dtoa_r+0x728>
 80055f4:	f1ba 0f0e 	cmp.w	sl, #14
 80055f8:	f300 814e 	bgt.w	8005898 <_dtoa_r+0x728>
 80055fc:	4b45      	ldr	r3, [pc, #276]	; (8005714 <_dtoa_r+0x5a4>)
 80055fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005602:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005606:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800560a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800560c:	2b00      	cmp	r3, #0
 800560e:	f280 80db 	bge.w	80057c8 <_dtoa_r+0x658>
 8005612:	9b08      	ldr	r3, [sp, #32]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f300 80d7 	bgt.w	80057c8 <_dtoa_r+0x658>
 800561a:	f040 8272 	bne.w	8005b02 <_dtoa_r+0x992>
 800561e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005622:	2200      	movs	r2, #0
 8005624:	4b40      	ldr	r3, [pc, #256]	; (8005728 <_dtoa_r+0x5b8>)
 8005626:	f7fa ff57 	bl	80004d8 <__aeabi_dmul>
 800562a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800562e:	f7fb f9d9 	bl	80009e4 <__aeabi_dcmpge>
 8005632:	9c08      	ldr	r4, [sp, #32]
 8005634:	4626      	mov	r6, r4
 8005636:	2800      	cmp	r0, #0
 8005638:	f040 8248 	bne.w	8005acc <_dtoa_r+0x95c>
 800563c:	2331      	movs	r3, #49	; 0x31
 800563e:	9f03      	ldr	r7, [sp, #12]
 8005640:	f10a 0a01 	add.w	sl, sl, #1
 8005644:	f807 3b01 	strb.w	r3, [r7], #1
 8005648:	e244      	b.n	8005ad4 <_dtoa_r+0x964>
 800564a:	07e2      	lsls	r2, r4, #31
 800564c:	d505      	bpl.n	800565a <_dtoa_r+0x4ea>
 800564e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005652:	f7fa ff41 	bl	80004d8 <__aeabi_dmul>
 8005656:	2301      	movs	r3, #1
 8005658:	3701      	adds	r7, #1
 800565a:	1064      	asrs	r4, r4, #1
 800565c:	3608      	adds	r6, #8
 800565e:	e76d      	b.n	800553c <_dtoa_r+0x3cc>
 8005660:	2702      	movs	r7, #2
 8005662:	e770      	b.n	8005546 <_dtoa_r+0x3d6>
 8005664:	46d0      	mov	r8, sl
 8005666:	9c08      	ldr	r4, [sp, #32]
 8005668:	e78f      	b.n	800558a <_dtoa_r+0x41a>
 800566a:	9903      	ldr	r1, [sp, #12]
 800566c:	4b29      	ldr	r3, [pc, #164]	; (8005714 <_dtoa_r+0x5a4>)
 800566e:	4421      	add	r1, r4
 8005670:	9112      	str	r1, [sp, #72]	; 0x48
 8005672:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005674:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005678:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800567c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005680:	2900      	cmp	r1, #0
 8005682:	d055      	beq.n	8005730 <_dtoa_r+0x5c0>
 8005684:	2000      	movs	r0, #0
 8005686:	4929      	ldr	r1, [pc, #164]	; (800572c <_dtoa_r+0x5bc>)
 8005688:	f7fb f850 	bl	800072c <__aeabi_ddiv>
 800568c:	463b      	mov	r3, r7
 800568e:	4632      	mov	r2, r6
 8005690:	f7fa fd6a 	bl	8000168 <__aeabi_dsub>
 8005694:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005698:	9f03      	ldr	r7, [sp, #12]
 800569a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800569e:	f7fb f9cb 	bl	8000a38 <__aeabi_d2iz>
 80056a2:	4604      	mov	r4, r0
 80056a4:	f7fa feae 	bl	8000404 <__aeabi_i2d>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b0:	f7fa fd5a 	bl	8000168 <__aeabi_dsub>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	3430      	adds	r4, #48	; 0x30
 80056ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056c2:	f807 4b01 	strb.w	r4, [r7], #1
 80056c6:	f7fb f979 	bl	80009bc <__aeabi_dcmplt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d174      	bne.n	80057b8 <_dtoa_r+0x648>
 80056ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d2:	2000      	movs	r0, #0
 80056d4:	4911      	ldr	r1, [pc, #68]	; (800571c <_dtoa_r+0x5ac>)
 80056d6:	f7fa fd47 	bl	8000168 <__aeabi_dsub>
 80056da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056de:	f7fb f96d 	bl	80009bc <__aeabi_dcmplt>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f040 80b7 	bne.w	8005856 <_dtoa_r+0x6e6>
 80056e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056ea:	429f      	cmp	r7, r3
 80056ec:	f43f af7a 	beq.w	80055e4 <_dtoa_r+0x474>
 80056f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056f4:	2200      	movs	r2, #0
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <_dtoa_r+0x5b0>)
 80056f8:	f7fa feee 	bl	80004d8 <__aeabi_dmul>
 80056fc:	2200      	movs	r2, #0
 80056fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <_dtoa_r+0x5b0>)
 8005708:	f7fa fee6 	bl	80004d8 <__aeabi_dmul>
 800570c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005710:	e7c3      	b.n	800569a <_dtoa_r+0x52a>
 8005712:	bf00      	nop
 8005714:	080076b0 	.word	0x080076b0
 8005718:	08007688 	.word	0x08007688
 800571c:	3ff00000 	.word	0x3ff00000
 8005720:	40240000 	.word	0x40240000
 8005724:	401c0000 	.word	0x401c0000
 8005728:	40140000 	.word	0x40140000
 800572c:	3fe00000 	.word	0x3fe00000
 8005730:	4630      	mov	r0, r6
 8005732:	4639      	mov	r1, r7
 8005734:	f7fa fed0 	bl	80004d8 <__aeabi_dmul>
 8005738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800573a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800573e:	9c03      	ldr	r4, [sp, #12]
 8005740:	9314      	str	r3, [sp, #80]	; 0x50
 8005742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005746:	f7fb f977 	bl	8000a38 <__aeabi_d2iz>
 800574a:	9015      	str	r0, [sp, #84]	; 0x54
 800574c:	f7fa fe5a 	bl	8000404 <__aeabi_i2d>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005758:	f7fa fd06 	bl	8000168 <__aeabi_dsub>
 800575c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800575e:	4606      	mov	r6, r0
 8005760:	3330      	adds	r3, #48	; 0x30
 8005762:	f804 3b01 	strb.w	r3, [r4], #1
 8005766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005768:	460f      	mov	r7, r1
 800576a:	429c      	cmp	r4, r3
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	d124      	bne.n	80057bc <_dtoa_r+0x64c>
 8005772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005776:	4bb0      	ldr	r3, [pc, #704]	; (8005a38 <_dtoa_r+0x8c8>)
 8005778:	f7fa fcf8 	bl	800016c <__adddf3>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fb f938 	bl	80009f8 <__aeabi_dcmpgt>
 8005788:	2800      	cmp	r0, #0
 800578a:	d163      	bne.n	8005854 <_dtoa_r+0x6e4>
 800578c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005790:	2000      	movs	r0, #0
 8005792:	49a9      	ldr	r1, [pc, #676]	; (8005a38 <_dtoa_r+0x8c8>)
 8005794:	f7fa fce8 	bl	8000168 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4630      	mov	r0, r6
 800579e:	4639      	mov	r1, r7
 80057a0:	f7fb f90c 	bl	80009bc <__aeabi_dcmplt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f43f af1d 	beq.w	80055e4 <_dtoa_r+0x474>
 80057aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80057ac:	1e7b      	subs	r3, r7, #1
 80057ae:	9314      	str	r3, [sp, #80]	; 0x50
 80057b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d0f8      	beq.n	80057aa <_dtoa_r+0x63a>
 80057b8:	46c2      	mov	sl, r8
 80057ba:	e03b      	b.n	8005834 <_dtoa_r+0x6c4>
 80057bc:	4b9f      	ldr	r3, [pc, #636]	; (8005a3c <_dtoa_r+0x8cc>)
 80057be:	f7fa fe8b 	bl	80004d8 <__aeabi_dmul>
 80057c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c6:	e7bc      	b.n	8005742 <_dtoa_r+0x5d2>
 80057c8:	9f03      	ldr	r7, [sp, #12]
 80057ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80057ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057d2:	4640      	mov	r0, r8
 80057d4:	4649      	mov	r1, r9
 80057d6:	f7fa ffa9 	bl	800072c <__aeabi_ddiv>
 80057da:	f7fb f92d 	bl	8000a38 <__aeabi_d2iz>
 80057de:	4604      	mov	r4, r0
 80057e0:	f7fa fe10 	bl	8000404 <__aeabi_i2d>
 80057e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057e8:	f7fa fe76 	bl	80004d8 <__aeabi_dmul>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fa fcb8 	bl	8000168 <__aeabi_dsub>
 80057f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057fc:	f807 6b01 	strb.w	r6, [r7], #1
 8005800:	9e03      	ldr	r6, [sp, #12]
 8005802:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005806:	1bbe      	subs	r6, r7, r6
 8005808:	45b4      	cmp	ip, r6
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	d136      	bne.n	800587e <_dtoa_r+0x70e>
 8005810:	f7fa fcac 	bl	800016c <__adddf3>
 8005814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005818:	4680      	mov	r8, r0
 800581a:	4689      	mov	r9, r1
 800581c:	f7fb f8ec 	bl	80009f8 <__aeabi_dcmpgt>
 8005820:	bb58      	cbnz	r0, 800587a <_dtoa_r+0x70a>
 8005822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fb f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800582e:	b108      	cbz	r0, 8005834 <_dtoa_r+0x6c4>
 8005830:	07e1      	lsls	r1, r4, #31
 8005832:	d422      	bmi.n	800587a <_dtoa_r+0x70a>
 8005834:	4628      	mov	r0, r5
 8005836:	4659      	mov	r1, fp
 8005838:	f000 faf0 	bl	8005e1c <_Bfree>
 800583c:	2300      	movs	r3, #0
 800583e:	703b      	strb	r3, [r7, #0]
 8005840:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005842:	f10a 0001 	add.w	r0, sl, #1
 8005846:	6018      	str	r0, [r3, #0]
 8005848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800584a:	2b00      	cmp	r3, #0
 800584c:	f43f acde 	beq.w	800520c <_dtoa_r+0x9c>
 8005850:	601f      	str	r7, [r3, #0]
 8005852:	e4db      	b.n	800520c <_dtoa_r+0x9c>
 8005854:	4627      	mov	r7, r4
 8005856:	463b      	mov	r3, r7
 8005858:	461f      	mov	r7, r3
 800585a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800585e:	2a39      	cmp	r2, #57	; 0x39
 8005860:	d107      	bne.n	8005872 <_dtoa_r+0x702>
 8005862:	9a03      	ldr	r2, [sp, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	d1f7      	bne.n	8005858 <_dtoa_r+0x6e8>
 8005868:	2230      	movs	r2, #48	; 0x30
 800586a:	9903      	ldr	r1, [sp, #12]
 800586c:	f108 0801 	add.w	r8, r8, #1
 8005870:	700a      	strb	r2, [r1, #0]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	3201      	adds	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e79e      	b.n	80057b8 <_dtoa_r+0x648>
 800587a:	46d0      	mov	r8, sl
 800587c:	e7eb      	b.n	8005856 <_dtoa_r+0x6e6>
 800587e:	2200      	movs	r2, #0
 8005880:	4b6e      	ldr	r3, [pc, #440]	; (8005a3c <_dtoa_r+0x8cc>)
 8005882:	f7fa fe29 	bl	80004d8 <__aeabi_dmul>
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	4680      	mov	r8, r0
 800588c:	4689      	mov	r9, r1
 800588e:	f7fb f88b 	bl	80009a8 <__aeabi_dcmpeq>
 8005892:	2800      	cmp	r0, #0
 8005894:	d09b      	beq.n	80057ce <_dtoa_r+0x65e>
 8005896:	e7cd      	b.n	8005834 <_dtoa_r+0x6c4>
 8005898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800589a:	2a00      	cmp	r2, #0
 800589c:	f000 80d0 	beq.w	8005a40 <_dtoa_r+0x8d0>
 80058a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058a2:	2a01      	cmp	r2, #1
 80058a4:	f300 80ae 	bgt.w	8005a04 <_dtoa_r+0x894>
 80058a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	f000 80a6 	beq.w	80059fc <_dtoa_r+0x88c>
 80058b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058b6:	9f06      	ldr	r7, [sp, #24]
 80058b8:	9a06      	ldr	r2, [sp, #24]
 80058ba:	2101      	movs	r1, #1
 80058bc:	441a      	add	r2, r3
 80058be:	9206      	str	r2, [sp, #24]
 80058c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c2:	4628      	mov	r0, r5
 80058c4:	441a      	add	r2, r3
 80058c6:	9209      	str	r2, [sp, #36]	; 0x24
 80058c8:	f000 fb5e 	bl	8005f88 <__i2b>
 80058cc:	4606      	mov	r6, r0
 80058ce:	2f00      	cmp	r7, #0
 80058d0:	dd0c      	ble.n	80058ec <_dtoa_r+0x77c>
 80058d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dd09      	ble.n	80058ec <_dtoa_r+0x77c>
 80058d8:	42bb      	cmp	r3, r7
 80058da:	bfa8      	it	ge
 80058dc:	463b      	movge	r3, r7
 80058de:	9a06      	ldr	r2, [sp, #24]
 80058e0:	1aff      	subs	r7, r7, r3
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	9206      	str	r2, [sp, #24]
 80058e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	9309      	str	r3, [sp, #36]	; 0x24
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	b1f3      	cbz	r3, 800592e <_dtoa_r+0x7be>
 80058f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a8 	beq.w	8005a48 <_dtoa_r+0x8d8>
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	dd10      	ble.n	800591e <_dtoa_r+0x7ae>
 80058fc:	4631      	mov	r1, r6
 80058fe:	4622      	mov	r2, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f000 fbff 	bl	8006104 <__pow5mult>
 8005906:	465a      	mov	r2, fp
 8005908:	4601      	mov	r1, r0
 800590a:	4606      	mov	r6, r0
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fb51 	bl	8005fb4 <__multiply>
 8005912:	4680      	mov	r8, r0
 8005914:	4659      	mov	r1, fp
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fa80 	bl	8005e1c <_Bfree>
 800591c:	46c3      	mov	fp, r8
 800591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005920:	1b1a      	subs	r2, r3, r4
 8005922:	d004      	beq.n	800592e <_dtoa_r+0x7be>
 8005924:	4659      	mov	r1, fp
 8005926:	4628      	mov	r0, r5
 8005928:	f000 fbec 	bl	8006104 <__pow5mult>
 800592c:	4683      	mov	fp, r0
 800592e:	2101      	movs	r1, #1
 8005930:	4628      	mov	r0, r5
 8005932:	f000 fb29 	bl	8005f88 <__i2b>
 8005936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005938:	4604      	mov	r4, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	f340 8086 	ble.w	8005a4c <_dtoa_r+0x8dc>
 8005940:	461a      	mov	r2, r3
 8005942:	4601      	mov	r1, r0
 8005944:	4628      	mov	r0, r5
 8005946:	f000 fbdd 	bl	8006104 <__pow5mult>
 800594a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800594c:	4604      	mov	r4, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	dd7f      	ble.n	8005a52 <_dtoa_r+0x8e2>
 8005952:	f04f 0800 	mov.w	r8, #0
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800595c:	6918      	ldr	r0, [r3, #16]
 800595e:	f000 fac5 	bl	8005eec <__hi0bits>
 8005962:	f1c0 0020 	rsb	r0, r0, #32
 8005966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005968:	4418      	add	r0, r3
 800596a:	f010 001f 	ands.w	r0, r0, #31
 800596e:	f000 8092 	beq.w	8005a96 <_dtoa_r+0x926>
 8005972:	f1c0 0320 	rsb	r3, r0, #32
 8005976:	2b04      	cmp	r3, #4
 8005978:	f340 808a 	ble.w	8005a90 <_dtoa_r+0x920>
 800597c:	f1c0 001c 	rsb	r0, r0, #28
 8005980:	9b06      	ldr	r3, [sp, #24]
 8005982:	4407      	add	r7, r0
 8005984:	4403      	add	r3, r0
 8005986:	9306      	str	r3, [sp, #24]
 8005988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598a:	4403      	add	r3, r0
 800598c:	9309      	str	r3, [sp, #36]	; 0x24
 800598e:	9b06      	ldr	r3, [sp, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	dd05      	ble.n	80059a0 <_dtoa_r+0x830>
 8005994:	4659      	mov	r1, fp
 8005996:	461a      	mov	r2, r3
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fc0d 	bl	80061b8 <__lshift>
 800599e:	4683      	mov	fp, r0
 80059a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dd05      	ble.n	80059b2 <_dtoa_r+0x842>
 80059a6:	4621      	mov	r1, r4
 80059a8:	461a      	mov	r2, r3
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 fc04 	bl	80061b8 <__lshift>
 80059b0:	4604      	mov	r4, r0
 80059b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d070      	beq.n	8005a9a <_dtoa_r+0x92a>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4658      	mov	r0, fp
 80059bc:	f000 fc6c 	bl	8006298 <__mcmp>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	da6a      	bge.n	8005a9a <_dtoa_r+0x92a>
 80059c4:	2300      	movs	r3, #0
 80059c6:	4659      	mov	r1, fp
 80059c8:	220a      	movs	r2, #10
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 fa48 	bl	8005e60 <__multadd>
 80059d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d2:	4683      	mov	fp, r0
 80059d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8194 	beq.w	8005d06 <_dtoa_r+0xb96>
 80059de:	4631      	mov	r1, r6
 80059e0:	2300      	movs	r3, #0
 80059e2:	220a      	movs	r2, #10
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 fa3b 	bl	8005e60 <__multadd>
 80059ea:	f1b9 0f00 	cmp.w	r9, #0
 80059ee:	4606      	mov	r6, r0
 80059f0:	f300 8093 	bgt.w	8005b1a <_dtoa_r+0x9aa>
 80059f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	dc57      	bgt.n	8005aaa <_dtoa_r+0x93a>
 80059fa:	e08e      	b.n	8005b1a <_dtoa_r+0x9aa>
 80059fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a02:	e757      	b.n	80058b4 <_dtoa_r+0x744>
 8005a04:	9b08      	ldr	r3, [sp, #32]
 8005a06:	1e5c      	subs	r4, r3, #1
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	bfb7      	itett	lt
 8005a0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a10:	1b1c      	subge	r4, r3, r4
 8005a12:	1ae2      	sublt	r2, r4, r3
 8005a14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a16:	bfbe      	ittt	lt
 8005a18:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a1a:	189b      	addlt	r3, r3, r2
 8005a1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a1e:	9b08      	ldr	r3, [sp, #32]
 8005a20:	bfb8      	it	lt
 8005a22:	2400      	movlt	r4, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfbb      	ittet	lt
 8005a28:	9b06      	ldrlt	r3, [sp, #24]
 8005a2a:	9a08      	ldrlt	r2, [sp, #32]
 8005a2c:	9f06      	ldrge	r7, [sp, #24]
 8005a2e:	1a9f      	sublt	r7, r3, r2
 8005a30:	bfac      	ite	ge
 8005a32:	9b08      	ldrge	r3, [sp, #32]
 8005a34:	2300      	movlt	r3, #0
 8005a36:	e73f      	b.n	80058b8 <_dtoa_r+0x748>
 8005a38:	3fe00000 	.word	0x3fe00000
 8005a3c:	40240000 	.word	0x40240000
 8005a40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a42:	9f06      	ldr	r7, [sp, #24]
 8005a44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a46:	e742      	b.n	80058ce <_dtoa_r+0x75e>
 8005a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a4a:	e76b      	b.n	8005924 <_dtoa_r+0x7b4>
 8005a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	dc19      	bgt.n	8005a86 <_dtoa_r+0x916>
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	b9bb      	cbnz	r3, 8005a86 <_dtoa_r+0x916>
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a5c:	b99b      	cbnz	r3, 8005a86 <_dtoa_r+0x916>
 8005a5e:	9b05      	ldr	r3, [sp, #20]
 8005a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a64:	0d1b      	lsrs	r3, r3, #20
 8005a66:	051b      	lsls	r3, r3, #20
 8005a68:	b183      	cbz	r3, 8005a8c <_dtoa_r+0x91c>
 8005a6a:	f04f 0801 	mov.w	r8, #1
 8005a6e:	9b06      	ldr	r3, [sp, #24]
 8005a70:	3301      	adds	r3, #1
 8005a72:	9306      	str	r3, [sp, #24]
 8005a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f af6a 	bne.w	8005956 <_dtoa_r+0x7e6>
 8005a82:	2001      	movs	r0, #1
 8005a84:	e76f      	b.n	8005966 <_dtoa_r+0x7f6>
 8005a86:	f04f 0800 	mov.w	r8, #0
 8005a8a:	e7f6      	b.n	8005a7a <_dtoa_r+0x90a>
 8005a8c:	4698      	mov	r8, r3
 8005a8e:	e7f4      	b.n	8005a7a <_dtoa_r+0x90a>
 8005a90:	f43f af7d 	beq.w	800598e <_dtoa_r+0x81e>
 8005a94:	4618      	mov	r0, r3
 8005a96:	301c      	adds	r0, #28
 8005a98:	e772      	b.n	8005980 <_dtoa_r+0x810>
 8005a9a:	9b08      	ldr	r3, [sp, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dc36      	bgt.n	8005b0e <_dtoa_r+0x99e>
 8005aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	dd33      	ble.n	8005b0e <_dtoa_r+0x99e>
 8005aa6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aaa:	f1b9 0f00 	cmp.w	r9, #0
 8005aae:	d10d      	bne.n	8005acc <_dtoa_r+0x95c>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	2205      	movs	r2, #5
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f9d2 	bl	8005e60 <__multadd>
 8005abc:	4601      	mov	r1, r0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4658      	mov	r0, fp
 8005ac2:	f000 fbe9 	bl	8006298 <__mcmp>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f73f adb8 	bgt.w	800563c <_dtoa_r+0x4cc>
 8005acc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ace:	9f03      	ldr	r7, [sp, #12]
 8005ad0:	ea6f 0a03 	mvn.w	sl, r3
 8005ad4:	f04f 0800 	mov.w	r8, #0
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 f99e 	bl	8005e1c <_Bfree>
 8005ae0:	2e00      	cmp	r6, #0
 8005ae2:	f43f aea7 	beq.w	8005834 <_dtoa_r+0x6c4>
 8005ae6:	f1b8 0f00 	cmp.w	r8, #0
 8005aea:	d005      	beq.n	8005af8 <_dtoa_r+0x988>
 8005aec:	45b0      	cmp	r8, r6
 8005aee:	d003      	beq.n	8005af8 <_dtoa_r+0x988>
 8005af0:	4641      	mov	r1, r8
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 f992 	bl	8005e1c <_Bfree>
 8005af8:	4631      	mov	r1, r6
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f98e 	bl	8005e1c <_Bfree>
 8005b00:	e698      	b.n	8005834 <_dtoa_r+0x6c4>
 8005b02:	2400      	movs	r4, #0
 8005b04:	4626      	mov	r6, r4
 8005b06:	e7e1      	b.n	8005acc <_dtoa_r+0x95c>
 8005b08:	46c2      	mov	sl, r8
 8005b0a:	4626      	mov	r6, r4
 8005b0c:	e596      	b.n	800563c <_dtoa_r+0x4cc>
 8005b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80fd 	beq.w	8005d14 <_dtoa_r+0xba4>
 8005b1a:	2f00      	cmp	r7, #0
 8005b1c:	dd05      	ble.n	8005b2a <_dtoa_r+0x9ba>
 8005b1e:	4631      	mov	r1, r6
 8005b20:	463a      	mov	r2, r7
 8005b22:	4628      	mov	r0, r5
 8005b24:	f000 fb48 	bl	80061b8 <__lshift>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	f1b8 0f00 	cmp.w	r8, #0
 8005b2e:	d05c      	beq.n	8005bea <_dtoa_r+0xa7a>
 8005b30:	4628      	mov	r0, r5
 8005b32:	6871      	ldr	r1, [r6, #4]
 8005b34:	f000 f932 	bl	8005d9c <_Balloc>
 8005b38:	4607      	mov	r7, r0
 8005b3a:	b928      	cbnz	r0, 8005b48 <_dtoa_r+0x9d8>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b42:	4b7f      	ldr	r3, [pc, #508]	; (8005d40 <_dtoa_r+0xbd0>)
 8005b44:	f7ff bb28 	b.w	8005198 <_dtoa_r+0x28>
 8005b48:	6932      	ldr	r2, [r6, #16]
 8005b4a:	f106 010c 	add.w	r1, r6, #12
 8005b4e:	3202      	adds	r2, #2
 8005b50:	0092      	lsls	r2, r2, #2
 8005b52:	300c      	adds	r0, #12
 8005b54:	f000 f914 	bl	8005d80 <memcpy>
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 fb2b 	bl	80061b8 <__lshift>
 8005b62:	46b0      	mov	r8, r6
 8005b64:	4606      	mov	r6, r0
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	9308      	str	r3, [sp, #32]
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	444b      	add	r3, r9
 8005b70:	930a      	str	r3, [sp, #40]	; 0x28
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7a:	9b08      	ldr	r3, [sp, #32]
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4658      	mov	r0, fp
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	f7ff fa66 	bl	8005054 <quorem>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	3330      	adds	r3, #48	; 0x30
 8005b8e:	9006      	str	r0, [sp, #24]
 8005b90:	4658      	mov	r0, fp
 8005b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b94:	f000 fb80 	bl	8006298 <__mcmp>
 8005b98:	4632      	mov	r2, r6
 8005b9a:	4681      	mov	r9, r0
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fb96 	bl	80062d0 <__mdiff>
 8005ba4:	68c2      	ldr	r2, [r0, #12]
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005baa:	bb02      	cbnz	r2, 8005bee <_dtoa_r+0xa7e>
 8005bac:	4601      	mov	r1, r0
 8005bae:	4658      	mov	r0, fp
 8005bb0:	f000 fb72 	bl	8006298 <__mcmp>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4628      	mov	r0, r5
 8005bbc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005bc0:	f000 f92c 	bl	8005e1c <_Bfree>
 8005bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bc8:	9f08      	ldr	r7, [sp, #32]
 8005bca:	ea43 0102 	orr.w	r1, r3, r2
 8005bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd4:	d10d      	bne.n	8005bf2 <_dtoa_r+0xa82>
 8005bd6:	2b39      	cmp	r3, #57	; 0x39
 8005bd8:	d029      	beq.n	8005c2e <_dtoa_r+0xabe>
 8005bda:	f1b9 0f00 	cmp.w	r9, #0
 8005bde:	dd01      	ble.n	8005be4 <_dtoa_r+0xa74>
 8005be0:	9b06      	ldr	r3, [sp, #24]
 8005be2:	3331      	adds	r3, #49	; 0x31
 8005be4:	9a04      	ldr	r2, [sp, #16]
 8005be6:	7013      	strb	r3, [r2, #0]
 8005be8:	e776      	b.n	8005ad8 <_dtoa_r+0x968>
 8005bea:	4630      	mov	r0, r6
 8005bec:	e7b9      	b.n	8005b62 <_dtoa_r+0x9f2>
 8005bee:	2201      	movs	r2, #1
 8005bf0:	e7e2      	b.n	8005bb8 <_dtoa_r+0xa48>
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	db06      	blt.n	8005c06 <_dtoa_r+0xa96>
 8005bf8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005bfa:	ea41 0909 	orr.w	r9, r1, r9
 8005bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c00:	ea59 0101 	orrs.w	r1, r9, r1
 8005c04:	d120      	bne.n	8005c48 <_dtoa_r+0xad8>
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	ddec      	ble.n	8005be4 <_dtoa_r+0xa74>
 8005c0a:	4659      	mov	r1, fp
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4628      	mov	r0, r5
 8005c10:	9308      	str	r3, [sp, #32]
 8005c12:	f000 fad1 	bl	80061b8 <__lshift>
 8005c16:	4621      	mov	r1, r4
 8005c18:	4683      	mov	fp, r0
 8005c1a:	f000 fb3d 	bl	8006298 <__mcmp>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	9b08      	ldr	r3, [sp, #32]
 8005c22:	dc02      	bgt.n	8005c2a <_dtoa_r+0xaba>
 8005c24:	d1de      	bne.n	8005be4 <_dtoa_r+0xa74>
 8005c26:	07da      	lsls	r2, r3, #31
 8005c28:	d5dc      	bpl.n	8005be4 <_dtoa_r+0xa74>
 8005c2a:	2b39      	cmp	r3, #57	; 0x39
 8005c2c:	d1d8      	bne.n	8005be0 <_dtoa_r+0xa70>
 8005c2e:	2339      	movs	r3, #57	; 0x39
 8005c30:	9a04      	ldr	r2, [sp, #16]
 8005c32:	7013      	strb	r3, [r2, #0]
 8005c34:	463b      	mov	r3, r7
 8005c36:	461f      	mov	r7, r3
 8005c38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	2a39      	cmp	r2, #57	; 0x39
 8005c40:	d050      	beq.n	8005ce4 <_dtoa_r+0xb74>
 8005c42:	3201      	adds	r2, #1
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e747      	b.n	8005ad8 <_dtoa_r+0x968>
 8005c48:	2a00      	cmp	r2, #0
 8005c4a:	dd03      	ble.n	8005c54 <_dtoa_r+0xae4>
 8005c4c:	2b39      	cmp	r3, #57	; 0x39
 8005c4e:	d0ee      	beq.n	8005c2e <_dtoa_r+0xabe>
 8005c50:	3301      	adds	r3, #1
 8005c52:	e7c7      	b.n	8005be4 <_dtoa_r+0xa74>
 8005c54:	9a08      	ldr	r2, [sp, #32]
 8005c56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c5c:	428a      	cmp	r2, r1
 8005c5e:	d02a      	beq.n	8005cb6 <_dtoa_r+0xb46>
 8005c60:	4659      	mov	r1, fp
 8005c62:	2300      	movs	r3, #0
 8005c64:	220a      	movs	r2, #10
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f8fa 	bl	8005e60 <__multadd>
 8005c6c:	45b0      	cmp	r8, r6
 8005c6e:	4683      	mov	fp, r0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f04f 020a 	mov.w	r2, #10
 8005c78:	4641      	mov	r1, r8
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	d107      	bne.n	8005c8e <_dtoa_r+0xb1e>
 8005c7e:	f000 f8ef 	bl	8005e60 <__multadd>
 8005c82:	4680      	mov	r8, r0
 8005c84:	4606      	mov	r6, r0
 8005c86:	9b08      	ldr	r3, [sp, #32]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	9308      	str	r3, [sp, #32]
 8005c8c:	e775      	b.n	8005b7a <_dtoa_r+0xa0a>
 8005c8e:	f000 f8e7 	bl	8005e60 <__multadd>
 8005c92:	4631      	mov	r1, r6
 8005c94:	4680      	mov	r8, r0
 8005c96:	2300      	movs	r3, #0
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f8e0 	bl	8005e60 <__multadd>
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	e7f0      	b.n	8005c86 <_dtoa_r+0xb16>
 8005ca4:	f1b9 0f00 	cmp.w	r9, #0
 8005ca8:	bfcc      	ite	gt
 8005caa:	464f      	movgt	r7, r9
 8005cac:	2701      	movle	r7, #1
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	9a03      	ldr	r2, [sp, #12]
 8005cb4:	4417      	add	r7, r2
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4628      	mov	r0, r5
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	f000 fa7b 	bl	80061b8 <__lshift>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4683      	mov	fp, r0
 8005cc6:	f000 fae7 	bl	8006298 <__mcmp>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	dcb2      	bgt.n	8005c34 <_dtoa_r+0xac4>
 8005cce:	d102      	bne.n	8005cd6 <_dtoa_r+0xb66>
 8005cd0:	9b08      	ldr	r3, [sp, #32]
 8005cd2:	07db      	lsls	r3, r3, #31
 8005cd4:	d4ae      	bmi.n	8005c34 <_dtoa_r+0xac4>
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	461f      	mov	r7, r3
 8005cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cde:	2a30      	cmp	r2, #48	; 0x30
 8005ce0:	d0fa      	beq.n	8005cd8 <_dtoa_r+0xb68>
 8005ce2:	e6f9      	b.n	8005ad8 <_dtoa_r+0x968>
 8005ce4:	9a03      	ldr	r2, [sp, #12]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d1a5      	bne.n	8005c36 <_dtoa_r+0xac6>
 8005cea:	2331      	movs	r3, #49	; 0x31
 8005cec:	f10a 0a01 	add.w	sl, sl, #1
 8005cf0:	e779      	b.n	8005be6 <_dtoa_r+0xa76>
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <_dtoa_r+0xbd4>)
 8005cf4:	f7ff baa8 	b.w	8005248 <_dtoa_r+0xd8>
 8005cf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f47f aa81 	bne.w	8005202 <_dtoa_r+0x92>
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <_dtoa_r+0xbd8>)
 8005d02:	f7ff baa1 	b.w	8005248 <_dtoa_r+0xd8>
 8005d06:	f1b9 0f00 	cmp.w	r9, #0
 8005d0a:	dc03      	bgt.n	8005d14 <_dtoa_r+0xba4>
 8005d0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	f73f aecb 	bgt.w	8005aaa <_dtoa_r+0x93a>
 8005d14:	9f03      	ldr	r7, [sp, #12]
 8005d16:	4621      	mov	r1, r4
 8005d18:	4658      	mov	r0, fp
 8005d1a:	f7ff f99b 	bl	8005054 <quorem>
 8005d1e:	9a03      	ldr	r2, [sp, #12]
 8005d20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d24:	f807 3b01 	strb.w	r3, [r7], #1
 8005d28:	1aba      	subs	r2, r7, r2
 8005d2a:	4591      	cmp	r9, r2
 8005d2c:	ddba      	ble.n	8005ca4 <_dtoa_r+0xb34>
 8005d2e:	4659      	mov	r1, fp
 8005d30:	2300      	movs	r3, #0
 8005d32:	220a      	movs	r2, #10
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 f893 	bl	8005e60 <__multadd>
 8005d3a:	4683      	mov	fp, r0
 8005d3c:	e7eb      	b.n	8005d16 <_dtoa_r+0xba6>
 8005d3e:	bf00      	nop
 8005d40:	0800761b 	.word	0x0800761b
 8005d44:	08007578 	.word	0x08007578
 8005d48:	0800759c 	.word	0x0800759c

08005d4c <_localeconv_r>:
 8005d4c:	4800      	ldr	r0, [pc, #0]	; (8005d50 <_localeconv_r+0x4>)
 8005d4e:	4770      	bx	lr
 8005d50:	20000170 	.word	0x20000170

08005d54 <malloc>:
 8005d54:	4b02      	ldr	r3, [pc, #8]	; (8005d60 <malloc+0xc>)
 8005d56:	4601      	mov	r1, r0
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	f000 bc1d 	b.w	8006598 <_malloc_r>
 8005d5e:	bf00      	nop
 8005d60:	2000001c 	.word	0x2000001c

08005d64 <memchr>:
 8005d64:	4603      	mov	r3, r0
 8005d66:	b510      	push	{r4, lr}
 8005d68:	b2c9      	uxtb	r1, r1
 8005d6a:	4402      	add	r2, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	d101      	bne.n	8005d76 <memchr+0x12>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e003      	b.n	8005d7e <memchr+0x1a>
 8005d76:	7804      	ldrb	r4, [r0, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	428c      	cmp	r4, r1
 8005d7c:	d1f6      	bne.n	8005d6c <memchr+0x8>
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <memcpy>:
 8005d80:	440a      	add	r2, r1
 8005d82:	4291      	cmp	r1, r2
 8005d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d88:	d100      	bne.n	8005d8c <memcpy+0xc>
 8005d8a:	4770      	bx	lr
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d98:	d1f9      	bne.n	8005d8e <memcpy+0xe>
 8005d9a:	bd10      	pop	{r4, pc}

08005d9c <_Balloc>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	b976      	cbnz	r6, 8005dc4 <_Balloc+0x28>
 8005da6:	2010      	movs	r0, #16
 8005da8:	f7ff ffd4 	bl	8005d54 <malloc>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6260      	str	r0, [r4, #36]	; 0x24
 8005db0:	b920      	cbnz	r0, 8005dbc <_Balloc+0x20>
 8005db2:	2166      	movs	r1, #102	; 0x66
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <_Balloc+0x78>)
 8005db6:	4818      	ldr	r0, [pc, #96]	; (8005e18 <_Balloc+0x7c>)
 8005db8:	f000 fdce 	bl	8006958 <__assert_func>
 8005dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dc0:	6006      	str	r6, [r0, #0]
 8005dc2:	60c6      	str	r6, [r0, #12]
 8005dc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005dc6:	68f3      	ldr	r3, [r6, #12]
 8005dc8:	b183      	cbz	r3, 8005dec <_Balloc+0x50>
 8005dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dd2:	b9b8      	cbnz	r0, 8005e04 <_Balloc+0x68>
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	fa01 f605 	lsl.w	r6, r1, r5
 8005dda:	1d72      	adds	r2, r6, #5
 8005ddc:	4620      	mov	r0, r4
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	f000 fb5e 	bl	80064a0 <_calloc_r>
 8005de4:	b160      	cbz	r0, 8005e00 <_Balloc+0x64>
 8005de6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dea:	e00e      	b.n	8005e0a <_Balloc+0x6e>
 8005dec:	2221      	movs	r2, #33	; 0x21
 8005dee:	2104      	movs	r1, #4
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fb55 	bl	80064a0 <_calloc_r>
 8005df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df8:	60f0      	str	r0, [r6, #12]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e4      	bne.n	8005dca <_Balloc+0x2e>
 8005e00:	2000      	movs	r0, #0
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	6802      	ldr	r2, [r0, #0]
 8005e06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e10:	e7f7      	b.n	8005e02 <_Balloc+0x66>
 8005e12:	bf00      	nop
 8005e14:	080075a9 	.word	0x080075a9
 8005e18:	0800762c 	.word	0x0800762c

08005e1c <_Bfree>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e20:	4605      	mov	r5, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b976      	cbnz	r6, 8005e44 <_Bfree+0x28>
 8005e26:	2010      	movs	r0, #16
 8005e28:	f7ff ff94 	bl	8005d54 <malloc>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6268      	str	r0, [r5, #36]	; 0x24
 8005e30:	b920      	cbnz	r0, 8005e3c <_Bfree+0x20>
 8005e32:	218a      	movs	r1, #138	; 0x8a
 8005e34:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <_Bfree+0x3c>)
 8005e36:	4809      	ldr	r0, [pc, #36]	; (8005e5c <_Bfree+0x40>)
 8005e38:	f000 fd8e 	bl	8006958 <__assert_func>
 8005e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e40:	6006      	str	r6, [r0, #0]
 8005e42:	60c6      	str	r6, [r0, #12]
 8005e44:	b13c      	cbz	r4, 8005e56 <_Bfree+0x3a>
 8005e46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e48:	6862      	ldr	r2, [r4, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e50:	6021      	str	r1, [r4, #0]
 8005e52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	080075a9 	.word	0x080075a9
 8005e5c:	0800762c 	.word	0x0800762c

08005e60 <__multadd>:
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	4607      	mov	r7, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	461e      	mov	r6, r3
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	690d      	ldr	r5, [r1, #16]
 8005e6e:	f101 0c14 	add.w	ip, r1, #20
 8005e72:	f8dc 3000 	ldr.w	r3, [ip]
 8005e76:	3001      	adds	r0, #1
 8005e78:	b299      	uxth	r1, r3
 8005e7a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e7e:	0c1e      	lsrs	r6, r3, #16
 8005e80:	0c0b      	lsrs	r3, r1, #16
 8005e82:	fb02 3306 	mla	r3, r2, r6, r3
 8005e86:	b289      	uxth	r1, r1
 8005e88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e8c:	4285      	cmp	r5, r0
 8005e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e92:	f84c 1b04 	str.w	r1, [ip], #4
 8005e96:	dcec      	bgt.n	8005e72 <__multadd+0x12>
 8005e98:	b30e      	cbz	r6, 8005ede <__multadd+0x7e>
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	42ab      	cmp	r3, r5
 8005e9e:	dc19      	bgt.n	8005ed4 <__multadd+0x74>
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	3101      	adds	r1, #1
 8005ea6:	f7ff ff79 	bl	8005d9c <_Balloc>
 8005eaa:	4680      	mov	r8, r0
 8005eac:	b928      	cbnz	r0, 8005eba <__multadd+0x5a>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	21b5      	movs	r1, #181	; 0xb5
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <__multadd+0x84>)
 8005eb4:	480c      	ldr	r0, [pc, #48]	; (8005ee8 <__multadd+0x88>)
 8005eb6:	f000 fd4f 	bl	8006958 <__assert_func>
 8005eba:	6922      	ldr	r2, [r4, #16]
 8005ebc:	f104 010c 	add.w	r1, r4, #12
 8005ec0:	3202      	adds	r2, #2
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	300c      	adds	r0, #12
 8005ec6:	f7ff ff5b 	bl	8005d80 <memcpy>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ffa5 	bl	8005e1c <_Bfree>
 8005ed2:	4644      	mov	r4, r8
 8005ed4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ed8:	3501      	adds	r5, #1
 8005eda:	615e      	str	r6, [r3, #20]
 8005edc:	6125      	str	r5, [r4, #16]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	0800761b 	.word	0x0800761b
 8005ee8:	0800762c 	.word	0x0800762c

08005eec <__hi0bits>:
 8005eec:	0c02      	lsrs	r2, r0, #16
 8005eee:	0412      	lsls	r2, r2, #16
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	b9ca      	cbnz	r2, 8005f28 <__hi0bits+0x3c>
 8005ef4:	0403      	lsls	r3, r0, #16
 8005ef6:	2010      	movs	r0, #16
 8005ef8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005efc:	bf04      	itt	eq
 8005efe:	021b      	lsleq	r3, r3, #8
 8005f00:	3008      	addeq	r0, #8
 8005f02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f06:	bf04      	itt	eq
 8005f08:	011b      	lsleq	r3, r3, #4
 8005f0a:	3004      	addeq	r0, #4
 8005f0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f10:	bf04      	itt	eq
 8005f12:	009b      	lsleq	r3, r3, #2
 8005f14:	3002      	addeq	r0, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	db05      	blt.n	8005f26 <__hi0bits+0x3a>
 8005f1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005f1e:	f100 0001 	add.w	r0, r0, #1
 8005f22:	bf08      	it	eq
 8005f24:	2020      	moveq	r0, #32
 8005f26:	4770      	bx	lr
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e7e5      	b.n	8005ef8 <__hi0bits+0xc>

08005f2c <__lo0bits>:
 8005f2c:	6803      	ldr	r3, [r0, #0]
 8005f2e:	4602      	mov	r2, r0
 8005f30:	f013 0007 	ands.w	r0, r3, #7
 8005f34:	d00b      	beq.n	8005f4e <__lo0bits+0x22>
 8005f36:	07d9      	lsls	r1, r3, #31
 8005f38:	d421      	bmi.n	8005f7e <__lo0bits+0x52>
 8005f3a:	0798      	lsls	r0, r3, #30
 8005f3c:	bf49      	itett	mi
 8005f3e:	085b      	lsrmi	r3, r3, #1
 8005f40:	089b      	lsrpl	r3, r3, #2
 8005f42:	2001      	movmi	r0, #1
 8005f44:	6013      	strmi	r3, [r2, #0]
 8005f46:	bf5c      	itt	pl
 8005f48:	2002      	movpl	r0, #2
 8005f4a:	6013      	strpl	r3, [r2, #0]
 8005f4c:	4770      	bx	lr
 8005f4e:	b299      	uxth	r1, r3
 8005f50:	b909      	cbnz	r1, 8005f56 <__lo0bits+0x2a>
 8005f52:	2010      	movs	r0, #16
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	b2d9      	uxtb	r1, r3
 8005f58:	b909      	cbnz	r1, 8005f5e <__lo0bits+0x32>
 8005f5a:	3008      	adds	r0, #8
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	0719      	lsls	r1, r3, #28
 8005f60:	bf04      	itt	eq
 8005f62:	091b      	lsreq	r3, r3, #4
 8005f64:	3004      	addeq	r0, #4
 8005f66:	0799      	lsls	r1, r3, #30
 8005f68:	bf04      	itt	eq
 8005f6a:	089b      	lsreq	r3, r3, #2
 8005f6c:	3002      	addeq	r0, #2
 8005f6e:	07d9      	lsls	r1, r3, #31
 8005f70:	d403      	bmi.n	8005f7a <__lo0bits+0x4e>
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	f100 0001 	add.w	r0, r0, #1
 8005f78:	d003      	beq.n	8005f82 <__lo0bits+0x56>
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	2000      	movs	r0, #0
 8005f80:	4770      	bx	lr
 8005f82:	2020      	movs	r0, #32
 8005f84:	4770      	bx	lr
	...

08005f88 <__i2b>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	f7ff ff05 	bl	8005d9c <_Balloc>
 8005f92:	4602      	mov	r2, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <__i2b+0x1a>
 8005f96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f9a:	4b04      	ldr	r3, [pc, #16]	; (8005fac <__i2b+0x24>)
 8005f9c:	4804      	ldr	r0, [pc, #16]	; (8005fb0 <__i2b+0x28>)
 8005f9e:	f000 fcdb 	bl	8006958 <__assert_func>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	6144      	str	r4, [r0, #20]
 8005fa6:	6103      	str	r3, [r0, #16]
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop
 8005fac:	0800761b 	.word	0x0800761b
 8005fb0:	0800762c 	.word	0x0800762c

08005fb4 <__multiply>:
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	4691      	mov	r9, r2
 8005fba:	690a      	ldr	r2, [r1, #16]
 8005fbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	bfbe      	ittt	lt
 8005fc6:	460b      	movlt	r3, r1
 8005fc8:	464c      	movlt	r4, r9
 8005fca:	4699      	movlt	r9, r3
 8005fcc:	6927      	ldr	r7, [r4, #16]
 8005fce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	6861      	ldr	r1, [r4, #4]
 8005fd6:	eb07 060a 	add.w	r6, r7, sl
 8005fda:	42b3      	cmp	r3, r6
 8005fdc:	b085      	sub	sp, #20
 8005fde:	bfb8      	it	lt
 8005fe0:	3101      	addlt	r1, #1
 8005fe2:	f7ff fedb 	bl	8005d9c <_Balloc>
 8005fe6:	b930      	cbnz	r0, 8005ff6 <__multiply+0x42>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f240 115d 	movw	r1, #349	; 0x15d
 8005fee:	4b43      	ldr	r3, [pc, #268]	; (80060fc <__multiply+0x148>)
 8005ff0:	4843      	ldr	r0, [pc, #268]	; (8006100 <__multiply+0x14c>)
 8005ff2:	f000 fcb1 	bl	8006958 <__assert_func>
 8005ff6:	f100 0514 	add.w	r5, r0, #20
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006002:	4543      	cmp	r3, r8
 8006004:	d321      	bcc.n	800604a <__multiply+0x96>
 8006006:	f104 0314 	add.w	r3, r4, #20
 800600a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800600e:	f109 0314 	add.w	r3, r9, #20
 8006012:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006016:	9202      	str	r2, [sp, #8]
 8006018:	1b3a      	subs	r2, r7, r4
 800601a:	3a15      	subs	r2, #21
 800601c:	f022 0203 	bic.w	r2, r2, #3
 8006020:	3204      	adds	r2, #4
 8006022:	f104 0115 	add.w	r1, r4, #21
 8006026:	428f      	cmp	r7, r1
 8006028:	bf38      	it	cc
 800602a:	2204      	movcc	r2, #4
 800602c:	9201      	str	r2, [sp, #4]
 800602e:	9a02      	ldr	r2, [sp, #8]
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d80c      	bhi.n	8006050 <__multiply+0x9c>
 8006036:	2e00      	cmp	r6, #0
 8006038:	dd03      	ble.n	8006042 <__multiply+0x8e>
 800603a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800603e:	2b00      	cmp	r3, #0
 8006040:	d059      	beq.n	80060f6 <__multiply+0x142>
 8006042:	6106      	str	r6, [r0, #16]
 8006044:	b005      	add	sp, #20
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	f843 2b04 	str.w	r2, [r3], #4
 800604e:	e7d8      	b.n	8006002 <__multiply+0x4e>
 8006050:	f8b3 a000 	ldrh.w	sl, [r3]
 8006054:	f1ba 0f00 	cmp.w	sl, #0
 8006058:	d023      	beq.n	80060a2 <__multiply+0xee>
 800605a:	46a9      	mov	r9, r5
 800605c:	f04f 0c00 	mov.w	ip, #0
 8006060:	f104 0e14 	add.w	lr, r4, #20
 8006064:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006068:	f8d9 1000 	ldr.w	r1, [r9]
 800606c:	fa1f fb82 	uxth.w	fp, r2
 8006070:	b289      	uxth	r1, r1
 8006072:	fb0a 110b 	mla	r1, sl, fp, r1
 8006076:	4461      	add	r1, ip
 8006078:	f8d9 c000 	ldr.w	ip, [r9]
 800607c:	0c12      	lsrs	r2, r2, #16
 800607e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006082:	fb0a c202 	mla	r2, sl, r2, ip
 8006086:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800608a:	b289      	uxth	r1, r1
 800608c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006090:	4577      	cmp	r7, lr
 8006092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006096:	f849 1b04 	str.w	r1, [r9], #4
 800609a:	d8e3      	bhi.n	8006064 <__multiply+0xb0>
 800609c:	9a01      	ldr	r2, [sp, #4]
 800609e:	f845 c002 	str.w	ip, [r5, r2]
 80060a2:	9a03      	ldr	r2, [sp, #12]
 80060a4:	3304      	adds	r3, #4
 80060a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060aa:	f1b9 0f00 	cmp.w	r9, #0
 80060ae:	d020      	beq.n	80060f2 <__multiply+0x13e>
 80060b0:	46ae      	mov	lr, r5
 80060b2:	f04f 0a00 	mov.w	sl, #0
 80060b6:	6829      	ldr	r1, [r5, #0]
 80060b8:	f104 0c14 	add.w	ip, r4, #20
 80060bc:	f8bc b000 	ldrh.w	fp, [ip]
 80060c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80060c4:	b289      	uxth	r1, r1
 80060c6:	fb09 220b 	mla	r2, r9, fp, r2
 80060ca:	4492      	add	sl, r2
 80060cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80060d0:	f84e 1b04 	str.w	r1, [lr], #4
 80060d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060d8:	f8be 1000 	ldrh.w	r1, [lr]
 80060dc:	0c12      	lsrs	r2, r2, #16
 80060de:	fb09 1102 	mla	r1, r9, r2, r1
 80060e2:	4567      	cmp	r7, ip
 80060e4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80060e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060ec:	d8e6      	bhi.n	80060bc <__multiply+0x108>
 80060ee:	9a01      	ldr	r2, [sp, #4]
 80060f0:	50a9      	str	r1, [r5, r2]
 80060f2:	3504      	adds	r5, #4
 80060f4:	e79b      	b.n	800602e <__multiply+0x7a>
 80060f6:	3e01      	subs	r6, #1
 80060f8:	e79d      	b.n	8006036 <__multiply+0x82>
 80060fa:	bf00      	nop
 80060fc:	0800761b 	.word	0x0800761b
 8006100:	0800762c 	.word	0x0800762c

08006104 <__pow5mult>:
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006108:	4615      	mov	r5, r2
 800610a:	f012 0203 	ands.w	r2, r2, #3
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	d007      	beq.n	8006124 <__pow5mult+0x20>
 8006114:	4c25      	ldr	r4, [pc, #148]	; (80061ac <__pow5mult+0xa8>)
 8006116:	3a01      	subs	r2, #1
 8006118:	2300      	movs	r3, #0
 800611a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800611e:	f7ff fe9f 	bl	8005e60 <__multadd>
 8006122:	4607      	mov	r7, r0
 8006124:	10ad      	asrs	r5, r5, #2
 8006126:	d03d      	beq.n	80061a4 <__pow5mult+0xa0>
 8006128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800612a:	b97c      	cbnz	r4, 800614c <__pow5mult+0x48>
 800612c:	2010      	movs	r0, #16
 800612e:	f7ff fe11 	bl	8005d54 <malloc>
 8006132:	4602      	mov	r2, r0
 8006134:	6270      	str	r0, [r6, #36]	; 0x24
 8006136:	b928      	cbnz	r0, 8006144 <__pow5mult+0x40>
 8006138:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <__pow5mult+0xac>)
 800613e:	481d      	ldr	r0, [pc, #116]	; (80061b4 <__pow5mult+0xb0>)
 8006140:	f000 fc0a 	bl	8006958 <__assert_func>
 8006144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006148:	6004      	str	r4, [r0, #0]
 800614a:	60c4      	str	r4, [r0, #12]
 800614c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006154:	b94c      	cbnz	r4, 800616a <__pow5mult+0x66>
 8006156:	f240 2171 	movw	r1, #625	; 0x271
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ff14 	bl	8005f88 <__i2b>
 8006160:	2300      	movs	r3, #0
 8006162:	4604      	mov	r4, r0
 8006164:	f8c8 0008 	str.w	r0, [r8, #8]
 8006168:	6003      	str	r3, [r0, #0]
 800616a:	f04f 0900 	mov.w	r9, #0
 800616e:	07eb      	lsls	r3, r5, #31
 8006170:	d50a      	bpl.n	8006188 <__pow5mult+0x84>
 8006172:	4639      	mov	r1, r7
 8006174:	4622      	mov	r2, r4
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff ff1c 	bl	8005fb4 <__multiply>
 800617c:	4680      	mov	r8, r0
 800617e:	4639      	mov	r1, r7
 8006180:	4630      	mov	r0, r6
 8006182:	f7ff fe4b 	bl	8005e1c <_Bfree>
 8006186:	4647      	mov	r7, r8
 8006188:	106d      	asrs	r5, r5, #1
 800618a:	d00b      	beq.n	80061a4 <__pow5mult+0xa0>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	b938      	cbnz	r0, 80061a0 <__pow5mult+0x9c>
 8006190:	4622      	mov	r2, r4
 8006192:	4621      	mov	r1, r4
 8006194:	4630      	mov	r0, r6
 8006196:	f7ff ff0d 	bl	8005fb4 <__multiply>
 800619a:	6020      	str	r0, [r4, #0]
 800619c:	f8c0 9000 	str.w	r9, [r0]
 80061a0:	4604      	mov	r4, r0
 80061a2:	e7e4      	b.n	800616e <__pow5mult+0x6a>
 80061a4:	4638      	mov	r0, r7
 80061a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061aa:	bf00      	nop
 80061ac:	08007778 	.word	0x08007778
 80061b0:	080075a9 	.word	0x080075a9
 80061b4:	0800762c 	.word	0x0800762c

080061b8 <__lshift>:
 80061b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	4607      	mov	r7, r0
 80061c0:	4691      	mov	r9, r2
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6849      	ldr	r1, [r1, #4]
 80061c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061d0:	f108 0601 	add.w	r6, r8, #1
 80061d4:	42b3      	cmp	r3, r6
 80061d6:	db0b      	blt.n	80061f0 <__lshift+0x38>
 80061d8:	4638      	mov	r0, r7
 80061da:	f7ff fddf 	bl	8005d9c <_Balloc>
 80061de:	4605      	mov	r5, r0
 80061e0:	b948      	cbnz	r0, 80061f6 <__lshift+0x3e>
 80061e2:	4602      	mov	r2, r0
 80061e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <__lshift+0xd8>)
 80061ea:	482a      	ldr	r0, [pc, #168]	; (8006294 <__lshift+0xdc>)
 80061ec:	f000 fbb4 	bl	8006958 <__assert_func>
 80061f0:	3101      	adds	r1, #1
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	e7ee      	b.n	80061d4 <__lshift+0x1c>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f100 0114 	add.w	r1, r0, #20
 80061fc:	f100 0210 	add.w	r2, r0, #16
 8006200:	4618      	mov	r0, r3
 8006202:	4553      	cmp	r3, sl
 8006204:	db37      	blt.n	8006276 <__lshift+0xbe>
 8006206:	6920      	ldr	r0, [r4, #16]
 8006208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800620c:	f104 0314 	add.w	r3, r4, #20
 8006210:	f019 091f 	ands.w	r9, r9, #31
 8006214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800621c:	d02f      	beq.n	800627e <__lshift+0xc6>
 800621e:	468a      	mov	sl, r1
 8006220:	f04f 0c00 	mov.w	ip, #0
 8006224:	f1c9 0e20 	rsb	lr, r9, #32
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	fa02 f209 	lsl.w	r2, r2, r9
 800622e:	ea42 020c 	orr.w	r2, r2, ip
 8006232:	f84a 2b04 	str.w	r2, [sl], #4
 8006236:	f853 2b04 	ldr.w	r2, [r3], #4
 800623a:	4298      	cmp	r0, r3
 800623c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006240:	d8f2      	bhi.n	8006228 <__lshift+0x70>
 8006242:	1b03      	subs	r3, r0, r4
 8006244:	3b15      	subs	r3, #21
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	3304      	adds	r3, #4
 800624c:	f104 0215 	add.w	r2, r4, #21
 8006250:	4290      	cmp	r0, r2
 8006252:	bf38      	it	cc
 8006254:	2304      	movcc	r3, #4
 8006256:	f841 c003 	str.w	ip, [r1, r3]
 800625a:	f1bc 0f00 	cmp.w	ip, #0
 800625e:	d001      	beq.n	8006264 <__lshift+0xac>
 8006260:	f108 0602 	add.w	r6, r8, #2
 8006264:	3e01      	subs	r6, #1
 8006266:	4638      	mov	r0, r7
 8006268:	4621      	mov	r1, r4
 800626a:	612e      	str	r6, [r5, #16]
 800626c:	f7ff fdd6 	bl	8005e1c <_Bfree>
 8006270:	4628      	mov	r0, r5
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	f842 0f04 	str.w	r0, [r2, #4]!
 800627a:	3301      	adds	r3, #1
 800627c:	e7c1      	b.n	8006202 <__lshift+0x4a>
 800627e:	3904      	subs	r1, #4
 8006280:	f853 2b04 	ldr.w	r2, [r3], #4
 8006284:	4298      	cmp	r0, r3
 8006286:	f841 2f04 	str.w	r2, [r1, #4]!
 800628a:	d8f9      	bhi.n	8006280 <__lshift+0xc8>
 800628c:	e7ea      	b.n	8006264 <__lshift+0xac>
 800628e:	bf00      	nop
 8006290:	0800761b 	.word	0x0800761b
 8006294:	0800762c 	.word	0x0800762c

08006298 <__mcmp>:
 8006298:	4603      	mov	r3, r0
 800629a:	690a      	ldr	r2, [r1, #16]
 800629c:	6900      	ldr	r0, [r0, #16]
 800629e:	b530      	push	{r4, r5, lr}
 80062a0:	1a80      	subs	r0, r0, r2
 80062a2:	d10d      	bne.n	80062c0 <__mcmp+0x28>
 80062a4:	3314      	adds	r3, #20
 80062a6:	3114      	adds	r1, #20
 80062a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062b8:	4295      	cmp	r5, r2
 80062ba:	d002      	beq.n	80062c2 <__mcmp+0x2a>
 80062bc:	d304      	bcc.n	80062c8 <__mcmp+0x30>
 80062be:	2001      	movs	r0, #1
 80062c0:	bd30      	pop	{r4, r5, pc}
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	d3f4      	bcc.n	80062b0 <__mcmp+0x18>
 80062c6:	e7fb      	b.n	80062c0 <__mcmp+0x28>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e7f8      	b.n	80062c0 <__mcmp+0x28>
	...

080062d0 <__mdiff>:
 80062d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	460d      	mov	r5, r1
 80062d6:	4607      	mov	r7, r0
 80062d8:	4611      	mov	r1, r2
 80062da:	4628      	mov	r0, r5
 80062dc:	4614      	mov	r4, r2
 80062de:	f7ff ffdb 	bl	8006298 <__mcmp>
 80062e2:	1e06      	subs	r6, r0, #0
 80062e4:	d111      	bne.n	800630a <__mdiff+0x3a>
 80062e6:	4631      	mov	r1, r6
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff fd57 	bl	8005d9c <_Balloc>
 80062ee:	4602      	mov	r2, r0
 80062f0:	b928      	cbnz	r0, 80062fe <__mdiff+0x2e>
 80062f2:	f240 2132 	movw	r1, #562	; 0x232
 80062f6:	4b3a      	ldr	r3, [pc, #232]	; (80063e0 <__mdiff+0x110>)
 80062f8:	483a      	ldr	r0, [pc, #232]	; (80063e4 <__mdiff+0x114>)
 80062fa:	f000 fb2d 	bl	8006958 <__assert_func>
 80062fe:	2301      	movs	r3, #1
 8006300:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006304:	4610      	mov	r0, r2
 8006306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630a:	bfa4      	itt	ge
 800630c:	4623      	movge	r3, r4
 800630e:	462c      	movge	r4, r5
 8006310:	4638      	mov	r0, r7
 8006312:	6861      	ldr	r1, [r4, #4]
 8006314:	bfa6      	itte	ge
 8006316:	461d      	movge	r5, r3
 8006318:	2600      	movge	r6, #0
 800631a:	2601      	movlt	r6, #1
 800631c:	f7ff fd3e 	bl	8005d9c <_Balloc>
 8006320:	4602      	mov	r2, r0
 8006322:	b918      	cbnz	r0, 800632c <__mdiff+0x5c>
 8006324:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <__mdiff+0x110>)
 800632a:	e7e5      	b.n	80062f8 <__mdiff+0x28>
 800632c:	f102 0814 	add.w	r8, r2, #20
 8006330:	46c2      	mov	sl, r8
 8006332:	f04f 0c00 	mov.w	ip, #0
 8006336:	6927      	ldr	r7, [r4, #16]
 8006338:	60c6      	str	r6, [r0, #12]
 800633a:	692e      	ldr	r6, [r5, #16]
 800633c:	f104 0014 	add.w	r0, r4, #20
 8006340:	f105 0914 	add.w	r9, r5, #20
 8006344:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800634c:	3410      	adds	r4, #16
 800634e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006352:	f859 3b04 	ldr.w	r3, [r9], #4
 8006356:	fa1f f18b 	uxth.w	r1, fp
 800635a:	448c      	add	ip, r1
 800635c:	b299      	uxth	r1, r3
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	ebac 0101 	sub.w	r1, ip, r1
 8006364:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006368:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800636c:	b289      	uxth	r1, r1
 800636e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006372:	454e      	cmp	r6, r9
 8006374:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006378:	f84a 3b04 	str.w	r3, [sl], #4
 800637c:	d8e7      	bhi.n	800634e <__mdiff+0x7e>
 800637e:	1b73      	subs	r3, r6, r5
 8006380:	3b15      	subs	r3, #21
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	3515      	adds	r5, #21
 8006388:	3304      	adds	r3, #4
 800638a:	42ae      	cmp	r6, r5
 800638c:	bf38      	it	cc
 800638e:	2304      	movcc	r3, #4
 8006390:	4418      	add	r0, r3
 8006392:	4443      	add	r3, r8
 8006394:	461e      	mov	r6, r3
 8006396:	4605      	mov	r5, r0
 8006398:	4575      	cmp	r5, lr
 800639a:	d30e      	bcc.n	80063ba <__mdiff+0xea>
 800639c:	f10e 0103 	add.w	r1, lr, #3
 80063a0:	1a09      	subs	r1, r1, r0
 80063a2:	f021 0103 	bic.w	r1, r1, #3
 80063a6:	3803      	subs	r0, #3
 80063a8:	4586      	cmp	lr, r0
 80063aa:	bf38      	it	cc
 80063ac:	2100      	movcc	r1, #0
 80063ae:	4419      	add	r1, r3
 80063b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80063b4:	b18b      	cbz	r3, 80063da <__mdiff+0x10a>
 80063b6:	6117      	str	r7, [r2, #16]
 80063b8:	e7a4      	b.n	8006304 <__mdiff+0x34>
 80063ba:	f855 8b04 	ldr.w	r8, [r5], #4
 80063be:	fa1f f188 	uxth.w	r1, r8
 80063c2:	4461      	add	r1, ip
 80063c4:	140c      	asrs	r4, r1, #16
 80063c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80063ca:	b289      	uxth	r1, r1
 80063cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063d0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80063d4:	f846 1b04 	str.w	r1, [r6], #4
 80063d8:	e7de      	b.n	8006398 <__mdiff+0xc8>
 80063da:	3f01      	subs	r7, #1
 80063dc:	e7e8      	b.n	80063b0 <__mdiff+0xe0>
 80063de:	bf00      	nop
 80063e0:	0800761b 	.word	0x0800761b
 80063e4:	0800762c 	.word	0x0800762c

080063e8 <__d2b>:
 80063e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80063ec:	2101      	movs	r1, #1
 80063ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80063f2:	4690      	mov	r8, r2
 80063f4:	461d      	mov	r5, r3
 80063f6:	f7ff fcd1 	bl	8005d9c <_Balloc>
 80063fa:	4604      	mov	r4, r0
 80063fc:	b930      	cbnz	r0, 800640c <__d2b+0x24>
 80063fe:	4602      	mov	r2, r0
 8006400:	f240 310a 	movw	r1, #778	; 0x30a
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <__d2b+0xb0>)
 8006406:	4825      	ldr	r0, [pc, #148]	; (800649c <__d2b+0xb4>)
 8006408:	f000 faa6 	bl	8006958 <__assert_func>
 800640c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006410:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006414:	bb2d      	cbnz	r5, 8006462 <__d2b+0x7a>
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	f1b8 0300 	subs.w	r3, r8, #0
 800641c:	d026      	beq.n	800646c <__d2b+0x84>
 800641e:	4668      	mov	r0, sp
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	f7ff fd83 	bl	8005f2c <__lo0bits>
 8006426:	9900      	ldr	r1, [sp, #0]
 8006428:	b1f0      	cbz	r0, 8006468 <__d2b+0x80>
 800642a:	9a01      	ldr	r2, [sp, #4]
 800642c:	f1c0 0320 	rsb	r3, r0, #32
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	430b      	orrs	r3, r1
 8006436:	40c2      	lsrs	r2, r0
 8006438:	6163      	str	r3, [r4, #20]
 800643a:	9201      	str	r2, [sp, #4]
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf14      	ite	ne
 8006442:	2102      	movne	r1, #2
 8006444:	2101      	moveq	r1, #1
 8006446:	61a3      	str	r3, [r4, #24]
 8006448:	6121      	str	r1, [r4, #16]
 800644a:	b1c5      	cbz	r5, 800647e <__d2b+0x96>
 800644c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006450:	4405      	add	r5, r0
 8006452:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006456:	603d      	str	r5, [r7, #0]
 8006458:	6030      	str	r0, [r6, #0]
 800645a:	4620      	mov	r0, r4
 800645c:	b002      	add	sp, #8
 800645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006466:	e7d6      	b.n	8006416 <__d2b+0x2e>
 8006468:	6161      	str	r1, [r4, #20]
 800646a:	e7e7      	b.n	800643c <__d2b+0x54>
 800646c:	a801      	add	r0, sp, #4
 800646e:	f7ff fd5d 	bl	8005f2c <__lo0bits>
 8006472:	2101      	movs	r1, #1
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	6121      	str	r1, [r4, #16]
 8006478:	6163      	str	r3, [r4, #20]
 800647a:	3020      	adds	r0, #32
 800647c:	e7e5      	b.n	800644a <__d2b+0x62>
 800647e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006486:	6038      	str	r0, [r7, #0]
 8006488:	6918      	ldr	r0, [r3, #16]
 800648a:	f7ff fd2f 	bl	8005eec <__hi0bits>
 800648e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006492:	6031      	str	r1, [r6, #0]
 8006494:	e7e1      	b.n	800645a <__d2b+0x72>
 8006496:	bf00      	nop
 8006498:	0800761b 	.word	0x0800761b
 800649c:	0800762c 	.word	0x0800762c

080064a0 <_calloc_r>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	fba1 5402 	umull	r5, r4, r1, r2
 80064a6:	b934      	cbnz	r4, 80064b6 <_calloc_r+0x16>
 80064a8:	4629      	mov	r1, r5
 80064aa:	f000 f875 	bl	8006598 <_malloc_r>
 80064ae:	4606      	mov	r6, r0
 80064b0:	b928      	cbnz	r0, 80064be <_calloc_r+0x1e>
 80064b2:	4630      	mov	r0, r6
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	220c      	movs	r2, #12
 80064b8:	2600      	movs	r6, #0
 80064ba:	6002      	str	r2, [r0, #0]
 80064bc:	e7f9      	b.n	80064b2 <_calloc_r+0x12>
 80064be:	462a      	mov	r2, r5
 80064c0:	4621      	mov	r1, r4
 80064c2:	f7fe f92b 	bl	800471c <memset>
 80064c6:	e7f4      	b.n	80064b2 <_calloc_r+0x12>

080064c8 <_free_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d040      	beq.n	8006552 <_free_r+0x8a>
 80064d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d4:	1f0c      	subs	r4, r1, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	18e4      	addlt	r4, r4, r3
 80064dc:	f000 fa98 	bl	8006a10 <__malloc_lock>
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <_free_r+0x8c>)
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	b933      	cbnz	r3, 80064f4 <_free_r+0x2c>
 80064e6:	6063      	str	r3, [r4, #4]
 80064e8:	6014      	str	r4, [r2, #0]
 80064ea:	4628      	mov	r0, r5
 80064ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f0:	f000 ba94 	b.w	8006a1c <__malloc_unlock>
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d908      	bls.n	800650a <_free_r+0x42>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	1821      	adds	r1, r4, r0
 80064fc:	428b      	cmp	r3, r1
 80064fe:	bf01      	itttt	eq
 8006500:	6819      	ldreq	r1, [r3, #0]
 8006502:	685b      	ldreq	r3, [r3, #4]
 8006504:	1809      	addeq	r1, r1, r0
 8006506:	6021      	streq	r1, [r4, #0]
 8006508:	e7ed      	b.n	80064e6 <_free_r+0x1e>
 800650a:	461a      	mov	r2, r3
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	b10b      	cbz	r3, 8006514 <_free_r+0x4c>
 8006510:	42a3      	cmp	r3, r4
 8006512:	d9fa      	bls.n	800650a <_free_r+0x42>
 8006514:	6811      	ldr	r1, [r2, #0]
 8006516:	1850      	adds	r0, r2, r1
 8006518:	42a0      	cmp	r0, r4
 800651a:	d10b      	bne.n	8006534 <_free_r+0x6c>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	4401      	add	r1, r0
 8006520:	1850      	adds	r0, r2, r1
 8006522:	4283      	cmp	r3, r0
 8006524:	6011      	str	r1, [r2, #0]
 8006526:	d1e0      	bne.n	80064ea <_free_r+0x22>
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4401      	add	r1, r0
 800652e:	6011      	str	r1, [r2, #0]
 8006530:	6053      	str	r3, [r2, #4]
 8006532:	e7da      	b.n	80064ea <_free_r+0x22>
 8006534:	d902      	bls.n	800653c <_free_r+0x74>
 8006536:	230c      	movs	r3, #12
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	e7d6      	b.n	80064ea <_free_r+0x22>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	1821      	adds	r1, r4, r0
 8006540:	428b      	cmp	r3, r1
 8006542:	bf01      	itttt	eq
 8006544:	6819      	ldreq	r1, [r3, #0]
 8006546:	685b      	ldreq	r3, [r3, #4]
 8006548:	1809      	addeq	r1, r1, r0
 800654a:	6021      	streq	r1, [r4, #0]
 800654c:	6063      	str	r3, [r4, #4]
 800654e:	6054      	str	r4, [r2, #4]
 8006550:	e7cb      	b.n	80064ea <_free_r+0x22>
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	2000032c 	.word	0x2000032c

08006558 <sbrk_aligned>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	4e0e      	ldr	r6, [pc, #56]	; (8006594 <sbrk_aligned+0x3c>)
 800655c:	460c      	mov	r4, r1
 800655e:	6831      	ldr	r1, [r6, #0]
 8006560:	4605      	mov	r5, r0
 8006562:	b911      	cbnz	r1, 800656a <sbrk_aligned+0x12>
 8006564:	f000 f9e8 	bl	8006938 <_sbrk_r>
 8006568:	6030      	str	r0, [r6, #0]
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f9e3 	bl	8006938 <_sbrk_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	d00a      	beq.n	800658c <sbrk_aligned+0x34>
 8006576:	1cc4      	adds	r4, r0, #3
 8006578:	f024 0403 	bic.w	r4, r4, #3
 800657c:	42a0      	cmp	r0, r4
 800657e:	d007      	beq.n	8006590 <sbrk_aligned+0x38>
 8006580:	1a21      	subs	r1, r4, r0
 8006582:	4628      	mov	r0, r5
 8006584:	f000 f9d8 	bl	8006938 <_sbrk_r>
 8006588:	3001      	adds	r0, #1
 800658a:	d101      	bne.n	8006590 <sbrk_aligned+0x38>
 800658c:	f04f 34ff 	mov.w	r4, #4294967295
 8006590:	4620      	mov	r0, r4
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	20000330 	.word	0x20000330

08006598 <_malloc_r>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	1ccd      	adds	r5, r1, #3
 800659e:	f025 0503 	bic.w	r5, r5, #3
 80065a2:	3508      	adds	r5, #8
 80065a4:	2d0c      	cmp	r5, #12
 80065a6:	bf38      	it	cc
 80065a8:	250c      	movcc	r5, #12
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	4607      	mov	r7, r0
 80065ae:	db01      	blt.n	80065b4 <_malloc_r+0x1c>
 80065b0:	42a9      	cmp	r1, r5
 80065b2:	d905      	bls.n	80065c0 <_malloc_r+0x28>
 80065b4:	230c      	movs	r3, #12
 80065b6:	2600      	movs	r6, #0
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4630      	mov	r0, r6
 80065bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c0:	4e2e      	ldr	r6, [pc, #184]	; (800667c <_malloc_r+0xe4>)
 80065c2:	f000 fa25 	bl	8006a10 <__malloc_lock>
 80065c6:	6833      	ldr	r3, [r6, #0]
 80065c8:	461c      	mov	r4, r3
 80065ca:	bb34      	cbnz	r4, 800661a <_malloc_r+0x82>
 80065cc:	4629      	mov	r1, r5
 80065ce:	4638      	mov	r0, r7
 80065d0:	f7ff ffc2 	bl	8006558 <sbrk_aligned>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	4604      	mov	r4, r0
 80065d8:	d14d      	bne.n	8006676 <_malloc_r+0xde>
 80065da:	6834      	ldr	r4, [r6, #0]
 80065dc:	4626      	mov	r6, r4
 80065de:	2e00      	cmp	r6, #0
 80065e0:	d140      	bne.n	8006664 <_malloc_r+0xcc>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	4631      	mov	r1, r6
 80065e6:	4638      	mov	r0, r7
 80065e8:	eb04 0803 	add.w	r8, r4, r3
 80065ec:	f000 f9a4 	bl	8006938 <_sbrk_r>
 80065f0:	4580      	cmp	r8, r0
 80065f2:	d13a      	bne.n	800666a <_malloc_r+0xd2>
 80065f4:	6821      	ldr	r1, [r4, #0]
 80065f6:	3503      	adds	r5, #3
 80065f8:	1a6d      	subs	r5, r5, r1
 80065fa:	f025 0503 	bic.w	r5, r5, #3
 80065fe:	3508      	adds	r5, #8
 8006600:	2d0c      	cmp	r5, #12
 8006602:	bf38      	it	cc
 8006604:	250c      	movcc	r5, #12
 8006606:	4638      	mov	r0, r7
 8006608:	4629      	mov	r1, r5
 800660a:	f7ff ffa5 	bl	8006558 <sbrk_aligned>
 800660e:	3001      	adds	r0, #1
 8006610:	d02b      	beq.n	800666a <_malloc_r+0xd2>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	442b      	add	r3, r5
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	e00e      	b.n	8006638 <_malloc_r+0xa0>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	1b52      	subs	r2, r2, r5
 800661e:	d41e      	bmi.n	800665e <_malloc_r+0xc6>
 8006620:	2a0b      	cmp	r2, #11
 8006622:	d916      	bls.n	8006652 <_malloc_r+0xba>
 8006624:	1961      	adds	r1, r4, r5
 8006626:	42a3      	cmp	r3, r4
 8006628:	6025      	str	r5, [r4, #0]
 800662a:	bf18      	it	ne
 800662c:	6059      	strne	r1, [r3, #4]
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	bf08      	it	eq
 8006632:	6031      	streq	r1, [r6, #0]
 8006634:	5162      	str	r2, [r4, r5]
 8006636:	604b      	str	r3, [r1, #4]
 8006638:	4638      	mov	r0, r7
 800663a:	f104 060b 	add.w	r6, r4, #11
 800663e:	f000 f9ed 	bl	8006a1c <__malloc_unlock>
 8006642:	f026 0607 	bic.w	r6, r6, #7
 8006646:	1d23      	adds	r3, r4, #4
 8006648:	1af2      	subs	r2, r6, r3
 800664a:	d0b6      	beq.n	80065ba <_malloc_r+0x22>
 800664c:	1b9b      	subs	r3, r3, r6
 800664e:	50a3      	str	r3, [r4, r2]
 8006650:	e7b3      	b.n	80065ba <_malloc_r+0x22>
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	42a3      	cmp	r3, r4
 8006656:	bf0c      	ite	eq
 8006658:	6032      	streq	r2, [r6, #0]
 800665a:	605a      	strne	r2, [r3, #4]
 800665c:	e7ec      	b.n	8006638 <_malloc_r+0xa0>
 800665e:	4623      	mov	r3, r4
 8006660:	6864      	ldr	r4, [r4, #4]
 8006662:	e7b2      	b.n	80065ca <_malloc_r+0x32>
 8006664:	4634      	mov	r4, r6
 8006666:	6876      	ldr	r6, [r6, #4]
 8006668:	e7b9      	b.n	80065de <_malloc_r+0x46>
 800666a:	230c      	movs	r3, #12
 800666c:	4638      	mov	r0, r7
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	f000 f9d4 	bl	8006a1c <__malloc_unlock>
 8006674:	e7a1      	b.n	80065ba <_malloc_r+0x22>
 8006676:	6025      	str	r5, [r4, #0]
 8006678:	e7de      	b.n	8006638 <_malloc_r+0xa0>
 800667a:	bf00      	nop
 800667c:	2000032c 	.word	0x2000032c

08006680 <__ssputs_r>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	688e      	ldr	r6, [r1, #8]
 8006686:	4682      	mov	sl, r0
 8006688:	429e      	cmp	r6, r3
 800668a:	460c      	mov	r4, r1
 800668c:	4690      	mov	r8, r2
 800668e:	461f      	mov	r7, r3
 8006690:	d838      	bhi.n	8006704 <__ssputs_r+0x84>
 8006692:	898a      	ldrh	r2, [r1, #12]
 8006694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006698:	d032      	beq.n	8006700 <__ssputs_r+0x80>
 800669a:	6825      	ldr	r5, [r4, #0]
 800669c:	6909      	ldr	r1, [r1, #16]
 800669e:	3301      	adds	r3, #1
 80066a0:	eba5 0901 	sub.w	r9, r5, r1
 80066a4:	6965      	ldr	r5, [r4, #20]
 80066a6:	444b      	add	r3, r9
 80066a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066b0:	106d      	asrs	r5, r5, #1
 80066b2:	429d      	cmp	r5, r3
 80066b4:	bf38      	it	cc
 80066b6:	461d      	movcc	r5, r3
 80066b8:	0553      	lsls	r3, r2, #21
 80066ba:	d531      	bpl.n	8006720 <__ssputs_r+0xa0>
 80066bc:	4629      	mov	r1, r5
 80066be:	f7ff ff6b 	bl	8006598 <_malloc_r>
 80066c2:	4606      	mov	r6, r0
 80066c4:	b950      	cbnz	r0, 80066dc <__ssputs_r+0x5c>
 80066c6:	230c      	movs	r3, #12
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	f8ca 3000 	str.w	r3, [sl]
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	464a      	mov	r2, r9
 80066de:	6921      	ldr	r1, [r4, #16]
 80066e0:	f7ff fb4e 	bl	8005d80 <memcpy>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	6126      	str	r6, [r4, #16]
 80066f2:	444e      	add	r6, r9
 80066f4:	6026      	str	r6, [r4, #0]
 80066f6:	463e      	mov	r6, r7
 80066f8:	6165      	str	r5, [r4, #20]
 80066fa:	eba5 0509 	sub.w	r5, r5, r9
 80066fe:	60a5      	str	r5, [r4, #8]
 8006700:	42be      	cmp	r6, r7
 8006702:	d900      	bls.n	8006706 <__ssputs_r+0x86>
 8006704:	463e      	mov	r6, r7
 8006706:	4632      	mov	r2, r6
 8006708:	4641      	mov	r1, r8
 800670a:	6820      	ldr	r0, [r4, #0]
 800670c:	f000 f966 	bl	80069dc <memmove>
 8006710:	68a3      	ldr	r3, [r4, #8]
 8006712:	2000      	movs	r0, #0
 8006714:	1b9b      	subs	r3, r3, r6
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	4433      	add	r3, r6
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	e7db      	b.n	80066d8 <__ssputs_r+0x58>
 8006720:	462a      	mov	r2, r5
 8006722:	f000 f981 	bl	8006a28 <_realloc_r>
 8006726:	4606      	mov	r6, r0
 8006728:	2800      	cmp	r0, #0
 800672a:	d1e1      	bne.n	80066f0 <__ssputs_r+0x70>
 800672c:	4650      	mov	r0, sl
 800672e:	6921      	ldr	r1, [r4, #16]
 8006730:	f7ff feca 	bl	80064c8 <_free_r>
 8006734:	e7c7      	b.n	80066c6 <__ssputs_r+0x46>
	...

08006738 <_svfiprintf_r>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	4698      	mov	r8, r3
 800673e:	898b      	ldrh	r3, [r1, #12]
 8006740:	4607      	mov	r7, r0
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	460d      	mov	r5, r1
 8006746:	4614      	mov	r4, r2
 8006748:	b09d      	sub	sp, #116	; 0x74
 800674a:	d50e      	bpl.n	800676a <_svfiprintf_r+0x32>
 800674c:	690b      	ldr	r3, [r1, #16]
 800674e:	b963      	cbnz	r3, 800676a <_svfiprintf_r+0x32>
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	f7ff ff21 	bl	8006598 <_malloc_r>
 8006756:	6028      	str	r0, [r5, #0]
 8006758:	6128      	str	r0, [r5, #16]
 800675a:	b920      	cbnz	r0, 8006766 <_svfiprintf_r+0x2e>
 800675c:	230c      	movs	r3, #12
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	e0d1      	b.n	800690a <_svfiprintf_r+0x1d2>
 8006766:	2340      	movs	r3, #64	; 0x40
 8006768:	616b      	str	r3, [r5, #20]
 800676a:	2300      	movs	r3, #0
 800676c:	9309      	str	r3, [sp, #36]	; 0x24
 800676e:	2320      	movs	r3, #32
 8006770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006774:	2330      	movs	r3, #48	; 0x30
 8006776:	f04f 0901 	mov.w	r9, #1
 800677a:	f8cd 800c 	str.w	r8, [sp, #12]
 800677e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006924 <_svfiprintf_r+0x1ec>
 8006782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006786:	4623      	mov	r3, r4
 8006788:	469a      	mov	sl, r3
 800678a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800678e:	b10a      	cbz	r2, 8006794 <_svfiprintf_r+0x5c>
 8006790:	2a25      	cmp	r2, #37	; 0x25
 8006792:	d1f9      	bne.n	8006788 <_svfiprintf_r+0x50>
 8006794:	ebba 0b04 	subs.w	fp, sl, r4
 8006798:	d00b      	beq.n	80067b2 <_svfiprintf_r+0x7a>
 800679a:	465b      	mov	r3, fp
 800679c:	4622      	mov	r2, r4
 800679e:	4629      	mov	r1, r5
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff ff6d 	bl	8006680 <__ssputs_r>
 80067a6:	3001      	adds	r0, #1
 80067a8:	f000 80aa 	beq.w	8006900 <_svfiprintf_r+0x1c8>
 80067ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ae:	445a      	add	r2, fp
 80067b0:	9209      	str	r2, [sp, #36]	; 0x24
 80067b2:	f89a 3000 	ldrb.w	r3, [sl]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80a2 	beq.w	8006900 <_svfiprintf_r+0x1c8>
 80067bc:	2300      	movs	r3, #0
 80067be:	f04f 32ff 	mov.w	r2, #4294967295
 80067c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067c6:	f10a 0a01 	add.w	sl, sl, #1
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	9307      	str	r3, [sp, #28]
 80067ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067d2:	931a      	str	r3, [sp, #104]	; 0x68
 80067d4:	4654      	mov	r4, sl
 80067d6:	2205      	movs	r2, #5
 80067d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067dc:	4851      	ldr	r0, [pc, #324]	; (8006924 <_svfiprintf_r+0x1ec>)
 80067de:	f7ff fac1 	bl	8005d64 <memchr>
 80067e2:	9a04      	ldr	r2, [sp, #16]
 80067e4:	b9d8      	cbnz	r0, 800681e <_svfiprintf_r+0xe6>
 80067e6:	06d0      	lsls	r0, r2, #27
 80067e8:	bf44      	itt	mi
 80067ea:	2320      	movmi	r3, #32
 80067ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f0:	0711      	lsls	r1, r2, #28
 80067f2:	bf44      	itt	mi
 80067f4:	232b      	movmi	r3, #43	; 0x2b
 80067f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067fa:	f89a 3000 	ldrb.w	r3, [sl]
 80067fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006800:	d015      	beq.n	800682e <_svfiprintf_r+0xf6>
 8006802:	4654      	mov	r4, sl
 8006804:	2000      	movs	r0, #0
 8006806:	f04f 0c0a 	mov.w	ip, #10
 800680a:	9a07      	ldr	r2, [sp, #28]
 800680c:	4621      	mov	r1, r4
 800680e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006812:	3b30      	subs	r3, #48	; 0x30
 8006814:	2b09      	cmp	r3, #9
 8006816:	d94e      	bls.n	80068b6 <_svfiprintf_r+0x17e>
 8006818:	b1b0      	cbz	r0, 8006848 <_svfiprintf_r+0x110>
 800681a:	9207      	str	r2, [sp, #28]
 800681c:	e014      	b.n	8006848 <_svfiprintf_r+0x110>
 800681e:	eba0 0308 	sub.w	r3, r0, r8
 8006822:	fa09 f303 	lsl.w	r3, r9, r3
 8006826:	4313      	orrs	r3, r2
 8006828:	46a2      	mov	sl, r4
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	e7d2      	b.n	80067d4 <_svfiprintf_r+0x9c>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	9103      	str	r1, [sp, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfbb      	ittet	lt
 800683a:	425b      	neglt	r3, r3
 800683c:	f042 0202 	orrlt.w	r2, r2, #2
 8006840:	9307      	strge	r3, [sp, #28]
 8006842:	9307      	strlt	r3, [sp, #28]
 8006844:	bfb8      	it	lt
 8006846:	9204      	strlt	r2, [sp, #16]
 8006848:	7823      	ldrb	r3, [r4, #0]
 800684a:	2b2e      	cmp	r3, #46	; 0x2e
 800684c:	d10c      	bne.n	8006868 <_svfiprintf_r+0x130>
 800684e:	7863      	ldrb	r3, [r4, #1]
 8006850:	2b2a      	cmp	r3, #42	; 0x2a
 8006852:	d135      	bne.n	80068c0 <_svfiprintf_r+0x188>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	3402      	adds	r4, #2
 8006858:	1d1a      	adds	r2, r3, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	9203      	str	r2, [sp, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfb8      	it	lt
 8006862:	f04f 33ff 	movlt.w	r3, #4294967295
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006928 <_svfiprintf_r+0x1f0>
 800686c:	2203      	movs	r2, #3
 800686e:	4650      	mov	r0, sl
 8006870:	7821      	ldrb	r1, [r4, #0]
 8006872:	f7ff fa77 	bl	8005d64 <memchr>
 8006876:	b140      	cbz	r0, 800688a <_svfiprintf_r+0x152>
 8006878:	2340      	movs	r3, #64	; 0x40
 800687a:	eba0 000a 	sub.w	r0, r0, sl
 800687e:	fa03 f000 	lsl.w	r0, r3, r0
 8006882:	9b04      	ldr	r3, [sp, #16]
 8006884:	3401      	adds	r4, #1
 8006886:	4303      	orrs	r3, r0
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688e:	2206      	movs	r2, #6
 8006890:	4826      	ldr	r0, [pc, #152]	; (800692c <_svfiprintf_r+0x1f4>)
 8006892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006896:	f7ff fa65 	bl	8005d64 <memchr>
 800689a:	2800      	cmp	r0, #0
 800689c:	d038      	beq.n	8006910 <_svfiprintf_r+0x1d8>
 800689e:	4b24      	ldr	r3, [pc, #144]	; (8006930 <_svfiprintf_r+0x1f8>)
 80068a0:	bb1b      	cbnz	r3, 80068ea <_svfiprintf_r+0x1b2>
 80068a2:	9b03      	ldr	r3, [sp, #12]
 80068a4:	3307      	adds	r3, #7
 80068a6:	f023 0307 	bic.w	r3, r3, #7
 80068aa:	3308      	adds	r3, #8
 80068ac:	9303      	str	r3, [sp, #12]
 80068ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b0:	4433      	add	r3, r6
 80068b2:	9309      	str	r3, [sp, #36]	; 0x24
 80068b4:	e767      	b.n	8006786 <_svfiprintf_r+0x4e>
 80068b6:	460c      	mov	r4, r1
 80068b8:	2001      	movs	r0, #1
 80068ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80068be:	e7a5      	b.n	800680c <_svfiprintf_r+0xd4>
 80068c0:	2300      	movs	r3, #0
 80068c2:	f04f 0c0a 	mov.w	ip, #10
 80068c6:	4619      	mov	r1, r3
 80068c8:	3401      	adds	r4, #1
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	4620      	mov	r0, r4
 80068ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d2:	3a30      	subs	r2, #48	; 0x30
 80068d4:	2a09      	cmp	r2, #9
 80068d6:	d903      	bls.n	80068e0 <_svfiprintf_r+0x1a8>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0c5      	beq.n	8006868 <_svfiprintf_r+0x130>
 80068dc:	9105      	str	r1, [sp, #20]
 80068de:	e7c3      	b.n	8006868 <_svfiprintf_r+0x130>
 80068e0:	4604      	mov	r4, r0
 80068e2:	2301      	movs	r3, #1
 80068e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068e8:	e7f0      	b.n	80068cc <_svfiprintf_r+0x194>
 80068ea:	ab03      	add	r3, sp, #12
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	462a      	mov	r2, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <_svfiprintf_r+0x1fc>)
 80068f4:	a904      	add	r1, sp, #16
 80068f6:	f7fd ffb7 	bl	8004868 <_printf_float>
 80068fa:	1c42      	adds	r2, r0, #1
 80068fc:	4606      	mov	r6, r0
 80068fe:	d1d6      	bne.n	80068ae <_svfiprintf_r+0x176>
 8006900:	89ab      	ldrh	r3, [r5, #12]
 8006902:	065b      	lsls	r3, r3, #25
 8006904:	f53f af2c 	bmi.w	8006760 <_svfiprintf_r+0x28>
 8006908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800690a:	b01d      	add	sp, #116	; 0x74
 800690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006910:	ab03      	add	r3, sp, #12
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	462a      	mov	r2, r5
 8006916:	4638      	mov	r0, r7
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <_svfiprintf_r+0x1fc>)
 800691a:	a904      	add	r1, sp, #16
 800691c:	f7fe fa40 	bl	8004da0 <_printf_i>
 8006920:	e7eb      	b.n	80068fa <_svfiprintf_r+0x1c2>
 8006922:	bf00      	nop
 8006924:	08007784 	.word	0x08007784
 8006928:	0800778a 	.word	0x0800778a
 800692c:	0800778e 	.word	0x0800778e
 8006930:	08004869 	.word	0x08004869
 8006934:	08006681 	.word	0x08006681

08006938 <_sbrk_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	2300      	movs	r3, #0
 800693c:	4d05      	ldr	r5, [pc, #20]	; (8006954 <_sbrk_r+0x1c>)
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7fb f81c 	bl	8001980 <_sbrk>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_sbrk_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_sbrk_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	20000334 	.word	0x20000334

08006958 <__assert_func>:
 8006958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800695a:	4614      	mov	r4, r2
 800695c:	461a      	mov	r2, r3
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <__assert_func+0x2c>)
 8006960:	4605      	mov	r5, r0
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68d8      	ldr	r0, [r3, #12]
 8006966:	b14c      	cbz	r4, 800697c <__assert_func+0x24>
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <__assert_func+0x30>)
 800696a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800696e:	9100      	str	r1, [sp, #0]
 8006970:	462b      	mov	r3, r5
 8006972:	4906      	ldr	r1, [pc, #24]	; (800698c <__assert_func+0x34>)
 8006974:	f000 f80e 	bl	8006994 <fiprintf>
 8006978:	f000 faaa 	bl	8006ed0 <abort>
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <__assert_func+0x38>)
 800697e:	461c      	mov	r4, r3
 8006980:	e7f3      	b.n	800696a <__assert_func+0x12>
 8006982:	bf00      	nop
 8006984:	2000001c 	.word	0x2000001c
 8006988:	08007795 	.word	0x08007795
 800698c:	080077a2 	.word	0x080077a2
 8006990:	080077d0 	.word	0x080077d0

08006994 <fiprintf>:
 8006994:	b40e      	push	{r1, r2, r3}
 8006996:	b503      	push	{r0, r1, lr}
 8006998:	4601      	mov	r1, r0
 800699a:	ab03      	add	r3, sp, #12
 800699c:	4805      	ldr	r0, [pc, #20]	; (80069b4 <fiprintf+0x20>)
 800699e:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	f000 f895 	bl	8006ad4 <_vfiprintf_r>
 80069aa:	b002      	add	sp, #8
 80069ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b0:	b003      	add	sp, #12
 80069b2:	4770      	bx	lr
 80069b4:	2000001c 	.word	0x2000001c

080069b8 <__ascii_mbtowc>:
 80069b8:	b082      	sub	sp, #8
 80069ba:	b901      	cbnz	r1, 80069be <__ascii_mbtowc+0x6>
 80069bc:	a901      	add	r1, sp, #4
 80069be:	b142      	cbz	r2, 80069d2 <__ascii_mbtowc+0x1a>
 80069c0:	b14b      	cbz	r3, 80069d6 <__ascii_mbtowc+0x1e>
 80069c2:	7813      	ldrb	r3, [r2, #0]
 80069c4:	600b      	str	r3, [r1, #0]
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	1e10      	subs	r0, r2, #0
 80069ca:	bf18      	it	ne
 80069cc:	2001      	movne	r0, #1
 80069ce:	b002      	add	sp, #8
 80069d0:	4770      	bx	lr
 80069d2:	4610      	mov	r0, r2
 80069d4:	e7fb      	b.n	80069ce <__ascii_mbtowc+0x16>
 80069d6:	f06f 0001 	mvn.w	r0, #1
 80069da:	e7f8      	b.n	80069ce <__ascii_mbtowc+0x16>

080069dc <memmove>:
 80069dc:	4288      	cmp	r0, r1
 80069de:	b510      	push	{r4, lr}
 80069e0:	eb01 0402 	add.w	r4, r1, r2
 80069e4:	d902      	bls.n	80069ec <memmove+0x10>
 80069e6:	4284      	cmp	r4, r0
 80069e8:	4623      	mov	r3, r4
 80069ea:	d807      	bhi.n	80069fc <memmove+0x20>
 80069ec:	1e43      	subs	r3, r0, #1
 80069ee:	42a1      	cmp	r1, r4
 80069f0:	d008      	beq.n	8006a04 <memmove+0x28>
 80069f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069fa:	e7f8      	b.n	80069ee <memmove+0x12>
 80069fc:	4601      	mov	r1, r0
 80069fe:	4402      	add	r2, r0
 8006a00:	428a      	cmp	r2, r1
 8006a02:	d100      	bne.n	8006a06 <memmove+0x2a>
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a0e:	e7f7      	b.n	8006a00 <memmove+0x24>

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_lock+0x8>)
 8006a12:	f000 bc19 	b.w	8007248 <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000338 	.word	0x20000338

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f000 bc14 	b.w	800724a <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20000338 	.word	0x20000338

08006a28 <_realloc_r>:
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4614      	mov	r4, r2
 8006a30:	460e      	mov	r6, r1
 8006a32:	b921      	cbnz	r1, 8006a3e <_realloc_r+0x16>
 8006a34:	4611      	mov	r1, r2
 8006a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3a:	f7ff bdad 	b.w	8006598 <_malloc_r>
 8006a3e:	b92a      	cbnz	r2, 8006a4c <_realloc_r+0x24>
 8006a40:	f7ff fd42 	bl	80064c8 <_free_r>
 8006a44:	4625      	mov	r5, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	f000 fc64 	bl	8007318 <_malloc_usable_size_r>
 8006a50:	4284      	cmp	r4, r0
 8006a52:	4607      	mov	r7, r0
 8006a54:	d802      	bhi.n	8006a5c <_realloc_r+0x34>
 8006a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a5a:	d812      	bhi.n	8006a82 <_realloc_r+0x5a>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f7ff fd9a 	bl	8006598 <_malloc_r>
 8006a64:	4605      	mov	r5, r0
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d0ed      	beq.n	8006a46 <_realloc_r+0x1e>
 8006a6a:	42bc      	cmp	r4, r7
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	4631      	mov	r1, r6
 8006a70:	bf28      	it	cs
 8006a72:	463a      	movcs	r2, r7
 8006a74:	f7ff f984 	bl	8005d80 <memcpy>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f7ff fd24 	bl	80064c8 <_free_r>
 8006a80:	e7e1      	b.n	8006a46 <_realloc_r+0x1e>
 8006a82:	4635      	mov	r5, r6
 8006a84:	e7df      	b.n	8006a46 <_realloc_r+0x1e>

08006a86 <__sfputc_r>:
 8006a86:	6893      	ldr	r3, [r2, #8]
 8006a88:	b410      	push	{r4}
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	6093      	str	r3, [r2, #8]
 8006a90:	da07      	bge.n	8006aa2 <__sfputc_r+0x1c>
 8006a92:	6994      	ldr	r4, [r2, #24]
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	db01      	blt.n	8006a9c <__sfputc_r+0x16>
 8006a98:	290a      	cmp	r1, #10
 8006a9a:	d102      	bne.n	8006aa2 <__sfputc_r+0x1c>
 8006a9c:	bc10      	pop	{r4}
 8006a9e:	f000 b949 	b.w	8006d34 <__swbuf_r>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	bc10      	pop	{r4}
 8006aae:	4770      	bx	lr

08006ab0 <__sfputs_r>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	4614      	mov	r4, r2
 8006ab8:	18d5      	adds	r5, r2, r3
 8006aba:	42ac      	cmp	r4, r5
 8006abc:	d101      	bne.n	8006ac2 <__sfputs_r+0x12>
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e007      	b.n	8006ad2 <__sfputs_r+0x22>
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	f7ff ffdc 	bl	8006a86 <__sfputc_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d1f3      	bne.n	8006aba <__sfputs_r+0xa>
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ad4 <_vfiprintf_r>:
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	460d      	mov	r5, r1
 8006ada:	4614      	mov	r4, r2
 8006adc:	4698      	mov	r8, r3
 8006ade:	4606      	mov	r6, r0
 8006ae0:	b09d      	sub	sp, #116	; 0x74
 8006ae2:	b118      	cbz	r0, 8006aec <_vfiprintf_r+0x18>
 8006ae4:	6983      	ldr	r3, [r0, #24]
 8006ae6:	b90b      	cbnz	r3, 8006aec <_vfiprintf_r+0x18>
 8006ae8:	f000 fb10 	bl	800710c <__sinit>
 8006aec:	4b89      	ldr	r3, [pc, #548]	; (8006d14 <_vfiprintf_r+0x240>)
 8006aee:	429d      	cmp	r5, r3
 8006af0:	d11b      	bne.n	8006b2a <_vfiprintf_r+0x56>
 8006af2:	6875      	ldr	r5, [r6, #4]
 8006af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006af6:	07d9      	lsls	r1, r3, #31
 8006af8:	d405      	bmi.n	8006b06 <_vfiprintf_r+0x32>
 8006afa:	89ab      	ldrh	r3, [r5, #12]
 8006afc:	059a      	lsls	r2, r3, #22
 8006afe:	d402      	bmi.n	8006b06 <_vfiprintf_r+0x32>
 8006b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b02:	f000 fba1 	bl	8007248 <__retarget_lock_acquire_recursive>
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	071b      	lsls	r3, r3, #28
 8006b0a:	d501      	bpl.n	8006b10 <_vfiprintf_r+0x3c>
 8006b0c:	692b      	ldr	r3, [r5, #16]
 8006b0e:	b9eb      	cbnz	r3, 8006b4c <_vfiprintf_r+0x78>
 8006b10:	4629      	mov	r1, r5
 8006b12:	4630      	mov	r0, r6
 8006b14:	f000 f96e 	bl	8006df4 <__swsetup_r>
 8006b18:	b1c0      	cbz	r0, 8006b4c <_vfiprintf_r+0x78>
 8006b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b1c:	07dc      	lsls	r4, r3, #31
 8006b1e:	d50e      	bpl.n	8006b3e <_vfiprintf_r+0x6a>
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	b01d      	add	sp, #116	; 0x74
 8006b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2a:	4b7b      	ldr	r3, [pc, #492]	; (8006d18 <_vfiprintf_r+0x244>)
 8006b2c:	429d      	cmp	r5, r3
 8006b2e:	d101      	bne.n	8006b34 <_vfiprintf_r+0x60>
 8006b30:	68b5      	ldr	r5, [r6, #8]
 8006b32:	e7df      	b.n	8006af4 <_vfiprintf_r+0x20>
 8006b34:	4b79      	ldr	r3, [pc, #484]	; (8006d1c <_vfiprintf_r+0x248>)
 8006b36:	429d      	cmp	r5, r3
 8006b38:	bf08      	it	eq
 8006b3a:	68f5      	ldreq	r5, [r6, #12]
 8006b3c:	e7da      	b.n	8006af4 <_vfiprintf_r+0x20>
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	0598      	lsls	r0, r3, #22
 8006b42:	d4ed      	bmi.n	8006b20 <_vfiprintf_r+0x4c>
 8006b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b46:	f000 fb80 	bl	800724a <__retarget_lock_release_recursive>
 8006b4a:	e7e9      	b.n	8006b20 <_vfiprintf_r+0x4c>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b50:	2320      	movs	r3, #32
 8006b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b56:	2330      	movs	r3, #48	; 0x30
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006d20 <_vfiprintf_r+0x24c>
 8006b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b68:	4623      	mov	r3, r4
 8006b6a:	469a      	mov	sl, r3
 8006b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b70:	b10a      	cbz	r2, 8006b76 <_vfiprintf_r+0xa2>
 8006b72:	2a25      	cmp	r2, #37	; 0x25
 8006b74:	d1f9      	bne.n	8006b6a <_vfiprintf_r+0x96>
 8006b76:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7a:	d00b      	beq.n	8006b94 <_vfiprintf_r+0xc0>
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7ff ff94 	bl	8006ab0 <__sfputs_r>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f000 80aa 	beq.w	8006ce2 <_vfiprintf_r+0x20e>
 8006b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b90:	445a      	add	r2, fp
 8006b92:	9209      	str	r2, [sp, #36]	; 0x24
 8006b94:	f89a 3000 	ldrb.w	r3, [sl]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80a2 	beq.w	8006ce2 <_vfiprintf_r+0x20e>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ba8:	f10a 0a01 	add.w	sl, sl, #1
 8006bac:	9304      	str	r3, [sp, #16]
 8006bae:	9307      	str	r3, [sp, #28]
 8006bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8006bb6:	4654      	mov	r4, sl
 8006bb8:	2205      	movs	r2, #5
 8006bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bbe:	4858      	ldr	r0, [pc, #352]	; (8006d20 <_vfiprintf_r+0x24c>)
 8006bc0:	f7ff f8d0 	bl	8005d64 <memchr>
 8006bc4:	9a04      	ldr	r2, [sp, #16]
 8006bc6:	b9d8      	cbnz	r0, 8006c00 <_vfiprintf_r+0x12c>
 8006bc8:	06d1      	lsls	r1, r2, #27
 8006bca:	bf44      	itt	mi
 8006bcc:	2320      	movmi	r3, #32
 8006bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd2:	0713      	lsls	r3, r2, #28
 8006bd4:	bf44      	itt	mi
 8006bd6:	232b      	movmi	r3, #43	; 0x2b
 8006bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006be0:	2b2a      	cmp	r3, #42	; 0x2a
 8006be2:	d015      	beq.n	8006c10 <_vfiprintf_r+0x13c>
 8006be4:	4654      	mov	r4, sl
 8006be6:	2000      	movs	r0, #0
 8006be8:	f04f 0c0a 	mov.w	ip, #10
 8006bec:	9a07      	ldr	r2, [sp, #28]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf4:	3b30      	subs	r3, #48	; 0x30
 8006bf6:	2b09      	cmp	r3, #9
 8006bf8:	d94e      	bls.n	8006c98 <_vfiprintf_r+0x1c4>
 8006bfa:	b1b0      	cbz	r0, 8006c2a <_vfiprintf_r+0x156>
 8006bfc:	9207      	str	r2, [sp, #28]
 8006bfe:	e014      	b.n	8006c2a <_vfiprintf_r+0x156>
 8006c00:	eba0 0308 	sub.w	r3, r0, r8
 8006c04:	fa09 f303 	lsl.w	r3, r9, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	46a2      	mov	sl, r4
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	e7d2      	b.n	8006bb6 <_vfiprintf_r+0xe2>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	1d19      	adds	r1, r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	9103      	str	r1, [sp, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfbb      	ittet	lt
 8006c1c:	425b      	neglt	r3, r3
 8006c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c22:	9307      	strge	r3, [sp, #28]
 8006c24:	9307      	strlt	r3, [sp, #28]
 8006c26:	bfb8      	it	lt
 8006c28:	9204      	strlt	r2, [sp, #16]
 8006c2a:	7823      	ldrb	r3, [r4, #0]
 8006c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c2e:	d10c      	bne.n	8006c4a <_vfiprintf_r+0x176>
 8006c30:	7863      	ldrb	r3, [r4, #1]
 8006c32:	2b2a      	cmp	r3, #42	; 0x2a
 8006c34:	d135      	bne.n	8006ca2 <_vfiprintf_r+0x1ce>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	3402      	adds	r4, #2
 8006c3a:	1d1a      	adds	r2, r3, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	9203      	str	r2, [sp, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfb8      	it	lt
 8006c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006d24 <_vfiprintf_r+0x250>
 8006c4e:	2203      	movs	r2, #3
 8006c50:	4650      	mov	r0, sl
 8006c52:	7821      	ldrb	r1, [r4, #0]
 8006c54:	f7ff f886 	bl	8005d64 <memchr>
 8006c58:	b140      	cbz	r0, 8006c6c <_vfiprintf_r+0x198>
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	eba0 000a 	sub.w	r0, r0, sl
 8006c60:	fa03 f000 	lsl.w	r0, r3, r0
 8006c64:	9b04      	ldr	r3, [sp, #16]
 8006c66:	3401      	adds	r4, #1
 8006c68:	4303      	orrs	r3, r0
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c70:	2206      	movs	r2, #6
 8006c72:	482d      	ldr	r0, [pc, #180]	; (8006d28 <_vfiprintf_r+0x254>)
 8006c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c78:	f7ff f874 	bl	8005d64 <memchr>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d03f      	beq.n	8006d00 <_vfiprintf_r+0x22c>
 8006c80:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <_vfiprintf_r+0x258>)
 8006c82:	bb1b      	cbnz	r3, 8006ccc <_vfiprintf_r+0x1f8>
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	3307      	adds	r3, #7
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c92:	443b      	add	r3, r7
 8006c94:	9309      	str	r3, [sp, #36]	; 0x24
 8006c96:	e767      	b.n	8006b68 <_vfiprintf_r+0x94>
 8006c98:	460c      	mov	r4, r1
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca0:	e7a5      	b.n	8006bee <_vfiprintf_r+0x11a>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f04f 0c0a 	mov.w	ip, #10
 8006ca8:	4619      	mov	r1, r3
 8006caa:	3401      	adds	r4, #1
 8006cac:	9305      	str	r3, [sp, #20]
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb4:	3a30      	subs	r2, #48	; 0x30
 8006cb6:	2a09      	cmp	r2, #9
 8006cb8:	d903      	bls.n	8006cc2 <_vfiprintf_r+0x1ee>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0c5      	beq.n	8006c4a <_vfiprintf_r+0x176>
 8006cbe:	9105      	str	r1, [sp, #20]
 8006cc0:	e7c3      	b.n	8006c4a <_vfiprintf_r+0x176>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cca:	e7f0      	b.n	8006cae <_vfiprintf_r+0x1da>
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <_vfiprintf_r+0x25c>)
 8006cd6:	a904      	add	r1, sp, #16
 8006cd8:	f7fd fdc6 	bl	8004868 <_printf_float>
 8006cdc:	4607      	mov	r7, r0
 8006cde:	1c78      	adds	r0, r7, #1
 8006ce0:	d1d6      	bne.n	8006c90 <_vfiprintf_r+0x1bc>
 8006ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce4:	07d9      	lsls	r1, r3, #31
 8006ce6:	d405      	bmi.n	8006cf4 <_vfiprintf_r+0x220>
 8006ce8:	89ab      	ldrh	r3, [r5, #12]
 8006cea:	059a      	lsls	r2, r3, #22
 8006cec:	d402      	bmi.n	8006cf4 <_vfiprintf_r+0x220>
 8006cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cf0:	f000 faab 	bl	800724a <__retarget_lock_release_recursive>
 8006cf4:	89ab      	ldrh	r3, [r5, #12]
 8006cf6:	065b      	lsls	r3, r3, #25
 8006cf8:	f53f af12 	bmi.w	8006b20 <_vfiprintf_r+0x4c>
 8006cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfe:	e711      	b.n	8006b24 <_vfiprintf_r+0x50>
 8006d00:	ab03      	add	r3, sp, #12
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	462a      	mov	r2, r5
 8006d06:	4630      	mov	r0, r6
 8006d08:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <_vfiprintf_r+0x25c>)
 8006d0a:	a904      	add	r1, sp, #16
 8006d0c:	f7fe f848 	bl	8004da0 <_printf_i>
 8006d10:	e7e4      	b.n	8006cdc <_vfiprintf_r+0x208>
 8006d12:	bf00      	nop
 8006d14:	080078fc 	.word	0x080078fc
 8006d18:	0800791c 	.word	0x0800791c
 8006d1c:	080078dc 	.word	0x080078dc
 8006d20:	08007784 	.word	0x08007784
 8006d24:	0800778a 	.word	0x0800778a
 8006d28:	0800778e 	.word	0x0800778e
 8006d2c:	08004869 	.word	0x08004869
 8006d30:	08006ab1 	.word	0x08006ab1

08006d34 <__swbuf_r>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	460e      	mov	r6, r1
 8006d38:	4614      	mov	r4, r2
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	b118      	cbz	r0, 8006d46 <__swbuf_r+0x12>
 8006d3e:	6983      	ldr	r3, [r0, #24]
 8006d40:	b90b      	cbnz	r3, 8006d46 <__swbuf_r+0x12>
 8006d42:	f000 f9e3 	bl	800710c <__sinit>
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <__swbuf_r+0x98>)
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	d12b      	bne.n	8006da4 <__swbuf_r+0x70>
 8006d4c:	686c      	ldr	r4, [r5, #4]
 8006d4e:	69a3      	ldr	r3, [r4, #24]
 8006d50:	60a3      	str	r3, [r4, #8]
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	071a      	lsls	r2, r3, #28
 8006d56:	d52f      	bpl.n	8006db8 <__swbuf_r+0x84>
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	b36b      	cbz	r3, 8006db8 <__swbuf_r+0x84>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	6820      	ldr	r0, [r4, #0]
 8006d60:	b2f6      	uxtb	r6, r6
 8006d62:	1ac0      	subs	r0, r0, r3
 8006d64:	6963      	ldr	r3, [r4, #20]
 8006d66:	4637      	mov	r7, r6
 8006d68:	4283      	cmp	r3, r0
 8006d6a:	dc04      	bgt.n	8006d76 <__swbuf_r+0x42>
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 f938 	bl	8006fe4 <_fflush_r>
 8006d74:	bb30      	cbnz	r0, 8006dc4 <__swbuf_r+0x90>
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	3001      	adds	r0, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	60a3      	str	r3, [r4, #8]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	6022      	str	r2, [r4, #0]
 8006d84:	701e      	strb	r6, [r3, #0]
 8006d86:	6963      	ldr	r3, [r4, #20]
 8006d88:	4283      	cmp	r3, r0
 8006d8a:	d004      	beq.n	8006d96 <__swbuf_r+0x62>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	07db      	lsls	r3, r3, #31
 8006d90:	d506      	bpl.n	8006da0 <__swbuf_r+0x6c>
 8006d92:	2e0a      	cmp	r6, #10
 8006d94:	d104      	bne.n	8006da0 <__swbuf_r+0x6c>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 f923 	bl	8006fe4 <_fflush_r>
 8006d9e:	b988      	cbnz	r0, 8006dc4 <__swbuf_r+0x90>
 8006da0:	4638      	mov	r0, r7
 8006da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <__swbuf_r+0x9c>)
 8006da6:	429c      	cmp	r4, r3
 8006da8:	d101      	bne.n	8006dae <__swbuf_r+0x7a>
 8006daa:	68ac      	ldr	r4, [r5, #8]
 8006dac:	e7cf      	b.n	8006d4e <__swbuf_r+0x1a>
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <__swbuf_r+0xa0>)
 8006db0:	429c      	cmp	r4, r3
 8006db2:	bf08      	it	eq
 8006db4:	68ec      	ldreq	r4, [r5, #12]
 8006db6:	e7ca      	b.n	8006d4e <__swbuf_r+0x1a>
 8006db8:	4621      	mov	r1, r4
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 f81a 	bl	8006df4 <__swsetup_r>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d0cb      	beq.n	8006d5c <__swbuf_r+0x28>
 8006dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8006dc8:	e7ea      	b.n	8006da0 <__swbuf_r+0x6c>
 8006dca:	bf00      	nop
 8006dcc:	080078fc 	.word	0x080078fc
 8006dd0:	0800791c 	.word	0x0800791c
 8006dd4:	080078dc 	.word	0x080078dc

08006dd8 <__ascii_wctomb>:
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4608      	mov	r0, r1
 8006ddc:	b141      	cbz	r1, 8006df0 <__ascii_wctomb+0x18>
 8006dde:	2aff      	cmp	r2, #255	; 0xff
 8006de0:	d904      	bls.n	8006dec <__ascii_wctomb+0x14>
 8006de2:	228a      	movs	r2, #138	; 0x8a
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	4770      	bx	lr
 8006dec:	2001      	movs	r0, #1
 8006dee:	700a      	strb	r2, [r1, #0]
 8006df0:	4770      	bx	lr
	...

08006df4 <__swsetup_r>:
 8006df4:	4b32      	ldr	r3, [pc, #200]	; (8006ec0 <__swsetup_r+0xcc>)
 8006df6:	b570      	push	{r4, r5, r6, lr}
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	b125      	cbz	r5, 8006e0a <__swsetup_r+0x16>
 8006e00:	69ab      	ldr	r3, [r5, #24]
 8006e02:	b913      	cbnz	r3, 8006e0a <__swsetup_r+0x16>
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f981 	bl	800710c <__sinit>
 8006e0a:	4b2e      	ldr	r3, [pc, #184]	; (8006ec4 <__swsetup_r+0xd0>)
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	d10f      	bne.n	8006e30 <__swsetup_r+0x3c>
 8006e10:	686c      	ldr	r4, [r5, #4]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e18:	0719      	lsls	r1, r3, #28
 8006e1a:	d42c      	bmi.n	8006e76 <__swsetup_r+0x82>
 8006e1c:	06dd      	lsls	r5, r3, #27
 8006e1e:	d411      	bmi.n	8006e44 <__swsetup_r+0x50>
 8006e20:	2309      	movs	r3, #9
 8006e22:	6033      	str	r3, [r6, #0]
 8006e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	e03e      	b.n	8006eae <__swsetup_r+0xba>
 8006e30:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <__swsetup_r+0xd4>)
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d101      	bne.n	8006e3a <__swsetup_r+0x46>
 8006e36:	68ac      	ldr	r4, [r5, #8]
 8006e38:	e7eb      	b.n	8006e12 <__swsetup_r+0x1e>
 8006e3a:	4b24      	ldr	r3, [pc, #144]	; (8006ecc <__swsetup_r+0xd8>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	bf08      	it	eq
 8006e40:	68ec      	ldreq	r4, [r5, #12]
 8006e42:	e7e6      	b.n	8006e12 <__swsetup_r+0x1e>
 8006e44:	0758      	lsls	r0, r3, #29
 8006e46:	d512      	bpl.n	8006e6e <__swsetup_r+0x7a>
 8006e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e4a:	b141      	cbz	r1, 8006e5e <__swsetup_r+0x6a>
 8006e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d002      	beq.n	8006e5a <__swsetup_r+0x66>
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7ff fb37 	bl	80064c8 <_free_r>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	2300      	movs	r3, #0
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f043 0308 	orr.w	r3, r3, #8
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	b94b      	cbnz	r3, 8006e8e <__swsetup_r+0x9a>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e84:	d003      	beq.n	8006e8e <__swsetup_r+0x9a>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 fa05 	bl	8007298 <__smakebuf_r>
 8006e8e:	89a0      	ldrh	r0, [r4, #12]
 8006e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e94:	f010 0301 	ands.w	r3, r0, #1
 8006e98:	d00a      	beq.n	8006eb0 <__swsetup_r+0xbc>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6963      	ldr	r3, [r4, #20]
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	61a3      	str	r3, [r4, #24]
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	b943      	cbnz	r3, 8006eba <__swsetup_r+0xc6>
 8006ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eac:	d1ba      	bne.n	8006e24 <__swsetup_r+0x30>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	0781      	lsls	r1, r0, #30
 8006eb2:	bf58      	it	pl
 8006eb4:	6963      	ldrpl	r3, [r4, #20]
 8006eb6:	60a3      	str	r3, [r4, #8]
 8006eb8:	e7f4      	b.n	8006ea4 <__swsetup_r+0xb0>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e7f7      	b.n	8006eae <__swsetup_r+0xba>
 8006ebe:	bf00      	nop
 8006ec0:	2000001c 	.word	0x2000001c
 8006ec4:	080078fc 	.word	0x080078fc
 8006ec8:	0800791c 	.word	0x0800791c
 8006ecc:	080078dc 	.word	0x080078dc

08006ed0 <abort>:
 8006ed0:	2006      	movs	r0, #6
 8006ed2:	b508      	push	{r3, lr}
 8006ed4:	f000 fa50 	bl	8007378 <raise>
 8006ed8:	2001      	movs	r0, #1
 8006eda:	f7fa fcdd 	bl	8001898 <_exit>
	...

08006ee0 <__sflush_r>:
 8006ee0:	898a      	ldrh	r2, [r1, #12]
 8006ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	0710      	lsls	r0, r2, #28
 8006ee8:	460c      	mov	r4, r1
 8006eea:	d457      	bmi.n	8006f9c <__sflush_r+0xbc>
 8006eec:	684b      	ldr	r3, [r1, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dc04      	bgt.n	8006efc <__sflush_r+0x1c>
 8006ef2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc01      	bgt.n	8006efc <__sflush_r+0x1c>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	d0fa      	beq.n	8006ef8 <__sflush_r+0x18>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f08:	682f      	ldr	r7, [r5, #0]
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	d032      	beq.n	8006f74 <__sflush_r+0x94>
 8006f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	075a      	lsls	r2, r3, #29
 8006f14:	d505      	bpl.n	8006f22 <__sflush_r+0x42>
 8006f16:	6863      	ldr	r3, [r4, #4]
 8006f18:	1ac0      	subs	r0, r0, r3
 8006f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f1c:	b10b      	cbz	r3, 8006f22 <__sflush_r+0x42>
 8006f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f20:	1ac0      	subs	r0, r0, r3
 8006f22:	2300      	movs	r3, #0
 8006f24:	4602      	mov	r2, r0
 8006f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f28:	4628      	mov	r0, r5
 8006f2a:	6a21      	ldr	r1, [r4, #32]
 8006f2c:	47b0      	blx	r6
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	d106      	bne.n	8006f42 <__sflush_r+0x62>
 8006f34:	6829      	ldr	r1, [r5, #0]
 8006f36:	291d      	cmp	r1, #29
 8006f38:	d82c      	bhi.n	8006f94 <__sflush_r+0xb4>
 8006f3a:	4a29      	ldr	r2, [pc, #164]	; (8006fe0 <__sflush_r+0x100>)
 8006f3c:	40ca      	lsrs	r2, r1
 8006f3e:	07d6      	lsls	r6, r2, #31
 8006f40:	d528      	bpl.n	8006f94 <__sflush_r+0xb4>
 8006f42:	2200      	movs	r2, #0
 8006f44:	6062      	str	r2, [r4, #4]
 8006f46:	6922      	ldr	r2, [r4, #16]
 8006f48:	04d9      	lsls	r1, r3, #19
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	d504      	bpl.n	8006f58 <__sflush_r+0x78>
 8006f4e:	1c42      	adds	r2, r0, #1
 8006f50:	d101      	bne.n	8006f56 <__sflush_r+0x76>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	b903      	cbnz	r3, 8006f58 <__sflush_r+0x78>
 8006f56:	6560      	str	r0, [r4, #84]	; 0x54
 8006f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5a:	602f      	str	r7, [r5, #0]
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d0cb      	beq.n	8006ef8 <__sflush_r+0x18>
 8006f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d002      	beq.n	8006f6e <__sflush_r+0x8e>
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7ff faad 	bl	80064c8 <_free_r>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	6360      	str	r0, [r4, #52]	; 0x34
 8006f72:	e7c2      	b.n	8006efa <__sflush_r+0x1a>
 8006f74:	6a21      	ldr	r1, [r4, #32]
 8006f76:	2301      	movs	r3, #1
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b0      	blx	r6
 8006f7c:	1c41      	adds	r1, r0, #1
 8006f7e:	d1c7      	bne.n	8006f10 <__sflush_r+0x30>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0c4      	beq.n	8006f10 <__sflush_r+0x30>
 8006f86:	2b1d      	cmp	r3, #29
 8006f88:	d001      	beq.n	8006f8e <__sflush_r+0xae>
 8006f8a:	2b16      	cmp	r3, #22
 8006f8c:	d101      	bne.n	8006f92 <__sflush_r+0xb2>
 8006f8e:	602f      	str	r7, [r5, #0]
 8006f90:	e7b2      	b.n	8006ef8 <__sflush_r+0x18>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	e7ae      	b.n	8006efa <__sflush_r+0x1a>
 8006f9c:	690f      	ldr	r7, [r1, #16]
 8006f9e:	2f00      	cmp	r7, #0
 8006fa0:	d0aa      	beq.n	8006ef8 <__sflush_r+0x18>
 8006fa2:	0793      	lsls	r3, r2, #30
 8006fa4:	bf18      	it	ne
 8006fa6:	2300      	movne	r3, #0
 8006fa8:	680e      	ldr	r6, [r1, #0]
 8006faa:	bf08      	it	eq
 8006fac:	694b      	ldreq	r3, [r1, #20]
 8006fae:	1bf6      	subs	r6, r6, r7
 8006fb0:	600f      	str	r7, [r1, #0]
 8006fb2:	608b      	str	r3, [r1, #8]
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	dd9f      	ble.n	8006ef8 <__sflush_r+0x18>
 8006fb8:	4633      	mov	r3, r6
 8006fba:	463a      	mov	r2, r7
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	6a21      	ldr	r1, [r4, #32]
 8006fc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006fc4:	47e0      	blx	ip
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	dc06      	bgt.n	8006fd8 <__sflush_r+0xf8>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	e790      	b.n	8006efa <__sflush_r+0x1a>
 8006fd8:	4407      	add	r7, r0
 8006fda:	1a36      	subs	r6, r6, r0
 8006fdc:	e7ea      	b.n	8006fb4 <__sflush_r+0xd4>
 8006fde:	bf00      	nop
 8006fe0:	20400001 	.word	0x20400001

08006fe4 <_fflush_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	690b      	ldr	r3, [r1, #16]
 8006fe8:	4605      	mov	r5, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b913      	cbnz	r3, 8006ff4 <_fflush_r+0x10>
 8006fee:	2500      	movs	r5, #0
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	b118      	cbz	r0, 8006ffe <_fflush_r+0x1a>
 8006ff6:	6983      	ldr	r3, [r0, #24]
 8006ff8:	b90b      	cbnz	r3, 8006ffe <_fflush_r+0x1a>
 8006ffa:	f000 f887 	bl	800710c <__sinit>
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <_fflush_r+0x6c>)
 8007000:	429c      	cmp	r4, r3
 8007002:	d11b      	bne.n	800703c <_fflush_r+0x58>
 8007004:	686c      	ldr	r4, [r5, #4]
 8007006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0ef      	beq.n	8006fee <_fflush_r+0xa>
 800700e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007010:	07d0      	lsls	r0, r2, #31
 8007012:	d404      	bmi.n	800701e <_fflush_r+0x3a>
 8007014:	0599      	lsls	r1, r3, #22
 8007016:	d402      	bmi.n	800701e <_fflush_r+0x3a>
 8007018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800701a:	f000 f915 	bl	8007248 <__retarget_lock_acquire_recursive>
 800701e:	4628      	mov	r0, r5
 8007020:	4621      	mov	r1, r4
 8007022:	f7ff ff5d 	bl	8006ee0 <__sflush_r>
 8007026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007028:	4605      	mov	r5, r0
 800702a:	07da      	lsls	r2, r3, #31
 800702c:	d4e0      	bmi.n	8006ff0 <_fflush_r+0xc>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	059b      	lsls	r3, r3, #22
 8007032:	d4dd      	bmi.n	8006ff0 <_fflush_r+0xc>
 8007034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007036:	f000 f908 	bl	800724a <__retarget_lock_release_recursive>
 800703a:	e7d9      	b.n	8006ff0 <_fflush_r+0xc>
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <_fflush_r+0x70>)
 800703e:	429c      	cmp	r4, r3
 8007040:	d101      	bne.n	8007046 <_fflush_r+0x62>
 8007042:	68ac      	ldr	r4, [r5, #8]
 8007044:	e7df      	b.n	8007006 <_fflush_r+0x22>
 8007046:	4b04      	ldr	r3, [pc, #16]	; (8007058 <_fflush_r+0x74>)
 8007048:	429c      	cmp	r4, r3
 800704a:	bf08      	it	eq
 800704c:	68ec      	ldreq	r4, [r5, #12]
 800704e:	e7da      	b.n	8007006 <_fflush_r+0x22>
 8007050:	080078fc 	.word	0x080078fc
 8007054:	0800791c 	.word	0x0800791c
 8007058:	080078dc 	.word	0x080078dc

0800705c <std>:
 800705c:	2300      	movs	r3, #0
 800705e:	b510      	push	{r4, lr}
 8007060:	4604      	mov	r4, r0
 8007062:	e9c0 3300 	strd	r3, r3, [r0]
 8007066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800706a:	6083      	str	r3, [r0, #8]
 800706c:	8181      	strh	r1, [r0, #12]
 800706e:	6643      	str	r3, [r0, #100]	; 0x64
 8007070:	81c2      	strh	r2, [r0, #14]
 8007072:	6183      	str	r3, [r0, #24]
 8007074:	4619      	mov	r1, r3
 8007076:	2208      	movs	r2, #8
 8007078:	305c      	adds	r0, #92	; 0x5c
 800707a:	f7fd fb4f 	bl	800471c <memset>
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <std+0x38>)
 8007080:	6224      	str	r4, [r4, #32]
 8007082:	6263      	str	r3, [r4, #36]	; 0x24
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <std+0x3c>)
 8007086:	62a3      	str	r3, [r4, #40]	; 0x28
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <std+0x40>)
 800708a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800708c:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <std+0x44>)
 800708e:	6323      	str	r3, [r4, #48]	; 0x30
 8007090:	bd10      	pop	{r4, pc}
 8007092:	bf00      	nop
 8007094:	080073b1 	.word	0x080073b1
 8007098:	080073d3 	.word	0x080073d3
 800709c:	0800740b 	.word	0x0800740b
 80070a0:	0800742f 	.word	0x0800742f

080070a4 <_cleanup_r>:
 80070a4:	4901      	ldr	r1, [pc, #4]	; (80070ac <_cleanup_r+0x8>)
 80070a6:	f000 b8af 	b.w	8007208 <_fwalk_reent>
 80070aa:	bf00      	nop
 80070ac:	08006fe5 	.word	0x08006fe5

080070b0 <__sfmoreglue>:
 80070b0:	2268      	movs	r2, #104	; 0x68
 80070b2:	b570      	push	{r4, r5, r6, lr}
 80070b4:	1e4d      	subs	r5, r1, #1
 80070b6:	4355      	muls	r5, r2
 80070b8:	460e      	mov	r6, r1
 80070ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070be:	f7ff fa6b 	bl	8006598 <_malloc_r>
 80070c2:	4604      	mov	r4, r0
 80070c4:	b140      	cbz	r0, 80070d8 <__sfmoreglue+0x28>
 80070c6:	2100      	movs	r1, #0
 80070c8:	e9c0 1600 	strd	r1, r6, [r0]
 80070cc:	300c      	adds	r0, #12
 80070ce:	60a0      	str	r0, [r4, #8]
 80070d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070d4:	f7fd fb22 	bl	800471c <memset>
 80070d8:	4620      	mov	r0, r4
 80070da:	bd70      	pop	{r4, r5, r6, pc}

080070dc <__sfp_lock_acquire>:
 80070dc:	4801      	ldr	r0, [pc, #4]	; (80070e4 <__sfp_lock_acquire+0x8>)
 80070de:	f000 b8b3 	b.w	8007248 <__retarget_lock_acquire_recursive>
 80070e2:	bf00      	nop
 80070e4:	20000339 	.word	0x20000339

080070e8 <__sfp_lock_release>:
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <__sfp_lock_release+0x8>)
 80070ea:	f000 b8ae 	b.w	800724a <__retarget_lock_release_recursive>
 80070ee:	bf00      	nop
 80070f0:	20000339 	.word	0x20000339

080070f4 <__sinit_lock_acquire>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__sinit_lock_acquire+0x8>)
 80070f6:	f000 b8a7 	b.w	8007248 <__retarget_lock_acquire_recursive>
 80070fa:	bf00      	nop
 80070fc:	2000033a 	.word	0x2000033a

08007100 <__sinit_lock_release>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__sinit_lock_release+0x8>)
 8007102:	f000 b8a2 	b.w	800724a <__retarget_lock_release_recursive>
 8007106:	bf00      	nop
 8007108:	2000033a 	.word	0x2000033a

0800710c <__sinit>:
 800710c:	b510      	push	{r4, lr}
 800710e:	4604      	mov	r4, r0
 8007110:	f7ff fff0 	bl	80070f4 <__sinit_lock_acquire>
 8007114:	69a3      	ldr	r3, [r4, #24]
 8007116:	b11b      	cbz	r3, 8007120 <__sinit+0x14>
 8007118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800711c:	f7ff bff0 	b.w	8007100 <__sinit_lock_release>
 8007120:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007124:	6523      	str	r3, [r4, #80]	; 0x50
 8007126:	4b13      	ldr	r3, [pc, #76]	; (8007174 <__sinit+0x68>)
 8007128:	4a13      	ldr	r2, [pc, #76]	; (8007178 <__sinit+0x6c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	62a2      	str	r2, [r4, #40]	; 0x28
 800712e:	42a3      	cmp	r3, r4
 8007130:	bf08      	it	eq
 8007132:	2301      	moveq	r3, #1
 8007134:	4620      	mov	r0, r4
 8007136:	bf08      	it	eq
 8007138:	61a3      	streq	r3, [r4, #24]
 800713a:	f000 f81f 	bl	800717c <__sfp>
 800713e:	6060      	str	r0, [r4, #4]
 8007140:	4620      	mov	r0, r4
 8007142:	f000 f81b 	bl	800717c <__sfp>
 8007146:	60a0      	str	r0, [r4, #8]
 8007148:	4620      	mov	r0, r4
 800714a:	f000 f817 	bl	800717c <__sfp>
 800714e:	2200      	movs	r2, #0
 8007150:	2104      	movs	r1, #4
 8007152:	60e0      	str	r0, [r4, #12]
 8007154:	6860      	ldr	r0, [r4, #4]
 8007156:	f7ff ff81 	bl	800705c <std>
 800715a:	2201      	movs	r2, #1
 800715c:	2109      	movs	r1, #9
 800715e:	68a0      	ldr	r0, [r4, #8]
 8007160:	f7ff ff7c 	bl	800705c <std>
 8007164:	2202      	movs	r2, #2
 8007166:	2112      	movs	r1, #18
 8007168:	68e0      	ldr	r0, [r4, #12]
 800716a:	f7ff ff77 	bl	800705c <std>
 800716e:	2301      	movs	r3, #1
 8007170:	61a3      	str	r3, [r4, #24]
 8007172:	e7d1      	b.n	8007118 <__sinit+0xc>
 8007174:	08007564 	.word	0x08007564
 8007178:	080070a5 	.word	0x080070a5

0800717c <__sfp>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	4607      	mov	r7, r0
 8007180:	f7ff ffac 	bl	80070dc <__sfp_lock_acquire>
 8007184:	4b1e      	ldr	r3, [pc, #120]	; (8007200 <__sfp+0x84>)
 8007186:	681e      	ldr	r6, [r3, #0]
 8007188:	69b3      	ldr	r3, [r6, #24]
 800718a:	b913      	cbnz	r3, 8007192 <__sfp+0x16>
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff ffbd 	bl	800710c <__sinit>
 8007192:	3648      	adds	r6, #72	; 0x48
 8007194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007198:	3b01      	subs	r3, #1
 800719a:	d503      	bpl.n	80071a4 <__sfp+0x28>
 800719c:	6833      	ldr	r3, [r6, #0]
 800719e:	b30b      	cbz	r3, 80071e4 <__sfp+0x68>
 80071a0:	6836      	ldr	r6, [r6, #0]
 80071a2:	e7f7      	b.n	8007194 <__sfp+0x18>
 80071a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071a8:	b9d5      	cbnz	r5, 80071e0 <__sfp+0x64>
 80071aa:	4b16      	ldr	r3, [pc, #88]	; (8007204 <__sfp+0x88>)
 80071ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071b0:	60e3      	str	r3, [r4, #12]
 80071b2:	6665      	str	r5, [r4, #100]	; 0x64
 80071b4:	f000 f847 	bl	8007246 <__retarget_lock_init_recursive>
 80071b8:	f7ff ff96 	bl	80070e8 <__sfp_lock_release>
 80071bc:	2208      	movs	r2, #8
 80071be:	4629      	mov	r1, r5
 80071c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071c8:	6025      	str	r5, [r4, #0]
 80071ca:	61a5      	str	r5, [r4, #24]
 80071cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071d0:	f7fd faa4 	bl	800471c <memset>
 80071d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071dc:	4620      	mov	r0, r4
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e0:	3468      	adds	r4, #104	; 0x68
 80071e2:	e7d9      	b.n	8007198 <__sfp+0x1c>
 80071e4:	2104      	movs	r1, #4
 80071e6:	4638      	mov	r0, r7
 80071e8:	f7ff ff62 	bl	80070b0 <__sfmoreglue>
 80071ec:	4604      	mov	r4, r0
 80071ee:	6030      	str	r0, [r6, #0]
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d1d5      	bne.n	80071a0 <__sfp+0x24>
 80071f4:	f7ff ff78 	bl	80070e8 <__sfp_lock_release>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	e7ee      	b.n	80071dc <__sfp+0x60>
 80071fe:	bf00      	nop
 8007200:	08007564 	.word	0x08007564
 8007204:	ffff0001 	.word	0xffff0001

08007208 <_fwalk_reent>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	4606      	mov	r6, r0
 800720e:	4688      	mov	r8, r1
 8007210:	2700      	movs	r7, #0
 8007212:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007216:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800721a:	f1b9 0901 	subs.w	r9, r9, #1
 800721e:	d505      	bpl.n	800722c <_fwalk_reent+0x24>
 8007220:	6824      	ldr	r4, [r4, #0]
 8007222:	2c00      	cmp	r4, #0
 8007224:	d1f7      	bne.n	8007216 <_fwalk_reent+0xe>
 8007226:	4638      	mov	r0, r7
 8007228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722c:	89ab      	ldrh	r3, [r5, #12]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d907      	bls.n	8007242 <_fwalk_reent+0x3a>
 8007232:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007236:	3301      	adds	r3, #1
 8007238:	d003      	beq.n	8007242 <_fwalk_reent+0x3a>
 800723a:	4629      	mov	r1, r5
 800723c:	4630      	mov	r0, r6
 800723e:	47c0      	blx	r8
 8007240:	4307      	orrs	r7, r0
 8007242:	3568      	adds	r5, #104	; 0x68
 8007244:	e7e9      	b.n	800721a <_fwalk_reent+0x12>

08007246 <__retarget_lock_init_recursive>:
 8007246:	4770      	bx	lr

08007248 <__retarget_lock_acquire_recursive>:
 8007248:	4770      	bx	lr

0800724a <__retarget_lock_release_recursive>:
 800724a:	4770      	bx	lr

0800724c <__swhatbuf_r>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	460e      	mov	r6, r1
 8007250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007254:	4614      	mov	r4, r2
 8007256:	2900      	cmp	r1, #0
 8007258:	461d      	mov	r5, r3
 800725a:	b096      	sub	sp, #88	; 0x58
 800725c:	da08      	bge.n	8007270 <__swhatbuf_r+0x24>
 800725e:	2200      	movs	r2, #0
 8007260:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007264:	602a      	str	r2, [r5, #0]
 8007266:	061a      	lsls	r2, r3, #24
 8007268:	d410      	bmi.n	800728c <__swhatbuf_r+0x40>
 800726a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800726e:	e00e      	b.n	800728e <__swhatbuf_r+0x42>
 8007270:	466a      	mov	r2, sp
 8007272:	f000 f903 	bl	800747c <_fstat_r>
 8007276:	2800      	cmp	r0, #0
 8007278:	dbf1      	blt.n	800725e <__swhatbuf_r+0x12>
 800727a:	9a01      	ldr	r2, [sp, #4]
 800727c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007280:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007284:	425a      	negs	r2, r3
 8007286:	415a      	adcs	r2, r3
 8007288:	602a      	str	r2, [r5, #0]
 800728a:	e7ee      	b.n	800726a <__swhatbuf_r+0x1e>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	2000      	movs	r0, #0
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	b016      	add	sp, #88	; 0x58
 8007294:	bd70      	pop	{r4, r5, r6, pc}
	...

08007298 <__smakebuf_r>:
 8007298:	898b      	ldrh	r3, [r1, #12]
 800729a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800729c:	079d      	lsls	r5, r3, #30
 800729e:	4606      	mov	r6, r0
 80072a0:	460c      	mov	r4, r1
 80072a2:	d507      	bpl.n	80072b4 <__smakebuf_r+0x1c>
 80072a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	6123      	str	r3, [r4, #16]
 80072ac:	2301      	movs	r3, #1
 80072ae:	6163      	str	r3, [r4, #20]
 80072b0:	b002      	add	sp, #8
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	466a      	mov	r2, sp
 80072b6:	ab01      	add	r3, sp, #4
 80072b8:	f7ff ffc8 	bl	800724c <__swhatbuf_r>
 80072bc:	9900      	ldr	r1, [sp, #0]
 80072be:	4605      	mov	r5, r0
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7ff f969 	bl	8006598 <_malloc_r>
 80072c6:	b948      	cbnz	r0, 80072dc <__smakebuf_r+0x44>
 80072c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072cc:	059a      	lsls	r2, r3, #22
 80072ce:	d4ef      	bmi.n	80072b0 <__smakebuf_r+0x18>
 80072d0:	f023 0303 	bic.w	r3, r3, #3
 80072d4:	f043 0302 	orr.w	r3, r3, #2
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	e7e3      	b.n	80072a4 <__smakebuf_r+0xc>
 80072dc:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <__smakebuf_r+0x7c>)
 80072de:	62b3      	str	r3, [r6, #40]	; 0x28
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	6020      	str	r0, [r4, #0]
 80072e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	9b00      	ldr	r3, [sp, #0]
 80072ec:	6120      	str	r0, [r4, #16]
 80072ee:	6163      	str	r3, [r4, #20]
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	b15b      	cbz	r3, 800730c <__smakebuf_r+0x74>
 80072f4:	4630      	mov	r0, r6
 80072f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072fa:	f000 f8d1 	bl	80074a0 <_isatty_r>
 80072fe:	b128      	cbz	r0, 800730c <__smakebuf_r+0x74>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	89a0      	ldrh	r0, [r4, #12]
 800730e:	4305      	orrs	r5, r0
 8007310:	81a5      	strh	r5, [r4, #12]
 8007312:	e7cd      	b.n	80072b0 <__smakebuf_r+0x18>
 8007314:	080070a5 	.word	0x080070a5

08007318 <_malloc_usable_size_r>:
 8007318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731c:	1f18      	subs	r0, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfbc      	itt	lt
 8007322:	580b      	ldrlt	r3, [r1, r0]
 8007324:	18c0      	addlt	r0, r0, r3
 8007326:	4770      	bx	lr

08007328 <_raise_r>:
 8007328:	291f      	cmp	r1, #31
 800732a:	b538      	push	{r3, r4, r5, lr}
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	d904      	bls.n	800733c <_raise_r+0x14>
 8007332:	2316      	movs	r3, #22
 8007334:	6003      	str	r3, [r0, #0]
 8007336:	f04f 30ff 	mov.w	r0, #4294967295
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800733e:	b112      	cbz	r2, 8007346 <_raise_r+0x1e>
 8007340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007344:	b94b      	cbnz	r3, 800735a <_raise_r+0x32>
 8007346:	4620      	mov	r0, r4
 8007348:	f000 f830 	bl	80073ac <_getpid_r>
 800734c:	462a      	mov	r2, r5
 800734e:	4601      	mov	r1, r0
 8007350:	4620      	mov	r0, r4
 8007352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007356:	f000 b817 	b.w	8007388 <_kill_r>
 800735a:	2b01      	cmp	r3, #1
 800735c:	d00a      	beq.n	8007374 <_raise_r+0x4c>
 800735e:	1c59      	adds	r1, r3, #1
 8007360:	d103      	bne.n	800736a <_raise_r+0x42>
 8007362:	2316      	movs	r3, #22
 8007364:	6003      	str	r3, [r0, #0]
 8007366:	2001      	movs	r0, #1
 8007368:	e7e7      	b.n	800733a <_raise_r+0x12>
 800736a:	2400      	movs	r4, #0
 800736c:	4628      	mov	r0, r5
 800736e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007372:	4798      	blx	r3
 8007374:	2000      	movs	r0, #0
 8007376:	e7e0      	b.n	800733a <_raise_r+0x12>

08007378 <raise>:
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <raise+0xc>)
 800737a:	4601      	mov	r1, r0
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f7ff bfd3 	b.w	8007328 <_raise_r>
 8007382:	bf00      	nop
 8007384:	2000001c 	.word	0x2000001c

08007388 <_kill_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	2300      	movs	r3, #0
 800738c:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_kill_r+0x20>)
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f7fa fa6f 	bl	8001878 <_kill>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d102      	bne.n	80073a4 <_kill_r+0x1c>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	b103      	cbz	r3, 80073a4 <_kill_r+0x1c>
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	20000334 	.word	0x20000334

080073ac <_getpid_r>:
 80073ac:	f7fa ba5d 	b.w	800186a <_getpid>

080073b0 <__sread>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	f000 f894 	bl	80074e4 <_read_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	bfab      	itete	ge
 80073c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrhlt	r3, [r4, #12]
 80073c4:	181b      	addge	r3, r3, r0
 80073c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ca:	bfac      	ite	ge
 80073cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ce:	81a3      	strhlt	r3, [r4, #12]
 80073d0:	bd10      	pop	{r4, pc}

080073d2 <__swrite>:
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	461f      	mov	r7, r3
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	4605      	mov	r5, r0
 80073dc:	05db      	lsls	r3, r3, #23
 80073de:	460c      	mov	r4, r1
 80073e0:	4616      	mov	r6, r2
 80073e2:	d505      	bpl.n	80073f0 <__swrite+0x1e>
 80073e4:	2302      	movs	r3, #2
 80073e6:	2200      	movs	r2, #0
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	f000 f868 	bl	80074c0 <_lseek_r>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	4632      	mov	r2, r6
 80073f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	4628      	mov	r0, r5
 80073fc:	463b      	mov	r3, r7
 80073fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007406:	f000 b817 	b.w	8007438 <_write_r>

0800740a <__sseek>:
 800740a:	b510      	push	{r4, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 f855 	bl	80074c0 <_lseek_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	bf15      	itete	ne
 800741c:	6560      	strne	r0, [r4, #84]	; 0x54
 800741e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strheq	r3, [r4, #12]
 8007428:	bf18      	it	ne
 800742a:	81a3      	strhne	r3, [r4, #12]
 800742c:	bd10      	pop	{r4, pc}

0800742e <__sclose>:
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 b813 	b.w	800745c <_close_r>
	...

08007438 <_write_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	2200      	movs	r2, #0
 8007442:	4d05      	ldr	r5, [pc, #20]	; (8007458 <_write_r+0x20>)
 8007444:	602a      	str	r2, [r5, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f7fa fa4d 	bl	80018e6 <_write>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_write_r+0x1e>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_write_r+0x1e>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20000334 	.word	0x20000334

0800745c <_close_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	2300      	movs	r3, #0
 8007460:	4d05      	ldr	r5, [pc, #20]	; (8007478 <_close_r+0x1c>)
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fa fa59 	bl	800191e <_close>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_close_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_close_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000334 	.word	0x20000334

0800747c <_fstat_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	2300      	movs	r3, #0
 8007480:	4d06      	ldr	r5, [pc, #24]	; (800749c <_fstat_r+0x20>)
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	f7fa fa53 	bl	8001934 <_fstat>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d102      	bne.n	8007498 <_fstat_r+0x1c>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b103      	cbz	r3, 8007498 <_fstat_r+0x1c>
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	20000334 	.word	0x20000334

080074a0 <_isatty_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d05      	ldr	r5, [pc, #20]	; (80074bc <_isatty_r+0x1c>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7fa fa51 	bl	8001952 <_isatty>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_isatty_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_isatty_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20000334 	.word	0x20000334

080074c0 <_lseek_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_lseek_r+0x20>)
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7fa fa49 	bl	8001966 <_lseek>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_lseek_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_lseek_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000334 	.word	0x20000334

080074e4 <_read_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	4d05      	ldr	r5, [pc, #20]	; (8007504 <_read_r+0x20>)
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7fa f9da 	bl	80018ac <_read>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_read_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_read_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000334 	.word	0x20000334

08007508 <_init>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr

08007514 <_fini>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr
