
lcd_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006618  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006728  08006728  00016728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08006b44  08006b44  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b44  08006b44  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001ec  08006d38  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006d38  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074cd  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e8  00000000  00000000  000276e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00028dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a74  00000000  00000000  00029e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ad6  00000000  00000000  000418a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e30  00000000  00000000  0004b37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf1aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  000cf1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006710 	.word	0x08006710

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006710 	.word	0x08006710

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <HD44780_Init+0xec>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HD44780_Init+0xf0>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <HD44780_Init+0xf4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HD44780_Init+0xec>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d907      	bls.n	8000b5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HD44780_Init+0xf4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HD44780_Init+0xf4>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e006      	b.n	8000b6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HD44780_Init+0xf4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HD44780_Init+0xf4>)
 8000b68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000b6a:	f000 f985 	bl	8000e78 <DelayInit>
  HAL_Delay(50);
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f000 fe9c 	bl	80018ac <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HD44780_Init+0xf0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f943 	bl	8000e04 <ExpanderWrite>
  HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 fe93 	bl	80018ac <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000b86:	2030      	movs	r0, #48	; 0x30
 8000b88:	f000 f92b 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b8c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b90:	f000 f99a 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000b94:	2030      	movs	r0, #48	; 0x30
 8000b96:	f000 f924 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b9a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b9e:	f000 f993 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ba2:	2030      	movs	r0, #48	; 0x30
 8000ba4:	f000 f91d 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000ba8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bac:	f000 f98c 	bl	8000ec8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f000 f916 	bl	8000de2 <Write4Bits>
  DelayUS(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f000 f986 	bl	8000ec8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HD44780_Init+0xf4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f8ce 	bl	8000d68 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HD44780_Init+0xf8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000bd2:	f000 f875 	bl	8000cc0 <HD44780_Display>
  HD44780_Clear();
 8000bd6:	f000 f82b 	bl	8000c30 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HD44780_Init+0xfc>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HD44780_Init+0xfc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8bc 	bl	8000d68 <SendCommand>
  DelayUS(4500);
 8000bf0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bf4:	f000 f968 	bl	8000ec8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000bf8:	490b      	ldr	r1, [pc, #44]	; (8000c28 <HD44780_Init+0x100>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f876 	bl	8000cec <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c00:	490a      	ldr	r1, [pc, #40]	; (8000c2c <HD44780_Init+0x104>)
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 f872 	bl	8000cec <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c08:	f000 f81d 	bl	8000c46 <HD44780_Home>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000020b 	.word	0x2000020b
 8000c18:	2000020c 	.word	0x2000020c
 8000c1c:	20000208 	.word	0x20000208
 8000c20:	20000209 	.word	0x20000209
 8000c24:	2000020a 	.word	0x2000020a
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f897 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3e:	f000 f943 	bl	8000ec8 <DelayUS>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HD44780_Home>:

void HD44780_Home()
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 f88c 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c54:	f000 f938 	bl	8000ec8 <DelayUS>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HD44780_SetCursor+0x5c>)
 8000c6e:	f107 0408 	add.w	r4, r7, #8
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d303      	bcc.n	8000c8a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3318      	adds	r3, #24
 8000c90:	443b      	add	r3, r7
 8000c92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f85d 	bl	8000d68 <SendCommand>
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08006728 	.word	0x08006728
 8000cbc:	2000020b 	.word	0x2000020b

08000cc0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HD44780_Display+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f843 	bl	8000d68 <SendCommand>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000209 	.word	0x20000209

08000cec <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f82a 	bl	8000d68 <SendCommand>
  for (int i=0; i<8; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e009      	b.n	8000d2e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f82e 	bl	8000d84 <SendChar>
  for (int i=0; i<8; i++)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	ddf2      	ble.n	8000d1a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d46:	e006      	b.n	8000d56 <HD44780_PrintStr+0x18>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f817 	bl	8000d84 <SendChar>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f4      	bne.n	8000d48 <HD44780_PrintStr+0xa>
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f812 	bl	8000da0 <Send>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2101      	movs	r1, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f804 	bl	8000da0 <Send>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f80b 	bl	8000de2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f804 	bl	8000de2 <Write4Bits>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f808 	bl	8000e04 <ExpanderWrite>
  PulseEnable(value);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f820 	bl	8000e3c <PulseEnable>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <ExpanderWrite+0x30>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e1a:	f107 020f 	add.w	r2, r7, #15
 8000e1e:	230a      	movs	r3, #10
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	214e      	movs	r1, #78	; 0x4e
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <ExpanderWrite+0x34>)
 8000e28:	f001 f910 	bl	800204c <HAL_I2C_Master_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000020c 	.word	0x2000020c
 8000e38:	20000210 	.word	0x20000210

08000e3c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffd8 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e54:	2014      	movs	r0, #20
 8000e56:	f000 f837 	bl	8000ec8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffce 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e68:	2014      	movs	r0, #20
 8000e6a:	f000 f82d 	bl	8000ec8 <DelayUS>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <DelayInit>:

static void DelayInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <DelayInit+0x48>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <DelayInit+0x48>)
 8000e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e86:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <DelayInit+0x48>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <DelayInit+0x48>)
 8000e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e92:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <DelayInit+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <DelayInit+0x4c>)
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <DelayInit+0x4c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <DelayInit+0x4c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <DelayInit+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000eb2:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb4:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb6:	bf00      	nop
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000edf0 	.word	0xe000edf0
 8000ec4:	e0001000 	.word	0xe0001000

08000ec8 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <DelayUS+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <DelayUS+0x44>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9a      	lsrs	r2, r3, #18
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <DelayUS+0x48>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <DelayUS+0x48>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f6      	bhi.n	8000eea <DelayUS+0x22>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	e0001000 	.word	0xe0001000

08000f14 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2275      	movs	r2, #117	; 0x75
 8000f2c:	21d0      	movs	r1, #208	; 0xd0
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f30:	f001 fa84 	bl	800243c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b68      	cmp	r3, #104	; 0x68
 8000f38:	d13b      	bne.n	8000fb2 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	226b      	movs	r2, #107	; 0x6b
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f54:	f001 f978 	bl	8002248 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2219      	movs	r2, #25
 8000f6e:	21d0      	movs	r1, #208	; 0xd0
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f72:	f001 f969 	bl	8002248 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dbb      	adds	r3, r7, #6
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	221c      	movs	r2, #28
 8000f8c:	21d0      	movs	r1, #208	; 0xd0
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f90:	f001 f95a 	bl	8002248 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	221b      	movs	r2, #27
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MPU6050_Init+0xa8>)
 8000fae:	f001 f94b 	bl	8002248 <HAL_I2C_Mem_Write>
	}

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000264 	.word	0x20000264

08000fc0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2306      	movs	r3, #6
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	223b      	movs	r2, #59	; 0x3b
 8000fd8:	21d0      	movs	r1, #208	; 0xd0
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MPU6050_Read_Accel+0xd8>)
 8000fdc:	f001 fa2e 	bl	800243c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000fe0:	783b      	ldrb	r3, [r7, #0]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001002:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001014:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f1 	bl	8000404 <__aeabi_i2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001028:	f7ff fb80 	bl	800072c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd28 	bl	8000a88 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MPU6050_Read_Accel+0xec>)
 800103c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f9dd 	bl	8000404 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001050:	f7ff fb6c 	bl	800072c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd14 	bl	8000a88 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MPU6050_Read_Accel+0xf0>)
 8001064:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9c9 	bl	8000404 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001078:	f7ff fb58 	bl	800072c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <MPU6050_Read_Accel+0xf4>)
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000264 	.word	0x20000264
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	200002ba 	.word	0x200002ba
 80010a4:	200002bc 	.word	0x200002bc
 80010a8:	40d00000 	.word	0x40d00000
 80010ac:	200002c4 	.word	0x200002c4
 80010b0:	200002c8 	.word	0x200002c8
 80010b4:	200002cc 	.word	0x200002cc

080010b8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2306      	movs	r3, #6
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	463b      	mov	r3, r7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2243      	movs	r2, #67	; 0x43
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	4831      	ldr	r0, [pc, #196]	; (8001198 <MPU6050_Read_Gyro+0xe0>)
 80010d4:	f001 f9b2 	bl	800243c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	787b      	ldrb	r3, [r7, #1]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 80010fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 800110c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f975 	bl	8000404 <__aeabi_i2d>
 800111a:	a31d      	add	r3, pc, #116	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fb04 	bl	800072c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcac 	bl	8000a88 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <MPU6050_Read_Gyro+0xf0>)
 8001134:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	a313      	add	r3, pc, #76	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff faf0 	bl	800072c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc98 	bl	8000a88 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <MPU6050_Read_Gyro+0xf4>)
 800115c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a309      	add	r3, pc, #36	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc84 	bl	8000a88 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MPU6050_Read_Gyro+0xf8>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40606000 	.word	0x40606000
 8001198:	20000264 	.word	0x20000264
 800119c:	200002be 	.word	0x200002be
 80011a0:	200002c0 	.word	0x200002c0
 80011a4:	200002c2 	.word	0x200002c2
 80011a8:	200002d0 	.word	0x200002d0
 80011ac:	200002d4 	.word	0x200002d4
 80011b0:	200002d8 	.word	0x200002d8

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fb15 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f8a7 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 f947 	bl	8001454 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011c6:	f000 f8e9 	bl	800139c <MX_I2C1_Init>
  MX_I2C2_Init();
 80011ca:	f000 f915 	bl	80013f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff fcaa 	bl	8000b28 <HD44780_Init>
  MPU6050_Init();
 80011d4:	f7ff fe9e 	bl	8000f14 <MPU6050_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // read the Accelerometer and Gyro values

	  MPU6050_Read_Accel();
 80011d8:	f7ff fef2 	bl	8000fc0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 80011dc:	f7ff ff6c 	bl	80010b8 <MPU6050_Read_Gyro>
	  HD44780_Clear();
 80011e0:	f7ff fd26 	bl	8000c30 <HD44780_Clear>



	  HD44780_SetCursor(0,0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fd38 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ax);
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <main+0x140>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f919 	bl	8000428 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	1d38      	adds	r0, r7, #4
 80011fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001200:	4a3d      	ldr	r2, [pc, #244]	; (80012f8 <main+0x144>)
 8001202:	2107      	movs	r1, #7
 8001204:	f002 fff6 	bl	80041f4 <sniprintf>
	  HD44780_PrintStr(snum);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd97 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(5,0);
 8001210:	2100      	movs	r1, #0
 8001212:	2005      	movs	r0, #5
 8001214:	f7ff fd22 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Ay);
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <main+0x148>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f903 	bl	8000428 <__aeabi_f2d>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	1d38      	adds	r0, r7, #4
 8001228:	e9cd 2300 	strd	r2, r3, [sp]
 800122c:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <main+0x144>)
 800122e:	2107      	movs	r1, #7
 8001230:	f002 ffe0 	bl	80041f4 <sniprintf>
	  HD44780_PrintStr(snum);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd81 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(11,0);
 800123c:	2100      	movs	r1, #0
 800123e:	200b      	movs	r0, #11
 8001240:	f7ff fd0c 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Az);
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <main+0x14c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f8ed 	bl	8000428 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	1d38      	adds	r0, r7, #4
 8001254:	e9cd 2300 	strd	r2, r3, [sp]
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <main+0x144>)
 800125a:	2107      	movs	r1, #7
 800125c:	f002 ffca 	bl	80041f4 <sniprintf>
	  HD44780_PrintStr(snum);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd6b 	bl	8000d3e <HD44780_PrintStr>


	  HD44780_SetCursor(0,1);
 8001268:	2101      	movs	r1, #1
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fcf6 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Gx);
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <main+0x150>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8d7 	bl	8000428 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	1d38      	adds	r0, r7, #4
 8001280:	e9cd 2300 	strd	r2, r3, [sp]
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <main+0x144>)
 8001286:	2107      	movs	r1, #7
 8001288:	f002 ffb4 	bl	80041f4 <sniprintf>
	  HD44780_PrintStr(snum);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd55 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(5,1);
 8001294:	2101      	movs	r1, #1
 8001296:	2005      	movs	r0, #5
 8001298:	f7ff fce0 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Gy);
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <main+0x154>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8c1 	bl	8000428 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	1d38      	adds	r0, r7, #4
 80012ac:	e9cd 2300 	strd	r2, r3, [sp]
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <main+0x144>)
 80012b2:	2107      	movs	r1, #7
 80012b4:	f002 ff9e 	bl	80041f4 <sniprintf>
	  HD44780_PrintStr(snum);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd3f 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(11,1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	200b      	movs	r0, #11
 80012c4:	f7ff fcca 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%.2f", Gz);
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <main+0x158>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8ab 	bl	8000428 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	1d38      	adds	r0, r7, #4
 80012d8:	e9cd 2300 	strd	r2, r3, [sp]
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <main+0x144>)
 80012de:	2107      	movs	r1, #7
 80012e0:	f002 ff88 	bl	80041f4 <sniprintf>
	  HD44780_PrintStr(snum);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fd29 	bl	8000d3e <HD44780_PrintStr>





	  HAL_Delay(250);
 80012ec:	20fa      	movs	r0, #250	; 0xfa
 80012ee:	f000 fadd 	bl	80018ac <HAL_Delay>
	  MPU6050_Read_Accel();
 80012f2:	e771      	b.n	80011d8 <main+0x24>
 80012f4:	200002c4 	.word	0x200002c4
 80012f8:	08006738 	.word	0x08006738
 80012fc:	200002c8 	.word	0x200002c8
 8001300:	200002cc 	.word	0x200002cc
 8001304:	200002d0 	.word	0x200002d0
 8001308:	200002d4 	.word	0x200002d4
 800130c:	200002d8 	.word	0x200002d8

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2228      	movs	r2, #40	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fb00 	bl	8003924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800134e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4618      	mov	r0, r3
 800135a:	f001 feb3 	bl	80030c4 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001364:	f000 f898 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f002 f920 	bl	80035c8 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800138e:	f000 f883 	bl	8001498 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3740      	adds	r7, #64	; 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_I2C1_Init+0x50>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <MX_I2C1_Init+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_I2C1_Init+0x50>)
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_I2C1_Init+0x58>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_I2C1_Init+0x50>)
 80013da:	f000 fcf3 	bl	8001dc4 <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 f858 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000210 	.word	0x20000210
 80013f0:	40005400 	.word	0x40005400
 80013f4:	000186a0 	.word	0x000186a0

080013f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C2_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_I2C2_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_I2C2_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_I2C2_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C2_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2C2_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_I2C2_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_I2C2_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2C2_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_I2C2_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2C2_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_I2C2_Init+0x50>)
 8001436:	f000 fcc5 	bl	8001dc4 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 f82a 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000264 	.word	0x20000264
 800144c:	40005800 	.word	0x40005800
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_GPIO_Init+0x40>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <MX_GPIO_Init+0x40>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_GPIO_Init+0x40>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_GPIO_Init+0x40>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <MX_GPIO_Init+0x40>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <MX_GPIO_Init+0x40>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_MspInit+0x40>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_MspInit+0x40>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_MspInit+0x40>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_MspInit+0x40>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_MspInit+0x40>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_MspInit+0x40>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <HAL_I2C_MspInit+0xc8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d124      	bne.n	8001552 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001520:	23c0      	movs	r3, #192	; 0xc0
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4619      	mov	r1, r3
 8001532:	4821      	ldr	r0, [pc, #132]	; (80015b8 <HAL_I2C_MspInit+0xd0>)
 8001534:	f000 fac2 	bl	8001abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800153e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001542:	61d3      	str	r3, [r2, #28]
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001550:	e029      	b.n	80015a6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_I2C_MspInit+0xd4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d124      	bne.n	80015a6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001574:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157a:	2312      	movs	r3, #18
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	4619      	mov	r1, r3
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <HAL_I2C_MspInit+0xd0>)
 800158a:	f000 fa97 	bl	8001abc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 8001594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_I2C_MspInit+0xcc>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40005800 	.word	0x40005800

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f935 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}

0800160e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
	return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <_kill>:

int _kill(int pid, int sig)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001626:	f002 f953 	bl	80038d0 <__errno>
 800162a:	4603      	mov	r3, r0
 800162c:	2216      	movs	r2, #22
 800162e:	601a      	str	r2, [r3, #0]
	return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_exit>:

void _exit (int status)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffe7 	bl	800161c <_kill>
	while (1) {}		/* Make sure we hang here */
 800164e:	e7fe      	b.n	800164e <_exit+0x12>

08001650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00a      	b.n	8001678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001662:	f3af 8000 	nop.w
 8001666:	4601      	mov	r1, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf0      	blt.n	8001662 <_read+0x12>
	}

return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e009      	b.n	80016b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	60ba      	str	r2, [r7, #8]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf1      	blt.n	800169c <_write+0x12>
	}
	return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e8:	605a      	str	r2, [r3, #4]
	return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <_isatty>:

int _isatty(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	return 1;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
	return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
	...

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f002 f8bc 	bl	80038d0 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20005000 	.word	0x20005000
 8001784:	00000400 	.word	0x00000400
 8001788:	200002dc 	.word	0x200002dc
 800178c:	200002f8 	.word	0x200002f8

08001790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	; (80017d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	; (80017e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017c2:	f7ff ffe5 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f002 f889 	bl	80038dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ca:	f7ff fcf3 	bl	80011b4 <main>
  bx lr
 80017ce:	4770      	bx	lr
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80017d8:	08006b4c 	.word	0x08006b4c
  ldr r2, =_sbss
 80017dc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80017e0:	200002f4 	.word	0x200002f4

080017e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC1_2_IRQHandler>
	...

080017e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_Init+0x28>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_Init+0x28>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f92b 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	200f      	movs	r0, #15
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fe4e 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f935 	bl	8001aa2 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 f90b 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000010 	.word	0x20000010
 800186c:	20000018 	.word	0x20000018
 8001870:	20000014 	.word	0x20000014

08001874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x1c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x20>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_IncTick+0x20>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20000018 	.word	0x20000018
 8001894:	200002e0 	.word	0x200002e0

08001898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <HAL_GetTick+0x10>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	200002e0 	.word	0x200002e0

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff fff0 	bl	8001898 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffe0 	bl	8001898 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000018 	.word	0x20000018

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff90 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff49 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff5e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffb0 	bl	8001a10 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b08b      	sub	sp, #44	; 0x2c
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e169      	b.n	8001da4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	f040 8158 	bne.w	8001d9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a9a      	ldr	r2, [pc, #616]	; (8001d5c <HAL_GPIO_Init+0x2a0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d05e      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001af8:	4a98      	ldr	r2, [pc, #608]	; (8001d5c <HAL_GPIO_Init+0x2a0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d875      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001afe:	4a98      	ldr	r2, [pc, #608]	; (8001d60 <HAL_GPIO_Init+0x2a4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d058      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b04:	4a96      	ldr	r2, [pc, #600]	; (8001d60 <HAL_GPIO_Init+0x2a4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d86f      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b0a:	4a96      	ldr	r2, [pc, #600]	; (8001d64 <HAL_GPIO_Init+0x2a8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d052      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b10:	4a94      	ldr	r2, [pc, #592]	; (8001d64 <HAL_GPIO_Init+0x2a8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d869      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b16:	4a94      	ldr	r2, [pc, #592]	; (8001d68 <HAL_GPIO_Init+0x2ac>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04c      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b1c:	4a92      	ldr	r2, [pc, #584]	; (8001d68 <HAL_GPIO_Init+0x2ac>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d863      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b22:	4a92      	ldr	r2, [pc, #584]	; (8001d6c <HAL_GPIO_Init+0x2b0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d046      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a90      	ldr	r2, [pc, #576]	; (8001d6c <HAL_GPIO_Init+0x2b0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d85d      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d82a      	bhi.n	8001b88 <HAL_GPIO_Init+0xcc>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d859      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b36:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <HAL_GPIO_Init+0x80>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001bb7 	.word	0x08001bb7
 8001b40:	08001b91 	.word	0x08001b91
 8001b44:	08001ba3 	.word	0x08001ba3
 8001b48:	08001be5 	.word	0x08001be5
 8001b4c:	08001beb 	.word	0x08001beb
 8001b50:	08001beb 	.word	0x08001beb
 8001b54:	08001beb 	.word	0x08001beb
 8001b58:	08001beb 	.word	0x08001beb
 8001b5c:	08001beb 	.word	0x08001beb
 8001b60:	08001beb 	.word	0x08001beb
 8001b64:	08001beb 	.word	0x08001beb
 8001b68:	08001beb 	.word	0x08001beb
 8001b6c:	08001beb 	.word	0x08001beb
 8001b70:	08001beb 	.word	0x08001beb
 8001b74:	08001beb 	.word	0x08001beb
 8001b78:	08001beb 	.word	0x08001beb
 8001b7c:	08001beb 	.word	0x08001beb
 8001b80:	08001b99 	.word	0x08001b99
 8001b84:	08001bad 	.word	0x08001bad
 8001b88:	4a79      	ldr	r2, [pc, #484]	; (8001d70 <HAL_GPIO_Init+0x2b4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b8e:	e02c      	b.n	8001bea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	623b      	str	r3, [r7, #32]
          break;
 8001b96:	e029      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	e024      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e01f      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e01a      	b.n	8001bec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e013      	b.n	8001bec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	611a      	str	r2, [r3, #16]
          break;
 8001bd6:	e009      	b.n	8001bec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	615a      	str	r2, [r3, #20]
          break;
 8001be2:	e003      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x130>
          break;
 8001bea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2bff      	cmp	r3, #255	; 0xff
 8001bf0:	d801      	bhi.n	8001bf6 <HAL_GPIO_Init+0x13a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	e001      	b.n	8001bfa <HAL_GPIO_Init+0x13e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d802      	bhi.n	8001c08 <HAL_GPIO_Init+0x14c>
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x152>
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3b08      	subs	r3, #8
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	210f      	movs	r1, #15
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	6a39      	ldr	r1, [r7, #32]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80b1 	beq.w	8001d9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_GPIO_Init+0x2b8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a4c      	ldr	r2, [pc, #304]	; (8001d74 <HAL_GPIO_Init+0x2b8>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_GPIO_Init+0x2b8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2bc>)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a40      	ldr	r2, [pc, #256]	; (8001d7c <HAL_GPIO_Init+0x2c0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d013      	beq.n	8001ca8 <HAL_GPIO_Init+0x1ec>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3f      	ldr	r2, [pc, #252]	; (8001d80 <HAL_GPIO_Init+0x2c4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00d      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e8>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d007      	beq.n	8001ca0 <HAL_GPIO_Init+0x1e4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3d      	ldr	r2, [pc, #244]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_GPIO_Init+0x1e0>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e006      	b.n	8001caa <HAL_GPIO_Init+0x1ee>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e004      	b.n	8001caa <HAL_GPIO_Init+0x1ee>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e002      	b.n	8001caa <HAL_GPIO_Init+0x1ee>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_GPIO_Init+0x1ee>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	f002 0203 	and.w	r2, r2, #3
 8001cb0:	0092      	lsls	r2, r2, #2
 8001cb2:	4093      	lsls	r3, r2
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cba:	492f      	ldr	r1, [pc, #188]	; (8001d78 <HAL_GPIO_Init+0x2bc>)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	492c      	ldr	r1, [pc, #176]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4928      	ldr	r1, [pc, #160]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4922      	ldr	r1, [pc, #136]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	491e      	ldr	r1, [pc, #120]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4918      	ldr	r1, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4914      	ldr	r1, [pc, #80]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d021      	beq.n	8001d90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
 8001d58:	e021      	b.n	8001d9e <HAL_GPIO_Init+0x2e2>
 8001d5a:	bf00      	nop
 8001d5c:	10320000 	.word	0x10320000
 8001d60:	10310000 	.word	0x10310000
 8001d64:	10220000 	.word	0x10220000
 8001d68:	10210000 	.word	0x10210000
 8001d6c:	10120000 	.word	0x10120000
 8001d70:	10110000 	.word	0x10110000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40011400 	.word	0x40011400
 8001d8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4909      	ldr	r1, [pc, #36]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f47f ae8e 	bne.w	8001ad0 <HAL_GPIO_Init+0x14>
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	372c      	adds	r7, #44	; 0x2c
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e12b      	b.n	800202e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fb7c 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e28:	f001 fd20 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a81      	ldr	r2, [pc, #516]	; (8002038 <HAL_I2C_Init+0x274>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d807      	bhi.n	8001e48 <HAL_I2C_Init+0x84>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a80      	ldr	r2, [pc, #512]	; (800203c <HAL_I2C_Init+0x278>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e006      	b.n	8001e56 <HAL_I2C_Init+0x92>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a7d      	ldr	r2, [pc, #500]	; (8002040 <HAL_I2C_Init+0x27c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0e7      	b.n	800202e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a78      	ldr	r2, [pc, #480]	; (8002044 <HAL_I2C_Init+0x280>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_I2C_Init+0x274>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d802      	bhi.n	8001e98 <HAL_I2C_Init+0xd4>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	e009      	b.n	8001eac <HAL_I2C_Init+0xe8>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a69      	ldr	r2, [pc, #420]	; (8002048 <HAL_I2C_Init+0x284>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	3301      	adds	r3, #1
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	495c      	ldr	r1, [pc, #368]	; (8002038 <HAL_I2C_Init+0x274>)
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d819      	bhi.n	8001f00 <HAL_I2C_Init+0x13c>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_I2C_Init+0x138>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e59      	subs	r1, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efa:	e051      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e04f      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_I2C_Init+0x168>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e012      	b.n	8001f52 <HAL_I2C_Init+0x18e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1e58      	subs	r0, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	0099      	lsls	r1, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Init+0x196>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e022      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <HAL_I2C_Init+0x1bc>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e58      	subs	r0, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	440b      	add	r3, r1
 8001f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	e00f      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	0099      	lsls	r1, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	6809      	ldr	r1, [r1, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6911      	ldr	r1, [r2, #16]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	000186a0 	.word	0x000186a0
 800203c:	001e847f 	.word	0x001e847f
 8002040:	003d08ff 	.word	0x003d08ff
 8002044:	431bde83 	.word	0x431bde83
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fc1a 	bl	8001898 <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	f040 80e0 	bne.w	8002234 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2319      	movs	r3, #25
 800207a:	2201      	movs	r2, #1
 800207c:	4970      	ldr	r1, [pc, #448]	; (8002240 <HAL_I2C_Master_Transmit+0x1f4>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fe44 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e0d3      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_I2C_Master_Transmit+0x50>
 8002098:	2302      	movs	r3, #2
 800209a:	e0cc      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d007      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	; 0x21
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2210      	movs	r2, #16
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_I2C_Master_Transmit+0x1f8>)
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fbfe 	bl	800290c <I2C_MasterRequestWrite>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e08d      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002130:	e066      	b.n	8002200 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	6a39      	ldr	r1, [r7, #32]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 febe 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b04      	cmp	r3, #4
 8002148:	d107      	bne.n	800215a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06b      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11b      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x188>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d017      	beq.n	80021d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 feae 	bl	8002f3a <I2C_WaitOnBTFFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d107      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e01a      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d194      	bne.n	8002132 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e000      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002234:	2302      	movs	r3, #2
  }
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00100002 	.word	0x00100002
 8002244:	ffff0000 	.word	0xffff0000

08002248 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4603      	mov	r3, r0
 8002258:	817b      	strh	r3, [r7, #10]
 800225a:	460b      	mov	r3, r1
 800225c:	813b      	strh	r3, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002262:	f7ff fb19 	bl	8001898 <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b20      	cmp	r3, #32
 8002272:	f040 80d9 	bne.w	8002428 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2319      	movs	r3, #25
 800227c:	2201      	movs	r2, #1
 800227e:	496d      	ldr	r1, [pc, #436]	; (8002434 <HAL_I2C_Mem_Write+0x1ec>)
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fd43 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
 800228e:	e0cc      	b.n	800242a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_I2C_Mem_Write+0x56>
 800229a:	2302      	movs	r3, #2
 800229c:	e0c5      	b.n	800242a <HAL_I2C_Mem_Write+0x1e2>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d007      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2221      	movs	r2, #33	; 0x21
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_I2C_Mem_Write+0x1f0>)
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002306:	88f8      	ldrh	r0, [r7, #6]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	8979      	ldrh	r1, [r7, #10]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4603      	mov	r3, r0
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fb7a 	bl	8002a10 <I2C_RequestMemoryWrite>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d052      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e081      	b.n	800242a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fdc4 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b04      	cmp	r3, #4
 800233c:	d107      	bne.n	800234e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06b      	b.n	800242a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11b      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x180>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1aa      	bne.n	8002326 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fdb0 	bl	8002f3a <I2C_WaitOnBTFFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e016      	b.n	800242a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	00100002 	.word	0x00100002
 8002438:	ffff0000 	.word	0xffff0000

0800243c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	; 0x30
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245a:	f7ff fa1d 	bl	8001898 <HAL_GetTick>
 800245e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	f040 8244 	bne.w	80028f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	2201      	movs	r2, #1
 8002476:	4982      	ldr	r1, [pc, #520]	; (8002680 <HAL_I2C_Mem_Read+0x244>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fc47 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
 8002486:	e237      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Mem_Read+0x5a>
 8002492:	2302      	movs	r3, #2
 8002494:	e230      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2222      	movs	r2, #34	; 0x22
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a62      	ldr	r2, [pc, #392]	; (8002684 <HAL_I2C_Mem_Read+0x248>)
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fe:	88f8      	ldrh	r0, [r7, #6]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fb14 	bl	8002b3c <I2C_RequestMemoryRead>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e1ec      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	2b00      	cmp	r3, #0
 8002524:	d113      	bne.n	800254e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e1c0      	b.n	80028d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11e      	bne.n	8002594 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002566:	b672      	cpsid	i
}
 8002568:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002590:	b662      	cpsie	i
}
 8002592:	e035      	b.n	8002600 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b02      	cmp	r3, #2
 800259a:	d11e      	bne.n	80025da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025d6:	b662      	cpsie	i
}
 80025d8:	e012      	b.n	8002600 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002600:	e166      	b.n	80028d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b03      	cmp	r3, #3
 8002608:	f200 811f 	bhi.w	800284a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	2b01      	cmp	r3, #1
 8002612:	d123      	bne.n	800265c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fccf 	bl	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e167      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a
 800265a:	e139      	b.n	80028d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b02      	cmp	r3, #2
 8002662:	d152      	bne.n	800270a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	2200      	movs	r2, #0
 800266c:	4906      	ldr	r1, [pc, #24]	; (8002688 <HAL_I2C_Mem_Read+0x24c>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fb4c 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e13c      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000
 8002688:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026d2:	b662      	cpsie	i
}
 80026d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002708:	e0e2      	b.n	80028d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	497b      	ldr	r1, [pc, #492]	; (8002900 <HAL_I2C_Mem_Read+0x4c4>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 faf9 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0e9      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_I2C_Mem_Read+0x4c8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_I2C_Mem_Read+0x4cc>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a1a      	lsrs	r2, r3, #8
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00da      	lsls	r2, r3, #3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	3b01      	subs	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d118      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027b2:	b662      	cpsie	i
}
 80027b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e09a      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d1d9      	bne.n	8002784 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002812:	b662      	cpsie	i
}
 8002814:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002848:	e042      	b.n	80028d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fbb4 	bl	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e04c      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b04      	cmp	r3, #4
 800289c:	d118      	bne.n	80028d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f ae94 	bne.w	8002602 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010004 	.word	0x00010004
 8002904:	20000010 	.word	0x20000010
 8002908:	14f8b589 	.word	0x14f8b589

0800290c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d006      	beq.n	8002936 <I2C_MasterRequestWrite+0x2a>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d003      	beq.n	8002936 <I2C_MasterRequestWrite+0x2a>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e00b      	b.n	8002960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	2b12      	cmp	r3, #18
 800294e:	d107      	bne.n	8002960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f9cd 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002986:	d103      	bne.n	8002990 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e035      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299c:	d108      	bne.n	80029b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e01b      	b.n	80029e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	11db      	asrs	r3, r3, #7
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f003 0306 	and.w	r3, r3, #6
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f063 030f 	orn	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	490e      	ldr	r1, [pc, #56]	; (8002a08 <I2C_MasterRequestWrite+0xfc>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f9f3 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e010      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <I2C_MasterRequestWrite+0x100>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f9e3 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	00010008 	.word	0x00010008
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f960 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d103      	bne.n	8002a6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e05f      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	492d      	ldr	r1, [pc, #180]	; (8002b38 <I2C_RequestMemoryWrite+0x128>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f998 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e04c      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fa02 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e02b      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	e021      	b.n	8002b2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae8:	893b      	ldrh	r3, [r7, #8]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f9dc 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e005      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	00010002 	.word	0x00010002

08002b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	817b      	strh	r3, [r7, #10]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	813b      	strh	r3, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f8c2 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9c:	d103      	bne.n	8002ba6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0aa      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	4952      	ldr	r1, [pc, #328]	; (8002d08 <I2C_RequestMemoryRead+0x1cc>)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f8fa 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e097      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	6a39      	ldr	r1, [r7, #32]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f964 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d107      	bne.n	8002c0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e076      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c18:	893b      	ldrh	r3, [r7, #8]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	e021      	b.n	8002c68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c24:	893b      	ldrh	r3, [r7, #8]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f93e 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e050      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5e:	893b      	ldrh	r3, [r7, #8]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f923 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d107      	bne.n	8002c90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e035      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f82b 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d103      	bne.n	8002cd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e013      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	6a3a      	ldr	r2, [r7, #32]
 8002cec:	4906      	ldr	r1, [pc, #24]	; (8002d08 <I2C_RequestMemoryRead+0x1cc>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f863 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	00010002 	.word	0x00010002

08002d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1c:	e025      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d021      	beq.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe fdb7 	bl	8001898 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e023      	b.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10d      	bne.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	e00c      	b.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d0b6      	beq.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc8:	e051      	b.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d123      	bne.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0204 	orr.w	r2, r3, #4
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e046      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d021      	beq.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fe fd35 	bl	8001898 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d116      	bne.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e020      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10c      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e00b      	b.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d18d      	bne.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec4:	e02d      	b.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f8ce 	bl	8003068 <I2C_IsAcknowledgeFailed>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02d      	b.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d021      	beq.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe fcdb 	bl	8001898 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e007      	b.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d1ca      	bne.n	8002ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f46:	e02d      	b.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f88d 	bl	8003068 <I2C_IsAcknowledgeFailed>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e02d      	b.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d021      	beq.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe fc9a 	bl	8001898 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d1ca      	bne.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fc8:	e042      	b.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d119      	bne.n	800300c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0210 	mvn.w	r2, #16
 8002fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e029      	b.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7fe fc44 	bl	8001898 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d1b5      	bne.n	8002fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d11b      	bne.n	80030b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e272      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8087 	beq.w	80031f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e4:	4b92      	ldr	r3, [pc, #584]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d00c      	beq.n	800310a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030f0:	4b8f      	ldr	r3, [pc, #572]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d112      	bne.n	8003122 <HAL_RCC_OscConfig+0x5e>
 80030fc:	4b8c      	ldr	r3, [pc, #560]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d10b      	bne.n	8003122 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310a:	4b89      	ldr	r3, [pc, #548]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d06c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x12c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d168      	bne.n	80031f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e24c      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x76>
 800312c:	4b80      	ldr	r3, [pc, #512]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a7f      	ldr	r2, [pc, #508]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e02e      	b.n	8003198 <HAL_RCC_OscConfig+0xd4>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x98>
 8003142:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7a      	ldr	r2, [pc, #488]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b78      	ldr	r3, [pc, #480]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a77      	ldr	r2, [pc, #476]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e01d      	b.n	8003198 <HAL_RCC_OscConfig+0xd4>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0xbc>
 8003166:	4b72      	ldr	r3, [pc, #456]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a71      	ldr	r2, [pc, #452]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800316c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0xd4>
 8003180:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a6a      	ldr	r2, [pc, #424]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a67      	ldr	r2, [pc, #412]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003196:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fb7a 	bl	8001898 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe fb76 	bl	8001898 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e200      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xe4>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fb66 	bl	8001898 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe fb62 	bl	8001898 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e1ec      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	4b53      	ldr	r3, [pc, #332]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x10c>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d063      	beq.n	80032c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800320a:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b08      	cmp	r3, #8
 8003214:	d11c      	bne.n	8003250 <HAL_RCC_OscConfig+0x18c>
 8003216:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d116      	bne.n	8003250 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	4b43      	ldr	r3, [pc, #268]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_RCC_OscConfig+0x176>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e1c0      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4939      	ldr	r1, [pc, #228]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	e03a      	b.n	80032c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe fb1b 	bl	8001898 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003266:	f7fe fb17 	bl	8001898 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1a1      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4927      	ldr	r1, [pc, #156]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
 8003298:	e015      	b.n	80032c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fafa 	bl	8001898 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a8:	f7fe faf6 	bl	8001898 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e180      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d03a      	beq.n	8003348 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d019      	beq.n	800330e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_RCC_OscConfig+0x274>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fada 	bl	8001898 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fad6 	bl	8001898 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e160      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003306:	2001      	movs	r0, #1
 8003308:	f000 fac4 	bl	8003894 <RCC_Delay>
 800330c:	e01c      	b.n	8003348 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_RCC_OscConfig+0x274>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe fac0 	bl	8001898 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331a:	e00f      	b.n	800333c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fabc 	bl	8001898 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d908      	bls.n	800333c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e146      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	42420000 	.word	0x42420000
 8003338:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	4b92      	ldr	r3, [pc, #584]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e9      	bne.n	800331c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a6 	beq.w	80034a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b8b      	ldr	r3, [pc, #556]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4a87      	ldr	r2, [pc, #540]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	61d3      	str	r3, [r2, #28]
 8003372:	4b85      	ldr	r3, [pc, #532]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b82      	ldr	r3, [pc, #520]	; (800358c <HAL_RCC_OscConfig+0x4c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b7f      	ldr	r3, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x4c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7e      	ldr	r2, [pc, #504]	; (800358c <HAL_RCC_OscConfig+0x4c8>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fa7d 	bl	8001898 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe fa79 	bl	8001898 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	; 0x64
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e103      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b75      	ldr	r3, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x4c8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x312>
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6213      	str	r3, [r2, #32]
 80033d4:	e02d      	b.n	8003432 <HAL_RCC_OscConfig+0x36e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x334>
 80033de:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a69      	ldr	r2, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a66      	ldr	r2, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	e01c      	b.n	8003432 <HAL_RCC_OscConfig+0x36e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d10c      	bne.n	800341a <HAL_RCC_OscConfig+0x356>
 8003400:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4a60      	ldr	r2, [pc, #384]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6213      	str	r3, [r2, #32]
 800340c:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	e00b      	b.n	8003432 <HAL_RCC_OscConfig+0x36e>
 800341a:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a5a      	ldr	r2, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6213      	str	r3, [r2, #32]
 8003426:	4b58      	ldr	r3, [pc, #352]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a57      	ldr	r2, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d015      	beq.n	8003466 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7fe fa2d 	bl	8001898 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fa29 	bl	8001898 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0b1      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ee      	beq.n	8003442 <HAL_RCC_OscConfig+0x37e>
 8003464:	e014      	b.n	8003490 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003466:	f7fe fa17 	bl	8001898 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe fa13 	bl	8001898 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e09b      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ee      	bne.n	800346e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	4b3c      	ldr	r3, [pc, #240]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8087 	beq.w	80035ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ac:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d061      	beq.n	800357c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d146      	bne.n	800354e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c0:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x4cc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7fe f9e7 	bl	8001898 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe f9e3 	bl	8001898 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e06d      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d108      	bne.n	8003508 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4921      	ldr	r1, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a19      	ldr	r1, [r3, #32]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	430b      	orrs	r3, r1
 800351a:	491b      	ldr	r1, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4cc>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe f9b7 	bl	8001898 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe f9b3 	bl	8001898 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e03d      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x46a>
 800354c:	e035      	b.n	80035ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x4cc>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe f9a0 	bl	8001898 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe f99c 	bl	8001898 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e026      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x498>
 800357a:	e01e      	b.n	80035ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e019      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
 8003590:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_OscConfig+0x500>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0d0      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d910      	bls.n	800360c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b67      	ldr	r3, [pc, #412]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0207 	bic.w	r2, r3, #7
 80035f2:	4965      	ldr	r1, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800362e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003646:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d040      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d115      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b41      	ldr	r3, [pc, #260]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e073      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4936      	ldr	r1, [pc, #216]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fe f8ee 	bl	8001898 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe f8ea 	bl	8001898 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e053      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2d      	ldr	r3, [pc, #180]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d210      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 0207 	bic.w	r2, r3, #7
 80036fe:	4922      	ldr	r1, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1cc>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1d0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe f84c 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40022000 	.word	0x40022000
 800378c:	40021000 	.word	0x40021000
 8003790:	08006750 	.word	0x08006750
 8003794:	20000010 	.word	0x20000010
 8003798:	20000014 	.word	0x20000014

0800379c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	b490      	push	{r4, r7}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCC_GetSysClockFreq+0xac>)
 80037a4:	1d3c      	adds	r4, r7, #4
 80037a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037ac:	f240 2301 	movw	r3, #513	; 0x201
 80037b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x46>
 80037da:	e02b      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037de:	623b      	str	r3, [r7, #32]
      break;
 80037e0:	e02b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	0c9b      	lsrs	r3, r3, #18
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3328      	adds	r3, #40	; 0x28
 80037ec:	443b      	add	r3, r7
 80037ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d012      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0c5b      	lsrs	r3, r3, #17
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	3328      	adds	r3, #40	; 0x28
 800380a:	443b      	add	r3, r7
 800380c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003810:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	4a0e      	ldr	r2, [pc, #56]	; (8003850 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	e004      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	623b      	str	r3, [r7, #32]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003836:	623b      	str	r3, [r7, #32]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6a3b      	ldr	r3, [r7, #32]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bc90      	pop	{r4, r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	08006740 	.word	0x08006740
 800384c:	40021000 	.word	0x40021000
 8003850:	007a1200 	.word	0x007a1200
 8003854:	003d0900 	.word	0x003d0900

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <HAL_RCC_GetHCLKFreq+0x10>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	20000010 	.word	0x20000010

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff2 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	08006760 	.word	0x08006760

08003894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCC_Delay+0x34>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <RCC_Delay+0x38>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038b0:	bf00      	nop
  }
  while (Delay --);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <RCC_Delay+0x1c>
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	20000010 	.word	0x20000010
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <__errno>:
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <__errno+0x8>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	2000001c 	.word	0x2000001c

080038dc <__libc_init_array>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	2600      	movs	r6, #0
 80038e0:	4d0c      	ldr	r5, [pc, #48]	; (8003914 <__libc_init_array+0x38>)
 80038e2:	4c0d      	ldr	r4, [pc, #52]	; (8003918 <__libc_init_array+0x3c>)
 80038e4:	1b64      	subs	r4, r4, r5
 80038e6:	10a4      	asrs	r4, r4, #2
 80038e8:	42a6      	cmp	r6, r4
 80038ea:	d109      	bne.n	8003900 <__libc_init_array+0x24>
 80038ec:	f002 ff10 	bl	8006710 <_init>
 80038f0:	2600      	movs	r6, #0
 80038f2:	4d0a      	ldr	r5, [pc, #40]	; (800391c <__libc_init_array+0x40>)
 80038f4:	4c0a      	ldr	r4, [pc, #40]	; (8003920 <__libc_init_array+0x44>)
 80038f6:	1b64      	subs	r4, r4, r5
 80038f8:	10a4      	asrs	r4, r4, #2
 80038fa:	42a6      	cmp	r6, r4
 80038fc:	d105      	bne.n	800390a <__libc_init_array+0x2e>
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	f855 3b04 	ldr.w	r3, [r5], #4
 8003904:	4798      	blx	r3
 8003906:	3601      	adds	r6, #1
 8003908:	e7ee      	b.n	80038e8 <__libc_init_array+0xc>
 800390a:	f855 3b04 	ldr.w	r3, [r5], #4
 800390e:	4798      	blx	r3
 8003910:	3601      	adds	r6, #1
 8003912:	e7f2      	b.n	80038fa <__libc_init_array+0x1e>
 8003914:	08006b44 	.word	0x08006b44
 8003918:	08006b44 	.word	0x08006b44
 800391c:	08006b44 	.word	0x08006b44
 8003920:	08006b48 	.word	0x08006b48

08003924 <memset>:
 8003924:	4603      	mov	r3, r0
 8003926:	4402      	add	r2, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <__cvt>:
 8003934:	2b00      	cmp	r3, #0
 8003936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800393a:	461f      	mov	r7, r3
 800393c:	bfbb      	ittet	lt
 800393e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003942:	461f      	movlt	r7, r3
 8003944:	2300      	movge	r3, #0
 8003946:	232d      	movlt	r3, #45	; 0x2d
 8003948:	b088      	sub	sp, #32
 800394a:	4614      	mov	r4, r2
 800394c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800394e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003950:	7013      	strb	r3, [r2, #0]
 8003952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003954:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003958:	f023 0820 	bic.w	r8, r3, #32
 800395c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003960:	d005      	beq.n	800396e <__cvt+0x3a>
 8003962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003966:	d100      	bne.n	800396a <__cvt+0x36>
 8003968:	3501      	adds	r5, #1
 800396a:	2302      	movs	r3, #2
 800396c:	e000      	b.n	8003970 <__cvt+0x3c>
 800396e:	2303      	movs	r3, #3
 8003970:	aa07      	add	r2, sp, #28
 8003972:	9204      	str	r2, [sp, #16]
 8003974:	aa06      	add	r2, sp, #24
 8003976:	e9cd a202 	strd	sl, r2, [sp, #8]
 800397a:	e9cd 3500 	strd	r3, r5, [sp]
 800397e:	4622      	mov	r2, r4
 8003980:	463b      	mov	r3, r7
 8003982:	f000 fcf9 	bl	8004378 <_dtoa_r>
 8003986:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800398a:	4606      	mov	r6, r0
 800398c:	d102      	bne.n	8003994 <__cvt+0x60>
 800398e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003990:	07db      	lsls	r3, r3, #31
 8003992:	d522      	bpl.n	80039da <__cvt+0xa6>
 8003994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003998:	eb06 0905 	add.w	r9, r6, r5
 800399c:	d110      	bne.n	80039c0 <__cvt+0x8c>
 800399e:	7833      	ldrb	r3, [r6, #0]
 80039a0:	2b30      	cmp	r3, #48	; 0x30
 80039a2:	d10a      	bne.n	80039ba <__cvt+0x86>
 80039a4:	2200      	movs	r2, #0
 80039a6:	2300      	movs	r3, #0
 80039a8:	4620      	mov	r0, r4
 80039aa:	4639      	mov	r1, r7
 80039ac:	f7fc fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80039b0:	b918      	cbnz	r0, 80039ba <__cvt+0x86>
 80039b2:	f1c5 0501 	rsb	r5, r5, #1
 80039b6:	f8ca 5000 	str.w	r5, [sl]
 80039ba:	f8da 3000 	ldr.w	r3, [sl]
 80039be:	4499      	add	r9, r3
 80039c0:	2200      	movs	r2, #0
 80039c2:	2300      	movs	r3, #0
 80039c4:	4620      	mov	r0, r4
 80039c6:	4639      	mov	r1, r7
 80039c8:	f7fc ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80039cc:	b108      	cbz	r0, 80039d2 <__cvt+0x9e>
 80039ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80039d2:	2230      	movs	r2, #48	; 0x30
 80039d4:	9b07      	ldr	r3, [sp, #28]
 80039d6:	454b      	cmp	r3, r9
 80039d8:	d307      	bcc.n	80039ea <__cvt+0xb6>
 80039da:	4630      	mov	r0, r6
 80039dc:	9b07      	ldr	r3, [sp, #28]
 80039de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039e0:	1b9b      	subs	r3, r3, r6
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	b008      	add	sp, #32
 80039e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	9107      	str	r1, [sp, #28]
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e7f0      	b.n	80039d4 <__cvt+0xa0>

080039f2 <__exponent>:
 80039f2:	4603      	mov	r3, r0
 80039f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039f6:	2900      	cmp	r1, #0
 80039f8:	f803 2b02 	strb.w	r2, [r3], #2
 80039fc:	bfb6      	itet	lt
 80039fe:	222d      	movlt	r2, #45	; 0x2d
 8003a00:	222b      	movge	r2, #43	; 0x2b
 8003a02:	4249      	neglt	r1, r1
 8003a04:	2909      	cmp	r1, #9
 8003a06:	7042      	strb	r2, [r0, #1]
 8003a08:	dd2b      	ble.n	8003a62 <__exponent+0x70>
 8003a0a:	f10d 0407 	add.w	r4, sp, #7
 8003a0e:	46a4      	mov	ip, r4
 8003a10:	270a      	movs	r7, #10
 8003a12:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a16:	460a      	mov	r2, r1
 8003a18:	46a6      	mov	lr, r4
 8003a1a:	fb07 1516 	mls	r5, r7, r6, r1
 8003a1e:	2a63      	cmp	r2, #99	; 0x63
 8003a20:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003a24:	4631      	mov	r1, r6
 8003a26:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a2e:	dcf0      	bgt.n	8003a12 <__exponent+0x20>
 8003a30:	3130      	adds	r1, #48	; 0x30
 8003a32:	f1ae 0502 	sub.w	r5, lr, #2
 8003a36:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	1c44      	adds	r4, r0, #1
 8003a3e:	4561      	cmp	r1, ip
 8003a40:	d30a      	bcc.n	8003a58 <__exponent+0x66>
 8003a42:	f10d 0209 	add.w	r2, sp, #9
 8003a46:	eba2 020e 	sub.w	r2, r2, lr
 8003a4a:	4565      	cmp	r5, ip
 8003a4c:	bf88      	it	hi
 8003a4e:	2200      	movhi	r2, #0
 8003a50:	4413      	add	r3, r2
 8003a52:	1a18      	subs	r0, r3, r0
 8003a54:	b003      	add	sp, #12
 8003a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a5c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a60:	e7ed      	b.n	8003a3e <__exponent+0x4c>
 8003a62:	2330      	movs	r3, #48	; 0x30
 8003a64:	3130      	adds	r1, #48	; 0x30
 8003a66:	7083      	strb	r3, [r0, #2]
 8003a68:	70c1      	strb	r1, [r0, #3]
 8003a6a:	1d03      	adds	r3, r0, #4
 8003a6c:	e7f1      	b.n	8003a52 <__exponent+0x60>
	...

08003a70 <_printf_float>:
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	b091      	sub	sp, #68	; 0x44
 8003a76:	460c      	mov	r4, r1
 8003a78:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	461f      	mov	r7, r3
 8003a80:	4605      	mov	r5, r0
 8003a82:	f001 fa67 	bl	8004f54 <_localeconv_r>
 8003a86:	6803      	ldr	r3, [r0, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8c:	f7fc fb60 	bl	8000150 <strlen>
 8003a90:	2300      	movs	r3, #0
 8003a92:	930e      	str	r3, [sp, #56]	; 0x38
 8003a94:	f8d8 3000 	ldr.w	r3, [r8]
 8003a98:	900a      	str	r0, [sp, #40]	; 0x28
 8003a9a:	3307      	adds	r3, #7
 8003a9c:	f023 0307 	bic.w	r3, r3, #7
 8003aa0:	f103 0208 	add.w	r2, r3, #8
 8003aa4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003aa8:	f8d4 b000 	ldr.w	fp, [r4]
 8003aac:	f8c8 2000 	str.w	r2, [r8]
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ab8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003abc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	4b9c      	ldr	r3, [pc, #624]	; (8003d3c <_printf_float+0x2cc>)
 8003aca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003acc:	f7fc ff9e 	bl	8000a0c <__aeabi_dcmpun>
 8003ad0:	bb70      	cbnz	r0, 8003b30 <_printf_float+0xc0>
 8003ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	4b98      	ldr	r3, [pc, #608]	; (8003d3c <_printf_float+0x2cc>)
 8003ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003adc:	f7fc ff78 	bl	80009d0 <__aeabi_dcmple>
 8003ae0:	bb30      	cbnz	r0, 8003b30 <_printf_float+0xc0>
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4651      	mov	r1, sl
 8003aea:	f7fc ff67 	bl	80009bc <__aeabi_dcmplt>
 8003aee:	b110      	cbz	r0, 8003af6 <_printf_float+0x86>
 8003af0:	232d      	movs	r3, #45	; 0x2d
 8003af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af6:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <_printf_float+0x2d0>)
 8003af8:	4892      	ldr	r0, [pc, #584]	; (8003d44 <_printf_float+0x2d4>)
 8003afa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003afe:	bf94      	ite	ls
 8003b00:	4698      	movls	r8, r3
 8003b02:	4680      	movhi	r8, r0
 8003b04:	2303      	movs	r3, #3
 8003b06:	f04f 0a00 	mov.w	sl, #0
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	f02b 0304 	bic.w	r3, fp, #4
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	4633      	mov	r3, r6
 8003b14:	4621      	mov	r1, r4
 8003b16:	4628      	mov	r0, r5
 8003b18:	9700      	str	r7, [sp, #0]
 8003b1a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b1c:	f000 f9d4 	bl	8003ec8 <_printf_common>
 8003b20:	3001      	adds	r0, #1
 8003b22:	f040 8090 	bne.w	8003c46 <_printf_float+0x1d6>
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2a:	b011      	add	sp, #68	; 0x44
 8003b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b30:	4642      	mov	r2, r8
 8003b32:	4653      	mov	r3, sl
 8003b34:	4640      	mov	r0, r8
 8003b36:	4651      	mov	r1, sl
 8003b38:	f7fc ff68 	bl	8000a0c <__aeabi_dcmpun>
 8003b3c:	b148      	cbz	r0, 8003b52 <_printf_float+0xe2>
 8003b3e:	f1ba 0f00 	cmp.w	sl, #0
 8003b42:	bfb8      	it	lt
 8003b44:	232d      	movlt	r3, #45	; 0x2d
 8003b46:	4880      	ldr	r0, [pc, #512]	; (8003d48 <_printf_float+0x2d8>)
 8003b48:	bfb8      	it	lt
 8003b4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <_printf_float+0x2dc>)
 8003b50:	e7d3      	b.n	8003afa <_printf_float+0x8a>
 8003b52:	6863      	ldr	r3, [r4, #4]
 8003b54:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	d142      	bne.n	8003be2 <_printf_float+0x172>
 8003b5c:	2306      	movs	r3, #6
 8003b5e:	6063      	str	r3, [r4, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	9206      	str	r2, [sp, #24]
 8003b64:	aa0e      	add	r2, sp, #56	; 0x38
 8003b66:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b6a:	aa0d      	add	r2, sp, #52	; 0x34
 8003b6c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b70:	9203      	str	r2, [sp, #12]
 8003b72:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	4642      	mov	r2, r8
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	4628      	mov	r0, r5
 8003b84:	4653      	mov	r3, sl
 8003b86:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b88:	f7ff fed4 	bl	8003934 <__cvt>
 8003b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b8e:	4680      	mov	r8, r0
 8003b90:	2947      	cmp	r1, #71	; 0x47
 8003b92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b94:	d108      	bne.n	8003ba8 <_printf_float+0x138>
 8003b96:	1cc8      	adds	r0, r1, #3
 8003b98:	db02      	blt.n	8003ba0 <_printf_float+0x130>
 8003b9a:	6863      	ldr	r3, [r4, #4]
 8003b9c:	4299      	cmp	r1, r3
 8003b9e:	dd40      	ble.n	8003c22 <_printf_float+0x1b2>
 8003ba0:	f1a9 0902 	sub.w	r9, r9, #2
 8003ba4:	fa5f f989 	uxtb.w	r9, r9
 8003ba8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bac:	d81f      	bhi.n	8003bee <_printf_float+0x17e>
 8003bae:	464a      	mov	r2, r9
 8003bb0:	3901      	subs	r1, #1
 8003bb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bb6:	910d      	str	r1, [sp, #52]	; 0x34
 8003bb8:	f7ff ff1b 	bl	80039f2 <__exponent>
 8003bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bbe:	4682      	mov	sl, r0
 8003bc0:	1813      	adds	r3, r2, r0
 8003bc2:	2a01      	cmp	r2, #1
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	dc02      	bgt.n	8003bce <_printf_float+0x15e>
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	07d2      	lsls	r2, r2, #31
 8003bcc:	d501      	bpl.n	8003bd2 <_printf_float+0x162>
 8003bce:	3301      	adds	r3, #1
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d09b      	beq.n	8003b12 <_printf_float+0xa2>
 8003bda:	232d      	movs	r3, #45	; 0x2d
 8003bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be0:	e797      	b.n	8003b12 <_printf_float+0xa2>
 8003be2:	2947      	cmp	r1, #71	; 0x47
 8003be4:	d1bc      	bne.n	8003b60 <_printf_float+0xf0>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ba      	bne.n	8003b60 <_printf_float+0xf0>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e7b7      	b.n	8003b5e <_printf_float+0xee>
 8003bee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003bf2:	d118      	bne.n	8003c26 <_printf_float+0x1b6>
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	dd0b      	ble.n	8003c12 <_printf_float+0x1a2>
 8003bfa:	6121      	str	r1, [r4, #16]
 8003bfc:	b913      	cbnz	r3, 8003c04 <_printf_float+0x194>
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	07d0      	lsls	r0, r2, #31
 8003c02:	d502      	bpl.n	8003c0a <_printf_float+0x19a>
 8003c04:	3301      	adds	r3, #1
 8003c06:	440b      	add	r3, r1
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	f04f 0a00 	mov.w	sl, #0
 8003c0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c10:	e7df      	b.n	8003bd2 <_printf_float+0x162>
 8003c12:	b913      	cbnz	r3, 8003c1a <_printf_float+0x1aa>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	07d2      	lsls	r2, r2, #31
 8003c18:	d501      	bpl.n	8003c1e <_printf_float+0x1ae>
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	e7f4      	b.n	8003c08 <_printf_float+0x198>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e7f2      	b.n	8003c08 <_printf_float+0x198>
 8003c22:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	db05      	blt.n	8003c38 <_printf_float+0x1c8>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	6121      	str	r1, [r4, #16]
 8003c30:	07d8      	lsls	r0, r3, #31
 8003c32:	d5ea      	bpl.n	8003c0a <_printf_float+0x19a>
 8003c34:	1c4b      	adds	r3, r1, #1
 8003c36:	e7e7      	b.n	8003c08 <_printf_float+0x198>
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	bfcc      	ite	gt
 8003c3c:	2201      	movgt	r2, #1
 8003c3e:	f1c1 0202 	rsble	r2, r1, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	e7e0      	b.n	8003c08 <_printf_float+0x198>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	055a      	lsls	r2, r3, #21
 8003c4a:	d407      	bmi.n	8003c5c <_printf_float+0x1ec>
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	4642      	mov	r2, r8
 8003c50:	4631      	mov	r1, r6
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b8      	blx	r7
 8003c56:	3001      	adds	r0, #1
 8003c58:	d12b      	bne.n	8003cb2 <_printf_float+0x242>
 8003c5a:	e764      	b.n	8003b26 <_printf_float+0xb6>
 8003c5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c60:	f240 80dd 	bls.w	8003e1e <_printf_float+0x3ae>
 8003c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f7fc fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d033      	beq.n	8003cdc <_printf_float+0x26c>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4631      	mov	r1, r6
 8003c78:	4628      	mov	r0, r5
 8003c7a:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <_printf_float+0x2e0>)
 8003c7c:	47b8      	blx	r7
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f43f af51 	beq.w	8003b26 <_printf_float+0xb6>
 8003c84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	db02      	blt.n	8003c92 <_printf_float+0x222>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	07d8      	lsls	r0, r3, #31
 8003c90:	d50f      	bpl.n	8003cb2 <_printf_float+0x242>
 8003c92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c96:	4631      	mov	r1, r6
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f af42 	beq.w	8003b26 <_printf_float+0xb6>
 8003ca2:	f04f 0800 	mov.w	r8, #0
 8003ca6:	f104 091a 	add.w	r9, r4, #26
 8003caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cac:	3b01      	subs	r3, #1
 8003cae:	4543      	cmp	r3, r8
 8003cb0:	dc09      	bgt.n	8003cc6 <_printf_float+0x256>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	079b      	lsls	r3, r3, #30
 8003cb6:	f100 8102 	bmi.w	8003ebe <_printf_float+0x44e>
 8003cba:	68e0      	ldr	r0, [r4, #12]
 8003cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cbe:	4298      	cmp	r0, r3
 8003cc0:	bfb8      	it	lt
 8003cc2:	4618      	movlt	r0, r3
 8003cc4:	e731      	b.n	8003b2a <_printf_float+0xba>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	464a      	mov	r2, r9
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f af28 	beq.w	8003b26 <_printf_float+0xb6>
 8003cd6:	f108 0801 	add.w	r8, r8, #1
 8003cda:	e7e6      	b.n	8003caa <_printf_float+0x23a>
 8003cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	dc38      	bgt.n	8003d54 <_printf_float+0x2e4>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <_printf_float+0x2e0>)
 8003cea:	47b8      	blx	r7
 8003cec:	3001      	adds	r0, #1
 8003cee:	f43f af1a 	beq.w	8003b26 <_printf_float+0xb6>
 8003cf2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	d102      	bne.n	8003d00 <_printf_float+0x290>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	07d9      	lsls	r1, r3, #31
 8003cfe:	d5d8      	bpl.n	8003cb2 <_printf_float+0x242>
 8003d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f af0b 	beq.w	8003b26 <_printf_float+0xb6>
 8003d10:	f04f 0900 	mov.w	r9, #0
 8003d14:	f104 0a1a 	add.w	sl, r4, #26
 8003d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d1a:	425b      	negs	r3, r3
 8003d1c:	454b      	cmp	r3, r9
 8003d1e:	dc01      	bgt.n	8003d24 <_printf_float+0x2b4>
 8003d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d22:	e794      	b.n	8003c4e <_printf_float+0x1de>
 8003d24:	2301      	movs	r3, #1
 8003d26:	4652      	mov	r2, sl
 8003d28:	4631      	mov	r1, r6
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b8      	blx	r7
 8003d2e:	3001      	adds	r0, #1
 8003d30:	f43f aef9 	beq.w	8003b26 <_printf_float+0xb6>
 8003d34:	f109 0901 	add.w	r9, r9, #1
 8003d38:	e7ee      	b.n	8003d18 <_printf_float+0x2a8>
 8003d3a:	bf00      	nop
 8003d3c:	7fefffff 	.word	0x7fefffff
 8003d40:	0800676c 	.word	0x0800676c
 8003d44:	08006770 	.word	0x08006770
 8003d48:	08006778 	.word	0x08006778
 8003d4c:	08006774 	.word	0x08006774
 8003d50:	0800677c 	.word	0x0800677c
 8003d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	bfa8      	it	ge
 8003d5c:	461a      	movge	r2, r3
 8003d5e:	2a00      	cmp	r2, #0
 8003d60:	4691      	mov	r9, r2
 8003d62:	dc37      	bgt.n	8003dd4 <_printf_float+0x364>
 8003d64:	f04f 0b00 	mov.w	fp, #0
 8003d68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d6c:	f104 021a 	add.w	r2, r4, #26
 8003d70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d74:	ebaa 0309 	sub.w	r3, sl, r9
 8003d78:	455b      	cmp	r3, fp
 8003d7a:	dc33      	bgt.n	8003de4 <_printf_float+0x374>
 8003d7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d80:	429a      	cmp	r2, r3
 8003d82:	db3b      	blt.n	8003dfc <_printf_float+0x38c>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	07da      	lsls	r2, r3, #31
 8003d88:	d438      	bmi.n	8003dfc <_printf_float+0x38c>
 8003d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d8e:	eba3 020a 	sub.w	r2, r3, sl
 8003d92:	eba3 0901 	sub.w	r9, r3, r1
 8003d96:	4591      	cmp	r9, r2
 8003d98:	bfa8      	it	ge
 8003d9a:	4691      	movge	r9, r2
 8003d9c:	f1b9 0f00 	cmp.w	r9, #0
 8003da0:	dc34      	bgt.n	8003e0c <_printf_float+0x39c>
 8003da2:	f04f 0800 	mov.w	r8, #0
 8003da6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003daa:	f104 0a1a 	add.w	sl, r4, #26
 8003dae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	eba3 0309 	sub.w	r3, r3, r9
 8003db8:	4543      	cmp	r3, r8
 8003dba:	f77f af7a 	ble.w	8003cb2 <_printf_float+0x242>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4652      	mov	r2, sl
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f43f aeac 	beq.w	8003b26 <_printf_float+0xb6>
 8003dce:	f108 0801 	add.w	r8, r8, #1
 8003dd2:	e7ec      	b.n	8003dae <_printf_float+0x33e>
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4642      	mov	r2, r8
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b8      	blx	r7
 8003dde:	3001      	adds	r0, #1
 8003de0:	d1c0      	bne.n	8003d64 <_printf_float+0x2f4>
 8003de2:	e6a0      	b.n	8003b26 <_printf_float+0xb6>
 8003de4:	2301      	movs	r3, #1
 8003de6:	4631      	mov	r1, r6
 8003de8:	4628      	mov	r0, r5
 8003dea:	920b      	str	r2, [sp, #44]	; 0x2c
 8003dec:	47b8      	blx	r7
 8003dee:	3001      	adds	r0, #1
 8003df0:	f43f ae99 	beq.w	8003b26 <_printf_float+0xb6>
 8003df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003df6:	f10b 0b01 	add.w	fp, fp, #1
 8003dfa:	e7b9      	b.n	8003d70 <_printf_float+0x300>
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	d1bf      	bne.n	8003d8a <_printf_float+0x31a>
 8003e0a:	e68c      	b.n	8003b26 <_printf_float+0xb6>
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4628      	mov	r0, r5
 8003e12:	eb08 020a 	add.w	r2, r8, sl
 8003e16:	47b8      	blx	r7
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d1c2      	bne.n	8003da2 <_printf_float+0x332>
 8003e1c:	e683      	b.n	8003b26 <_printf_float+0xb6>
 8003e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e20:	2a01      	cmp	r2, #1
 8003e22:	dc01      	bgt.n	8003e28 <_printf_float+0x3b8>
 8003e24:	07db      	lsls	r3, r3, #31
 8003e26:	d537      	bpl.n	8003e98 <_printf_float+0x428>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	4628      	mov	r0, r5
 8003e30:	47b8      	blx	r7
 8003e32:	3001      	adds	r0, #1
 8003e34:	f43f ae77 	beq.w	8003b26 <_printf_float+0xb6>
 8003e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4628      	mov	r0, r5
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	f43f ae6f 	beq.w	8003b26 <_printf_float+0xb6>
 8003e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f7fc fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8003e54:	b9d8      	cbnz	r0, 8003e8e <_printf_float+0x41e>
 8003e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e58:	f108 0201 	add.w	r2, r8, #1
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	4631      	mov	r1, r6
 8003e60:	4628      	mov	r0, r5
 8003e62:	47b8      	blx	r7
 8003e64:	3001      	adds	r0, #1
 8003e66:	d10e      	bne.n	8003e86 <_printf_float+0x416>
 8003e68:	e65d      	b.n	8003b26 <_printf_float+0xb6>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	464a      	mov	r2, r9
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b8      	blx	r7
 8003e74:	3001      	adds	r0, #1
 8003e76:	f43f ae56 	beq.w	8003b26 <_printf_float+0xb6>
 8003e7a:	f108 0801 	add.w	r8, r8, #1
 8003e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4543      	cmp	r3, r8
 8003e84:	dcf1      	bgt.n	8003e6a <_printf_float+0x3fa>
 8003e86:	4653      	mov	r3, sl
 8003e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e8c:	e6e0      	b.n	8003c50 <_printf_float+0x1e0>
 8003e8e:	f04f 0800 	mov.w	r8, #0
 8003e92:	f104 091a 	add.w	r9, r4, #26
 8003e96:	e7f2      	b.n	8003e7e <_printf_float+0x40e>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	e7df      	b.n	8003e5e <_printf_float+0x3ee>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	464a      	mov	r2, r9
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f ae3c 	beq.w	8003b26 <_printf_float+0xb6>
 8003eae:	f108 0801 	add.w	r8, r8, #1
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	4543      	cmp	r3, r8
 8003eba:	dcf0      	bgt.n	8003e9e <_printf_float+0x42e>
 8003ebc:	e6fd      	b.n	8003cba <_printf_float+0x24a>
 8003ebe:	f04f 0800 	mov.w	r8, #0
 8003ec2:	f104 0919 	add.w	r9, r4, #25
 8003ec6:	e7f4      	b.n	8003eb2 <_printf_float+0x442>

08003ec8 <_printf_common>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	4616      	mov	r6, r2
 8003ece:	4699      	mov	r9, r3
 8003ed0:	688a      	ldr	r2, [r1, #8]
 8003ed2:	690b      	ldr	r3, [r1, #16]
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	bfb8      	it	lt
 8003eda:	4613      	movlt	r3, r2
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee8:	b10a      	cbz	r2, 8003eee <_printf_common+0x26>
 8003eea:	3301      	adds	r3, #1
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	0699      	lsls	r1, r3, #26
 8003ef2:	bf42      	ittt	mi
 8003ef4:	6833      	ldrmi	r3, [r6, #0]
 8003ef6:	3302      	addmi	r3, #2
 8003ef8:	6033      	strmi	r3, [r6, #0]
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	f015 0506 	ands.w	r5, r5, #6
 8003f00:	d106      	bne.n	8003f10 <_printf_common+0x48>
 8003f02:	f104 0a19 	add.w	sl, r4, #25
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	6832      	ldr	r2, [r6, #0]
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	42ab      	cmp	r3, r5
 8003f0e:	dc28      	bgt.n	8003f62 <_printf_common+0x9a>
 8003f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f14:	1e13      	subs	r3, r2, #0
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	bf18      	it	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	0692      	lsls	r2, r2, #26
 8003f1e:	d42d      	bmi.n	8003f7c <_printf_common+0xb4>
 8003f20:	4649      	mov	r1, r9
 8003f22:	4638      	mov	r0, r7
 8003f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d020      	beq.n	8003f70 <_printf_common+0xa8>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	68e5      	ldr	r5, [r4, #12]
 8003f32:	f003 0306 	and.w	r3, r3, #6
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	bf18      	it	ne
 8003f3a:	2500      	movne	r5, #0
 8003f3c:	6832      	ldr	r2, [r6, #0]
 8003f3e:	f04f 0600 	mov.w	r6, #0
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	bf08      	it	eq
 8003f46:	1aad      	subeq	r5, r5, r2
 8003f48:	6922      	ldr	r2, [r4, #16]
 8003f4a:	bf08      	it	eq
 8003f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bfc4      	itt	gt
 8003f54:	1a9b      	subgt	r3, r3, r2
 8003f56:	18ed      	addgt	r5, r5, r3
 8003f58:	341a      	adds	r4, #26
 8003f5a:	42b5      	cmp	r5, r6
 8003f5c:	d11a      	bne.n	8003f94 <_printf_common+0xcc>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e008      	b.n	8003f74 <_printf_common+0xac>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4652      	mov	r2, sl
 8003f66:	4649      	mov	r1, r9
 8003f68:	4638      	mov	r0, r7
 8003f6a:	47c0      	blx	r8
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d103      	bne.n	8003f78 <_printf_common+0xb0>
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7c4      	b.n	8003f06 <_printf_common+0x3e>
 8003f7c:	2030      	movs	r0, #48	; 0x30
 8003f7e:	18e1      	adds	r1, r4, r3
 8003f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f8a:	4422      	add	r2, r4
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f92:	e7c5      	b.n	8003f20 <_printf_common+0x58>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4622      	mov	r2, r4
 8003f98:	4649      	mov	r1, r9
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	47c0      	blx	r8
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d0e6      	beq.n	8003f70 <_printf_common+0xa8>
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e7d9      	b.n	8003f5a <_printf_common+0x92>
	...

08003fa8 <_printf_i>:
 8003fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	7e0f      	ldrb	r7, [r1, #24]
 8003fae:	4691      	mov	r9, r2
 8003fb0:	2f78      	cmp	r7, #120	; 0x78
 8003fb2:	4680      	mov	r8, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	469a      	mov	sl, r3
 8003fb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fbe:	d807      	bhi.n	8003fd0 <_printf_i+0x28>
 8003fc0:	2f62      	cmp	r7, #98	; 0x62
 8003fc2:	d80a      	bhi.n	8003fda <_printf_i+0x32>
 8003fc4:	2f00      	cmp	r7, #0
 8003fc6:	f000 80d9 	beq.w	800417c <_printf_i+0x1d4>
 8003fca:	2f58      	cmp	r7, #88	; 0x58
 8003fcc:	f000 80a4 	beq.w	8004118 <_printf_i+0x170>
 8003fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd8:	e03a      	b.n	8004050 <_printf_i+0xa8>
 8003fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fde:	2b15      	cmp	r3, #21
 8003fe0:	d8f6      	bhi.n	8003fd0 <_printf_i+0x28>
 8003fe2:	a101      	add	r1, pc, #4	; (adr r1, 8003fe8 <_printf_i+0x40>)
 8003fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe8:	08004041 	.word	0x08004041
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	08003fd1 	.word	0x08003fd1
 8003ff4:	08003fd1 	.word	0x08003fd1
 8003ff8:	08003fd1 	.word	0x08003fd1
 8003ffc:	08003fd1 	.word	0x08003fd1
 8004000:	08004055 	.word	0x08004055
 8004004:	08003fd1 	.word	0x08003fd1
 8004008:	08003fd1 	.word	0x08003fd1
 800400c:	08003fd1 	.word	0x08003fd1
 8004010:	08003fd1 	.word	0x08003fd1
 8004014:	08004163 	.word	0x08004163
 8004018:	08004085 	.word	0x08004085
 800401c:	08004145 	.word	0x08004145
 8004020:	08003fd1 	.word	0x08003fd1
 8004024:	08003fd1 	.word	0x08003fd1
 8004028:	08004185 	.word	0x08004185
 800402c:	08003fd1 	.word	0x08003fd1
 8004030:	08004085 	.word	0x08004085
 8004034:	08003fd1 	.word	0x08003fd1
 8004038:	08003fd1 	.word	0x08003fd1
 800403c:	0800414d 	.word	0x0800414d
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	1d1a      	adds	r2, r3, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	602a      	str	r2, [r5, #0]
 8004048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800404c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004050:	2301      	movs	r3, #1
 8004052:	e0a4      	b.n	800419e <_printf_i+0x1f6>
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	6829      	ldr	r1, [r5, #0]
 8004058:	0606      	lsls	r6, r0, #24
 800405a:	f101 0304 	add.w	r3, r1, #4
 800405e:	d50a      	bpl.n	8004076 <_printf_i+0xce>
 8004060:	680e      	ldr	r6, [r1, #0]
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	2e00      	cmp	r6, #0
 8004066:	da03      	bge.n	8004070 <_printf_i+0xc8>
 8004068:	232d      	movs	r3, #45	; 0x2d
 800406a:	4276      	negs	r6, r6
 800406c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004070:	230a      	movs	r3, #10
 8004072:	485e      	ldr	r0, [pc, #376]	; (80041ec <_printf_i+0x244>)
 8004074:	e019      	b.n	80040aa <_printf_i+0x102>
 8004076:	680e      	ldr	r6, [r1, #0]
 8004078:	f010 0f40 	tst.w	r0, #64	; 0x40
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	bf18      	it	ne
 8004080:	b236      	sxthne	r6, r6
 8004082:	e7ef      	b.n	8004064 <_printf_i+0xbc>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	6820      	ldr	r0, [r4, #0]
 8004088:	1d19      	adds	r1, r3, #4
 800408a:	6029      	str	r1, [r5, #0]
 800408c:	0601      	lsls	r1, r0, #24
 800408e:	d501      	bpl.n	8004094 <_printf_i+0xec>
 8004090:	681e      	ldr	r6, [r3, #0]
 8004092:	e002      	b.n	800409a <_printf_i+0xf2>
 8004094:	0646      	lsls	r6, r0, #25
 8004096:	d5fb      	bpl.n	8004090 <_printf_i+0xe8>
 8004098:	881e      	ldrh	r6, [r3, #0]
 800409a:	2f6f      	cmp	r7, #111	; 0x6f
 800409c:	bf0c      	ite	eq
 800409e:	2308      	moveq	r3, #8
 80040a0:	230a      	movne	r3, #10
 80040a2:	4852      	ldr	r0, [pc, #328]	; (80041ec <_printf_i+0x244>)
 80040a4:	2100      	movs	r1, #0
 80040a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040aa:	6865      	ldr	r5, [r4, #4]
 80040ac:	2d00      	cmp	r5, #0
 80040ae:	bfa8      	it	ge
 80040b0:	6821      	ldrge	r1, [r4, #0]
 80040b2:	60a5      	str	r5, [r4, #8]
 80040b4:	bfa4      	itt	ge
 80040b6:	f021 0104 	bicge.w	r1, r1, #4
 80040ba:	6021      	strge	r1, [r4, #0]
 80040bc:	b90e      	cbnz	r6, 80040c2 <_printf_i+0x11a>
 80040be:	2d00      	cmp	r5, #0
 80040c0:	d04d      	beq.n	800415e <_printf_i+0x1b6>
 80040c2:	4615      	mov	r5, r2
 80040c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c8:	fb03 6711 	mls	r7, r3, r1, r6
 80040cc:	5dc7      	ldrb	r7, [r0, r7]
 80040ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040d2:	4637      	mov	r7, r6
 80040d4:	42bb      	cmp	r3, r7
 80040d6:	460e      	mov	r6, r1
 80040d8:	d9f4      	bls.n	80040c4 <_printf_i+0x11c>
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d10b      	bne.n	80040f6 <_printf_i+0x14e>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	07de      	lsls	r6, r3, #31
 80040e2:	d508      	bpl.n	80040f6 <_printf_i+0x14e>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6861      	ldr	r1, [r4, #4]
 80040e8:	4299      	cmp	r1, r3
 80040ea:	bfde      	ittt	le
 80040ec:	2330      	movle	r3, #48	; 0x30
 80040ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040f6:	1b52      	subs	r2, r2, r5
 80040f8:	6122      	str	r2, [r4, #16]
 80040fa:	464b      	mov	r3, r9
 80040fc:	4621      	mov	r1, r4
 80040fe:	4640      	mov	r0, r8
 8004100:	f8cd a000 	str.w	sl, [sp]
 8004104:	aa03      	add	r2, sp, #12
 8004106:	f7ff fedf 	bl	8003ec8 <_printf_common>
 800410a:	3001      	adds	r0, #1
 800410c:	d14c      	bne.n	80041a8 <_printf_i+0x200>
 800410e:	f04f 30ff 	mov.w	r0, #4294967295
 8004112:	b004      	add	sp, #16
 8004114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004118:	4834      	ldr	r0, [pc, #208]	; (80041ec <_printf_i+0x244>)
 800411a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800411e:	6829      	ldr	r1, [r5, #0]
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	f851 6b04 	ldr.w	r6, [r1], #4
 8004126:	6029      	str	r1, [r5, #0]
 8004128:	061d      	lsls	r5, r3, #24
 800412a:	d514      	bpl.n	8004156 <_printf_i+0x1ae>
 800412c:	07df      	lsls	r7, r3, #31
 800412e:	bf44      	itt	mi
 8004130:	f043 0320 	orrmi.w	r3, r3, #32
 8004134:	6023      	strmi	r3, [r4, #0]
 8004136:	b91e      	cbnz	r6, 8004140 <_printf_i+0x198>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	f023 0320 	bic.w	r3, r3, #32
 800413e:	6023      	str	r3, [r4, #0]
 8004140:	2310      	movs	r3, #16
 8004142:	e7af      	b.n	80040a4 <_printf_i+0xfc>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	2378      	movs	r3, #120	; 0x78
 800414e:	4828      	ldr	r0, [pc, #160]	; (80041f0 <_printf_i+0x248>)
 8004150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004154:	e7e3      	b.n	800411e <_printf_i+0x176>
 8004156:	0659      	lsls	r1, r3, #25
 8004158:	bf48      	it	mi
 800415a:	b2b6      	uxthmi	r6, r6
 800415c:	e7e6      	b.n	800412c <_printf_i+0x184>
 800415e:	4615      	mov	r5, r2
 8004160:	e7bb      	b.n	80040da <_printf_i+0x132>
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	6826      	ldr	r6, [r4, #0]
 8004166:	1d18      	adds	r0, r3, #4
 8004168:	6961      	ldr	r1, [r4, #20]
 800416a:	6028      	str	r0, [r5, #0]
 800416c:	0635      	lsls	r5, r6, #24
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	d501      	bpl.n	8004176 <_printf_i+0x1ce>
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	e002      	b.n	800417c <_printf_i+0x1d4>
 8004176:	0670      	lsls	r0, r6, #25
 8004178:	d5fb      	bpl.n	8004172 <_printf_i+0x1ca>
 800417a:	8019      	strh	r1, [r3, #0]
 800417c:	2300      	movs	r3, #0
 800417e:	4615      	mov	r5, r2
 8004180:	6123      	str	r3, [r4, #16]
 8004182:	e7ba      	b.n	80040fa <_printf_i+0x152>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	2100      	movs	r1, #0
 8004188:	1d1a      	adds	r2, r3, #4
 800418a:	602a      	str	r2, [r5, #0]
 800418c:	681d      	ldr	r5, [r3, #0]
 800418e:	6862      	ldr	r2, [r4, #4]
 8004190:	4628      	mov	r0, r5
 8004192:	f000 feeb 	bl	8004f6c <memchr>
 8004196:	b108      	cbz	r0, 800419c <_printf_i+0x1f4>
 8004198:	1b40      	subs	r0, r0, r5
 800419a:	6060      	str	r0, [r4, #4]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	2300      	movs	r3, #0
 80041a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a6:	e7a8      	b.n	80040fa <_printf_i+0x152>
 80041a8:	462a      	mov	r2, r5
 80041aa:	4649      	mov	r1, r9
 80041ac:	4640      	mov	r0, r8
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	47d0      	blx	sl
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0ab      	beq.n	800410e <_printf_i+0x166>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	079b      	lsls	r3, r3, #30
 80041ba:	d413      	bmi.n	80041e4 <_printf_i+0x23c>
 80041bc:	68e0      	ldr	r0, [r4, #12]
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	4298      	cmp	r0, r3
 80041c2:	bfb8      	it	lt
 80041c4:	4618      	movlt	r0, r3
 80041c6:	e7a4      	b.n	8004112 <_printf_i+0x16a>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4632      	mov	r2, r6
 80041cc:	4649      	mov	r1, r9
 80041ce:	4640      	mov	r0, r8
 80041d0:	47d0      	blx	sl
 80041d2:	3001      	adds	r0, #1
 80041d4:	d09b      	beq.n	800410e <_printf_i+0x166>
 80041d6:	3501      	adds	r5, #1
 80041d8:	68e3      	ldr	r3, [r4, #12]
 80041da:	9903      	ldr	r1, [sp, #12]
 80041dc:	1a5b      	subs	r3, r3, r1
 80041de:	42ab      	cmp	r3, r5
 80041e0:	dcf2      	bgt.n	80041c8 <_printf_i+0x220>
 80041e2:	e7eb      	b.n	80041bc <_printf_i+0x214>
 80041e4:	2500      	movs	r5, #0
 80041e6:	f104 0619 	add.w	r6, r4, #25
 80041ea:	e7f5      	b.n	80041d8 <_printf_i+0x230>
 80041ec:	0800677e 	.word	0x0800677e
 80041f0:	0800678f 	.word	0x0800678f

080041f4 <sniprintf>:
 80041f4:	b40c      	push	{r2, r3}
 80041f6:	b530      	push	{r4, r5, lr}
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <sniprintf+0x64>)
 80041fa:	1e0c      	subs	r4, r1, #0
 80041fc:	681d      	ldr	r5, [r3, #0]
 80041fe:	b09d      	sub	sp, #116	; 0x74
 8004200:	da08      	bge.n	8004214 <sniprintf+0x20>
 8004202:	238b      	movs	r3, #139	; 0x8b
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	b01d      	add	sp, #116	; 0x74
 800420c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004210:	b002      	add	sp, #8
 8004212:	4770      	bx	lr
 8004214:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004218:	f8ad 3014 	strh.w	r3, [sp, #20]
 800421c:	bf0c      	ite	eq
 800421e:	4623      	moveq	r3, r4
 8004220:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004224:	9304      	str	r3, [sp, #16]
 8004226:	9307      	str	r3, [sp, #28]
 8004228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422c:	9002      	str	r0, [sp, #8]
 800422e:	9006      	str	r0, [sp, #24]
 8004230:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004234:	4628      	mov	r0, r5
 8004236:	ab21      	add	r3, sp, #132	; 0x84
 8004238:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800423a:	a902      	add	r1, sp, #8
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	f001 fb7f 	bl	8005940 <_svfiprintf_r>
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	bfbc      	itt	lt
 8004246:	238b      	movlt	r3, #139	; 0x8b
 8004248:	602b      	strlt	r3, [r5, #0]
 800424a:	2c00      	cmp	r4, #0
 800424c:	d0dd      	beq.n	800420a <sniprintf+0x16>
 800424e:	2200      	movs	r2, #0
 8004250:	9b02      	ldr	r3, [sp, #8]
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e7d9      	b.n	800420a <sniprintf+0x16>
 8004256:	bf00      	nop
 8004258:	2000001c 	.word	0x2000001c

0800425c <quorem>:
 800425c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	6903      	ldr	r3, [r0, #16]
 8004262:	690c      	ldr	r4, [r1, #16]
 8004264:	4607      	mov	r7, r0
 8004266:	42a3      	cmp	r3, r4
 8004268:	f2c0 8082 	blt.w	8004370 <quorem+0x114>
 800426c:	3c01      	subs	r4, #1
 800426e:	f100 0514 	add.w	r5, r0, #20
 8004272:	f101 0814 	add.w	r8, r1, #20
 8004276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004284:	3301      	adds	r3, #1
 8004286:	429a      	cmp	r2, r3
 8004288:	fbb2 f6f3 	udiv	r6, r2, r3
 800428c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004294:	d331      	bcc.n	80042fa <quorem+0x9e>
 8004296:	f04f 0e00 	mov.w	lr, #0
 800429a:	4640      	mov	r0, r8
 800429c:	46ac      	mov	ip, r5
 800429e:	46f2      	mov	sl, lr
 80042a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80042a4:	b293      	uxth	r3, r2
 80042a6:	fb06 e303 	mla	r3, r6, r3, lr
 80042aa:	0c12      	lsrs	r2, r2, #16
 80042ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	fb06 e202 	mla	r2, r6, r2, lr
 80042b6:	ebaa 0303 	sub.w	r3, sl, r3
 80042ba:	f8dc a000 	ldr.w	sl, [ip]
 80042be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042c2:	fa1f fa8a 	uxth.w	sl, sl
 80042c6:	4453      	add	r3, sl
 80042c8:	f8dc a000 	ldr.w	sl, [ip]
 80042cc:	b292      	uxth	r2, r2
 80042ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80042d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042dc:	4581      	cmp	r9, r0
 80042de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80042e2:	f84c 3b04 	str.w	r3, [ip], #4
 80042e6:	d2db      	bcs.n	80042a0 <quorem+0x44>
 80042e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80042ec:	b92b      	cbnz	r3, 80042fa <quorem+0x9e>
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	3b04      	subs	r3, #4
 80042f2:	429d      	cmp	r5, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	d32f      	bcc.n	8004358 <quorem+0xfc>
 80042f8:	613c      	str	r4, [r7, #16]
 80042fa:	4638      	mov	r0, r7
 80042fc:	f001 f8d0 	bl	80054a0 <__mcmp>
 8004300:	2800      	cmp	r0, #0
 8004302:	db25      	blt.n	8004350 <quorem+0xf4>
 8004304:	4628      	mov	r0, r5
 8004306:	f04f 0c00 	mov.w	ip, #0
 800430a:	3601      	adds	r6, #1
 800430c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004310:	f8d0 e000 	ldr.w	lr, [r0]
 8004314:	b28b      	uxth	r3, r1
 8004316:	ebac 0303 	sub.w	r3, ip, r3
 800431a:	fa1f f28e 	uxth.w	r2, lr
 800431e:	4413      	add	r3, r2
 8004320:	0c0a      	lsrs	r2, r1, #16
 8004322:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800432a:	b29b      	uxth	r3, r3
 800432c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004330:	45c1      	cmp	r9, r8
 8004332:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004336:	f840 3b04 	str.w	r3, [r0], #4
 800433a:	d2e7      	bcs.n	800430c <quorem+0xb0>
 800433c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004344:	b922      	cbnz	r2, 8004350 <quorem+0xf4>
 8004346:	3b04      	subs	r3, #4
 8004348:	429d      	cmp	r5, r3
 800434a:	461a      	mov	r2, r3
 800434c:	d30a      	bcc.n	8004364 <quorem+0x108>
 800434e:	613c      	str	r4, [r7, #16]
 8004350:	4630      	mov	r0, r6
 8004352:	b003      	add	sp, #12
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	3b04      	subs	r3, #4
 800435c:	2a00      	cmp	r2, #0
 800435e:	d1cb      	bne.n	80042f8 <quorem+0x9c>
 8004360:	3c01      	subs	r4, #1
 8004362:	e7c6      	b.n	80042f2 <quorem+0x96>
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	3b04      	subs	r3, #4
 8004368:	2a00      	cmp	r2, #0
 800436a:	d1f0      	bne.n	800434e <quorem+0xf2>
 800436c:	3c01      	subs	r4, #1
 800436e:	e7eb      	b.n	8004348 <quorem+0xec>
 8004370:	2000      	movs	r0, #0
 8004372:	e7ee      	b.n	8004352 <quorem+0xf6>
 8004374:	0000      	movs	r0, r0
	...

08004378 <_dtoa_r>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	4616      	mov	r6, r2
 800437e:	461f      	mov	r7, r3
 8004380:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004382:	b099      	sub	sp, #100	; 0x64
 8004384:	4605      	mov	r5, r0
 8004386:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800438a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800438e:	b974      	cbnz	r4, 80043ae <_dtoa_r+0x36>
 8004390:	2010      	movs	r0, #16
 8004392:	f000 fde3 	bl	8004f5c <malloc>
 8004396:	4602      	mov	r2, r0
 8004398:	6268      	str	r0, [r5, #36]	; 0x24
 800439a:	b920      	cbnz	r0, 80043a6 <_dtoa_r+0x2e>
 800439c:	21ea      	movs	r1, #234	; 0xea
 800439e:	4ba8      	ldr	r3, [pc, #672]	; (8004640 <_dtoa_r+0x2c8>)
 80043a0:	48a8      	ldr	r0, [pc, #672]	; (8004644 <_dtoa_r+0x2cc>)
 80043a2:	f001 fbdd 	bl	8005b60 <__assert_func>
 80043a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043aa:	6004      	str	r4, [r0, #0]
 80043ac:	60c4      	str	r4, [r0, #12]
 80043ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	b151      	cbz	r1, 80043ca <_dtoa_r+0x52>
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	2301      	movs	r3, #1
 80043b8:	4093      	lsls	r3, r2
 80043ba:	604a      	str	r2, [r1, #4]
 80043bc:	608b      	str	r3, [r1, #8]
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 fe30 	bl	8005024 <_Bfree>
 80043c4:	2200      	movs	r2, #0
 80043c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	1e3b      	subs	r3, r7, #0
 80043cc:	bfaf      	iteee	ge
 80043ce:	2300      	movge	r3, #0
 80043d0:	2201      	movlt	r2, #1
 80043d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	9305      	strlt	r3, [sp, #20]
 80043d8:	bfa8      	it	ge
 80043da:	f8c8 3000 	strge.w	r3, [r8]
 80043de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80043e2:	4b99      	ldr	r3, [pc, #612]	; (8004648 <_dtoa_r+0x2d0>)
 80043e4:	bfb8      	it	lt
 80043e6:	f8c8 2000 	strlt.w	r2, [r8]
 80043ea:	ea33 0309 	bics.w	r3, r3, r9
 80043ee:	d119      	bne.n	8004424 <_dtoa_r+0xac>
 80043f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80043f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043fc:	4333      	orrs	r3, r6
 80043fe:	f000 857f 	beq.w	8004f00 <_dtoa_r+0xb88>
 8004402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004404:	b953      	cbnz	r3, 800441c <_dtoa_r+0xa4>
 8004406:	4b91      	ldr	r3, [pc, #580]	; (800464c <_dtoa_r+0x2d4>)
 8004408:	e022      	b.n	8004450 <_dtoa_r+0xd8>
 800440a:	4b91      	ldr	r3, [pc, #580]	; (8004650 <_dtoa_r+0x2d8>)
 800440c:	9303      	str	r3, [sp, #12]
 800440e:	3308      	adds	r3, #8
 8004410:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	9803      	ldr	r0, [sp, #12]
 8004416:	b019      	add	sp, #100	; 0x64
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	4b8b      	ldr	r3, [pc, #556]	; (800464c <_dtoa_r+0x2d4>)
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	3303      	adds	r3, #3
 8004422:	e7f5      	b.n	8004410 <_dtoa_r+0x98>
 8004424:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004428:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800442c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004430:	2200      	movs	r2, #0
 8004432:	2300      	movs	r3, #0
 8004434:	f7fc fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8004438:	4680      	mov	r8, r0
 800443a:	b158      	cbz	r0, 8004454 <_dtoa_r+0xdc>
 800443c:	2301      	movs	r3, #1
 800443e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8558 	beq.w	8004efa <_dtoa_r+0xb82>
 800444a:	4882      	ldr	r0, [pc, #520]	; (8004654 <_dtoa_r+0x2dc>)
 800444c:	6018      	str	r0, [r3, #0]
 800444e:	1e43      	subs	r3, r0, #1
 8004450:	9303      	str	r3, [sp, #12]
 8004452:	e7df      	b.n	8004414 <_dtoa_r+0x9c>
 8004454:	ab16      	add	r3, sp, #88	; 0x58
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	ab17      	add	r3, sp, #92	; 0x5c
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4628      	mov	r0, r5
 800445e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004462:	f001 f8c5 	bl	80055f0 <__d2b>
 8004466:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800446a:	4683      	mov	fp, r0
 800446c:	2c00      	cmp	r4, #0
 800446e:	d07f      	beq.n	8004570 <_dtoa_r+0x1f8>
 8004470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004476:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800447a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004482:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004486:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800448a:	2200      	movs	r2, #0
 800448c:	4b72      	ldr	r3, [pc, #456]	; (8004658 <_dtoa_r+0x2e0>)
 800448e:	f7fb fe6b 	bl	8000168 <__aeabi_dsub>
 8004492:	a365      	add	r3, pc, #404	; (adr r3, 8004628 <_dtoa_r+0x2b0>)
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f7fc f81e 	bl	80004d8 <__aeabi_dmul>
 800449c:	a364      	add	r3, pc, #400	; (adr r3, 8004630 <_dtoa_r+0x2b8>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fb fe63 	bl	800016c <__adddf3>
 80044a6:	4606      	mov	r6, r0
 80044a8:	4620      	mov	r0, r4
 80044aa:	460f      	mov	r7, r1
 80044ac:	f7fb ffaa 	bl	8000404 <__aeabi_i2d>
 80044b0:	a361      	add	r3, pc, #388	; (adr r3, 8004638 <_dtoa_r+0x2c0>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f7fc f80f 	bl	80004d8 <__aeabi_dmul>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4630      	mov	r0, r6
 80044c0:	4639      	mov	r1, r7
 80044c2:	f7fb fe53 	bl	800016c <__adddf3>
 80044c6:	4606      	mov	r6, r0
 80044c8:	460f      	mov	r7, r1
 80044ca:	f7fc fab5 	bl	8000a38 <__aeabi_d2iz>
 80044ce:	2200      	movs	r2, #0
 80044d0:	4682      	mov	sl, r0
 80044d2:	2300      	movs	r3, #0
 80044d4:	4630      	mov	r0, r6
 80044d6:	4639      	mov	r1, r7
 80044d8:	f7fc fa70 	bl	80009bc <__aeabi_dcmplt>
 80044dc:	b148      	cbz	r0, 80044f2 <_dtoa_r+0x17a>
 80044de:	4650      	mov	r0, sl
 80044e0:	f7fb ff90 	bl	8000404 <__aeabi_i2d>
 80044e4:	4632      	mov	r2, r6
 80044e6:	463b      	mov	r3, r7
 80044e8:	f7fc fa5e 	bl	80009a8 <__aeabi_dcmpeq>
 80044ec:	b908      	cbnz	r0, 80044f2 <_dtoa_r+0x17a>
 80044ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044f2:	f1ba 0f16 	cmp.w	sl, #22
 80044f6:	d858      	bhi.n	80045aa <_dtoa_r+0x232>
 80044f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044fc:	4b57      	ldr	r3, [pc, #348]	; (800465c <_dtoa_r+0x2e4>)
 80044fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f7fc fa59 	bl	80009bc <__aeabi_dcmplt>
 800450a:	2800      	cmp	r0, #0
 800450c:	d04f      	beq.n	80045ae <_dtoa_r+0x236>
 800450e:	2300      	movs	r3, #0
 8004510:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004514:	930f      	str	r3, [sp, #60]	; 0x3c
 8004516:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004518:	1b1c      	subs	r4, r3, r4
 800451a:	1e63      	subs	r3, r4, #1
 800451c:	9309      	str	r3, [sp, #36]	; 0x24
 800451e:	bf49      	itett	mi
 8004520:	f1c4 0301 	rsbmi	r3, r4, #1
 8004524:	2300      	movpl	r3, #0
 8004526:	9306      	strmi	r3, [sp, #24]
 8004528:	2300      	movmi	r3, #0
 800452a:	bf54      	ite	pl
 800452c:	9306      	strpl	r3, [sp, #24]
 800452e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004530:	f1ba 0f00 	cmp.w	sl, #0
 8004534:	db3d      	blt.n	80045b2 <_dtoa_r+0x23a>
 8004536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004538:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800453c:	4453      	add	r3, sl
 800453e:	9309      	str	r3, [sp, #36]	; 0x24
 8004540:	2300      	movs	r3, #0
 8004542:	930a      	str	r3, [sp, #40]	; 0x28
 8004544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004546:	2b09      	cmp	r3, #9
 8004548:	f200 808c 	bhi.w	8004664 <_dtoa_r+0x2ec>
 800454c:	2b05      	cmp	r3, #5
 800454e:	bfc4      	itt	gt
 8004550:	3b04      	subgt	r3, #4
 8004552:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004556:	bfc8      	it	gt
 8004558:	2400      	movgt	r4, #0
 800455a:	f1a3 0302 	sub.w	r3, r3, #2
 800455e:	bfd8      	it	le
 8004560:	2401      	movle	r4, #1
 8004562:	2b03      	cmp	r3, #3
 8004564:	f200 808a 	bhi.w	800467c <_dtoa_r+0x304>
 8004568:	e8df f003 	tbb	[pc, r3]
 800456c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004570:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004574:	441c      	add	r4, r3
 8004576:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800457a:	2b20      	cmp	r3, #32
 800457c:	bfc3      	ittte	gt
 800457e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004582:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004586:	fa09 f303 	lslgt.w	r3, r9, r3
 800458a:	f1c3 0320 	rsble	r3, r3, #32
 800458e:	bfc6      	itte	gt
 8004590:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004594:	4318      	orrgt	r0, r3
 8004596:	fa06 f003 	lslle.w	r0, r6, r3
 800459a:	f7fb ff23 	bl	80003e4 <__aeabi_ui2d>
 800459e:	2301      	movs	r3, #1
 80045a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80045a4:	3c01      	subs	r4, #1
 80045a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80045a8:	e76f      	b.n	800448a <_dtoa_r+0x112>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e7b2      	b.n	8004514 <_dtoa_r+0x19c>
 80045ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80045b0:	e7b1      	b.n	8004516 <_dtoa_r+0x19e>
 80045b2:	9b06      	ldr	r3, [sp, #24]
 80045b4:	eba3 030a 	sub.w	r3, r3, sl
 80045b8:	9306      	str	r3, [sp, #24]
 80045ba:	f1ca 0300 	rsb	r3, sl, #0
 80045be:	930a      	str	r3, [sp, #40]	; 0x28
 80045c0:	2300      	movs	r3, #0
 80045c2:	930e      	str	r3, [sp, #56]	; 0x38
 80045c4:	e7be      	b.n	8004544 <_dtoa_r+0x1cc>
 80045c6:	2300      	movs	r3, #0
 80045c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dc58      	bgt.n	8004682 <_dtoa_r+0x30a>
 80045d0:	f04f 0901 	mov.w	r9, #1
 80045d4:	464b      	mov	r3, r9
 80045d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80045da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80045de:	2200      	movs	r2, #0
 80045e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80045e2:	6042      	str	r2, [r0, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	f102 0614 	add.w	r6, r2, #20
 80045ea:	429e      	cmp	r6, r3
 80045ec:	6841      	ldr	r1, [r0, #4]
 80045ee:	d94e      	bls.n	800468e <_dtoa_r+0x316>
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 fcd7 	bl	8004fa4 <_Balloc>
 80045f6:	9003      	str	r0, [sp, #12]
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d14c      	bne.n	8004696 <_dtoa_r+0x31e>
 80045fc:	4602      	mov	r2, r0
 80045fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <_dtoa_r+0x2e8>)
 8004604:	e6cc      	b.n	80043a0 <_dtoa_r+0x28>
 8004606:	2301      	movs	r3, #1
 8004608:	e7de      	b.n	80045c8 <_dtoa_r+0x250>
 800460a:	2300      	movs	r3, #0
 800460c:	930b      	str	r3, [sp, #44]	; 0x2c
 800460e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004610:	eb0a 0903 	add.w	r9, sl, r3
 8004614:	f109 0301 	add.w	r3, r9, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	9308      	str	r3, [sp, #32]
 800461c:	bfb8      	it	lt
 800461e:	2301      	movlt	r3, #1
 8004620:	e7dd      	b.n	80045de <_dtoa_r+0x266>
 8004622:	2301      	movs	r3, #1
 8004624:	e7f2      	b.n	800460c <_dtoa_r+0x294>
 8004626:	bf00      	nop
 8004628:	636f4361 	.word	0x636f4361
 800462c:	3fd287a7 	.word	0x3fd287a7
 8004630:	8b60c8b3 	.word	0x8b60c8b3
 8004634:	3fc68a28 	.word	0x3fc68a28
 8004638:	509f79fb 	.word	0x509f79fb
 800463c:	3fd34413 	.word	0x3fd34413
 8004640:	080067ad 	.word	0x080067ad
 8004644:	080067c4 	.word	0x080067c4
 8004648:	7ff00000 	.word	0x7ff00000
 800464c:	080067a9 	.word	0x080067a9
 8004650:	080067a0 	.word	0x080067a0
 8004654:	0800677d 	.word	0x0800677d
 8004658:	3ff80000 	.word	0x3ff80000
 800465c:	080068b8 	.word	0x080068b8
 8004660:	0800681f 	.word	0x0800681f
 8004664:	2401      	movs	r4, #1
 8004666:	2300      	movs	r3, #0
 8004668:	940b      	str	r4, [sp, #44]	; 0x2c
 800466a:	9322      	str	r3, [sp, #136]	; 0x88
 800466c:	f04f 39ff 	mov.w	r9, #4294967295
 8004670:	2200      	movs	r2, #0
 8004672:	2312      	movs	r3, #18
 8004674:	f8cd 9020 	str.w	r9, [sp, #32]
 8004678:	9223      	str	r2, [sp, #140]	; 0x8c
 800467a:	e7b0      	b.n	80045de <_dtoa_r+0x266>
 800467c:	2301      	movs	r3, #1
 800467e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004680:	e7f4      	b.n	800466c <_dtoa_r+0x2f4>
 8004682:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004686:	464b      	mov	r3, r9
 8004688:	f8cd 9020 	str.w	r9, [sp, #32]
 800468c:	e7a7      	b.n	80045de <_dtoa_r+0x266>
 800468e:	3101      	adds	r1, #1
 8004690:	6041      	str	r1, [r0, #4]
 8004692:	0052      	lsls	r2, r2, #1
 8004694:	e7a7      	b.n	80045e6 <_dtoa_r+0x26e>
 8004696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004698:	9a03      	ldr	r2, [sp, #12]
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	9b08      	ldr	r3, [sp, #32]
 800469e:	2b0e      	cmp	r3, #14
 80046a0:	f200 80a8 	bhi.w	80047f4 <_dtoa_r+0x47c>
 80046a4:	2c00      	cmp	r4, #0
 80046a6:	f000 80a5 	beq.w	80047f4 <_dtoa_r+0x47c>
 80046aa:	f1ba 0f00 	cmp.w	sl, #0
 80046ae:	dd34      	ble.n	800471a <_dtoa_r+0x3a2>
 80046b0:	4a9a      	ldr	r2, [pc, #616]	; (800491c <_dtoa_r+0x5a4>)
 80046b2:	f00a 030f 	and.w	r3, sl, #15
 80046b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80046be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80046c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80046ca:	d016      	beq.n	80046fa <_dtoa_r+0x382>
 80046cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046d0:	4b93      	ldr	r3, [pc, #588]	; (8004920 <_dtoa_r+0x5a8>)
 80046d2:	2703      	movs	r7, #3
 80046d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046d8:	f7fc f828 	bl	800072c <__aeabi_ddiv>
 80046dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046e0:	f004 040f 	and.w	r4, r4, #15
 80046e4:	4e8e      	ldr	r6, [pc, #568]	; (8004920 <_dtoa_r+0x5a8>)
 80046e6:	b954      	cbnz	r4, 80046fe <_dtoa_r+0x386>
 80046e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046f0:	f7fc f81c 	bl	800072c <__aeabi_ddiv>
 80046f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046f8:	e029      	b.n	800474e <_dtoa_r+0x3d6>
 80046fa:	2702      	movs	r7, #2
 80046fc:	e7f2      	b.n	80046e4 <_dtoa_r+0x36c>
 80046fe:	07e1      	lsls	r1, r4, #31
 8004700:	d508      	bpl.n	8004714 <_dtoa_r+0x39c>
 8004702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800470a:	f7fb fee5 	bl	80004d8 <__aeabi_dmul>
 800470e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004712:	3701      	adds	r7, #1
 8004714:	1064      	asrs	r4, r4, #1
 8004716:	3608      	adds	r6, #8
 8004718:	e7e5      	b.n	80046e6 <_dtoa_r+0x36e>
 800471a:	f000 80a5 	beq.w	8004868 <_dtoa_r+0x4f0>
 800471e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004722:	f1ca 0400 	rsb	r4, sl, #0
 8004726:	4b7d      	ldr	r3, [pc, #500]	; (800491c <_dtoa_r+0x5a4>)
 8004728:	f004 020f 	and.w	r2, r4, #15
 800472c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f7fb fed0 	bl	80004d8 <__aeabi_dmul>
 8004738:	2702      	movs	r7, #2
 800473a:	2300      	movs	r3, #0
 800473c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004740:	4e77      	ldr	r6, [pc, #476]	; (8004920 <_dtoa_r+0x5a8>)
 8004742:	1124      	asrs	r4, r4, #4
 8004744:	2c00      	cmp	r4, #0
 8004746:	f040 8084 	bne.w	8004852 <_dtoa_r+0x4da>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1d2      	bne.n	80046f4 <_dtoa_r+0x37c>
 800474e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 808b 	beq.w	800486c <_dtoa_r+0x4f4>
 8004756:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800475a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800475e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004762:	2200      	movs	r2, #0
 8004764:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <_dtoa_r+0x5ac>)
 8004766:	f7fc f929 	bl	80009bc <__aeabi_dcmplt>
 800476a:	2800      	cmp	r0, #0
 800476c:	d07e      	beq.n	800486c <_dtoa_r+0x4f4>
 800476e:	9b08      	ldr	r3, [sp, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d07b      	beq.n	800486c <_dtoa_r+0x4f4>
 8004774:	f1b9 0f00 	cmp.w	r9, #0
 8004778:	dd38      	ble.n	80047ec <_dtoa_r+0x474>
 800477a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800477e:	2200      	movs	r2, #0
 8004780:	4b69      	ldr	r3, [pc, #420]	; (8004928 <_dtoa_r+0x5b0>)
 8004782:	f7fb fea9 	bl	80004d8 <__aeabi_dmul>
 8004786:	464c      	mov	r4, r9
 8004788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800478c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004790:	3701      	adds	r7, #1
 8004792:	4638      	mov	r0, r7
 8004794:	f7fb fe36 	bl	8000404 <__aeabi_i2d>
 8004798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800479c:	f7fb fe9c 	bl	80004d8 <__aeabi_dmul>
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <_dtoa_r+0x5b4>)
 80047a4:	f7fb fce2 	bl	800016c <__adddf3>
 80047a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80047ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047b0:	9611      	str	r6, [sp, #68]	; 0x44
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	d15d      	bne.n	8004872 <_dtoa_r+0x4fa>
 80047b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047ba:	2200      	movs	r2, #0
 80047bc:	4b5c      	ldr	r3, [pc, #368]	; (8004930 <_dtoa_r+0x5b8>)
 80047be:	f7fb fcd3 	bl	8000168 <__aeabi_dsub>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047ca:	4633      	mov	r3, r6
 80047cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047ce:	f7fc f913 	bl	80009f8 <__aeabi_dcmpgt>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f040 829c 	bne.w	8004d10 <_dtoa_r+0x998>
 80047d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80047e2:	f7fc f8eb 	bl	80009bc <__aeabi_dcmplt>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f040 8290 	bne.w	8004d0c <_dtoa_r+0x994>
 80047ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80047f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f2c0 8152 	blt.w	8004aa0 <_dtoa_r+0x728>
 80047fc:	f1ba 0f0e 	cmp.w	sl, #14
 8004800:	f300 814e 	bgt.w	8004aa0 <_dtoa_r+0x728>
 8004804:	4b45      	ldr	r3, [pc, #276]	; (800491c <_dtoa_r+0x5a4>)
 8004806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800480a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800480e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004814:	2b00      	cmp	r3, #0
 8004816:	f280 80db 	bge.w	80049d0 <_dtoa_r+0x658>
 800481a:	9b08      	ldr	r3, [sp, #32]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f300 80d7 	bgt.w	80049d0 <_dtoa_r+0x658>
 8004822:	f040 8272 	bne.w	8004d0a <_dtoa_r+0x992>
 8004826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800482a:	2200      	movs	r2, #0
 800482c:	4b40      	ldr	r3, [pc, #256]	; (8004930 <_dtoa_r+0x5b8>)
 800482e:	f7fb fe53 	bl	80004d8 <__aeabi_dmul>
 8004832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004836:	f7fc f8d5 	bl	80009e4 <__aeabi_dcmpge>
 800483a:	9c08      	ldr	r4, [sp, #32]
 800483c:	4626      	mov	r6, r4
 800483e:	2800      	cmp	r0, #0
 8004840:	f040 8248 	bne.w	8004cd4 <_dtoa_r+0x95c>
 8004844:	2331      	movs	r3, #49	; 0x31
 8004846:	9f03      	ldr	r7, [sp, #12]
 8004848:	f10a 0a01 	add.w	sl, sl, #1
 800484c:	f807 3b01 	strb.w	r3, [r7], #1
 8004850:	e244      	b.n	8004cdc <_dtoa_r+0x964>
 8004852:	07e2      	lsls	r2, r4, #31
 8004854:	d505      	bpl.n	8004862 <_dtoa_r+0x4ea>
 8004856:	e9d6 2300 	ldrd	r2, r3, [r6]
 800485a:	f7fb fe3d 	bl	80004d8 <__aeabi_dmul>
 800485e:	2301      	movs	r3, #1
 8004860:	3701      	adds	r7, #1
 8004862:	1064      	asrs	r4, r4, #1
 8004864:	3608      	adds	r6, #8
 8004866:	e76d      	b.n	8004744 <_dtoa_r+0x3cc>
 8004868:	2702      	movs	r7, #2
 800486a:	e770      	b.n	800474e <_dtoa_r+0x3d6>
 800486c:	46d0      	mov	r8, sl
 800486e:	9c08      	ldr	r4, [sp, #32]
 8004870:	e78f      	b.n	8004792 <_dtoa_r+0x41a>
 8004872:	9903      	ldr	r1, [sp, #12]
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <_dtoa_r+0x5a4>)
 8004876:	4421      	add	r1, r4
 8004878:	9112      	str	r1, [sp, #72]	; 0x48
 800487a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800487c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004880:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004884:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004888:	2900      	cmp	r1, #0
 800488a:	d055      	beq.n	8004938 <_dtoa_r+0x5c0>
 800488c:	2000      	movs	r0, #0
 800488e:	4929      	ldr	r1, [pc, #164]	; (8004934 <_dtoa_r+0x5bc>)
 8004890:	f7fb ff4c 	bl	800072c <__aeabi_ddiv>
 8004894:	463b      	mov	r3, r7
 8004896:	4632      	mov	r2, r6
 8004898:	f7fb fc66 	bl	8000168 <__aeabi_dsub>
 800489c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048a0:	9f03      	ldr	r7, [sp, #12]
 80048a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048a6:	f7fc f8c7 	bl	8000a38 <__aeabi_d2iz>
 80048aa:	4604      	mov	r4, r0
 80048ac:	f7fb fdaa 	bl	8000404 <__aeabi_i2d>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048b8:	f7fb fc56 	bl	8000168 <__aeabi_dsub>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	3430      	adds	r4, #48	; 0x30
 80048c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048ca:	f807 4b01 	strb.w	r4, [r7], #1
 80048ce:	f7fc f875 	bl	80009bc <__aeabi_dcmplt>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d174      	bne.n	80049c0 <_dtoa_r+0x648>
 80048d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048da:	2000      	movs	r0, #0
 80048dc:	4911      	ldr	r1, [pc, #68]	; (8004924 <_dtoa_r+0x5ac>)
 80048de:	f7fb fc43 	bl	8000168 <__aeabi_dsub>
 80048e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048e6:	f7fc f869 	bl	80009bc <__aeabi_dcmplt>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f040 80b7 	bne.w	8004a5e <_dtoa_r+0x6e6>
 80048f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048f2:	429f      	cmp	r7, r3
 80048f4:	f43f af7a 	beq.w	80047ec <_dtoa_r+0x474>
 80048f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048fc:	2200      	movs	r2, #0
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <_dtoa_r+0x5b0>)
 8004900:	f7fb fdea 	bl	80004d8 <__aeabi_dmul>
 8004904:	2200      	movs	r2, #0
 8004906:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800490a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <_dtoa_r+0x5b0>)
 8004910:	f7fb fde2 	bl	80004d8 <__aeabi_dmul>
 8004914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004918:	e7c3      	b.n	80048a2 <_dtoa_r+0x52a>
 800491a:	bf00      	nop
 800491c:	080068b8 	.word	0x080068b8
 8004920:	08006890 	.word	0x08006890
 8004924:	3ff00000 	.word	0x3ff00000
 8004928:	40240000 	.word	0x40240000
 800492c:	401c0000 	.word	0x401c0000
 8004930:	40140000 	.word	0x40140000
 8004934:	3fe00000 	.word	0x3fe00000
 8004938:	4630      	mov	r0, r6
 800493a:	4639      	mov	r1, r7
 800493c:	f7fb fdcc 	bl	80004d8 <__aeabi_dmul>
 8004940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004942:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004946:	9c03      	ldr	r4, [sp, #12]
 8004948:	9314      	str	r3, [sp, #80]	; 0x50
 800494a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800494e:	f7fc f873 	bl	8000a38 <__aeabi_d2iz>
 8004952:	9015      	str	r0, [sp, #84]	; 0x54
 8004954:	f7fb fd56 	bl	8000404 <__aeabi_i2d>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004960:	f7fb fc02 	bl	8000168 <__aeabi_dsub>
 8004964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004966:	4606      	mov	r6, r0
 8004968:	3330      	adds	r3, #48	; 0x30
 800496a:	f804 3b01 	strb.w	r3, [r4], #1
 800496e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004970:	460f      	mov	r7, r1
 8004972:	429c      	cmp	r4, r3
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	d124      	bne.n	80049c4 <_dtoa_r+0x64c>
 800497a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800497e:	4bb0      	ldr	r3, [pc, #704]	; (8004c40 <_dtoa_r+0x8c8>)
 8004980:	f7fb fbf4 	bl	800016c <__adddf3>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4630      	mov	r0, r6
 800498a:	4639      	mov	r1, r7
 800498c:	f7fc f834 	bl	80009f8 <__aeabi_dcmpgt>
 8004990:	2800      	cmp	r0, #0
 8004992:	d163      	bne.n	8004a5c <_dtoa_r+0x6e4>
 8004994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004998:	2000      	movs	r0, #0
 800499a:	49a9      	ldr	r1, [pc, #676]	; (8004c40 <_dtoa_r+0x8c8>)
 800499c:	f7fb fbe4 	bl	8000168 <__aeabi_dsub>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4630      	mov	r0, r6
 80049a6:	4639      	mov	r1, r7
 80049a8:	f7fc f808 	bl	80009bc <__aeabi_dcmplt>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f43f af1d 	beq.w	80047ec <_dtoa_r+0x474>
 80049b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80049b4:	1e7b      	subs	r3, r7, #1
 80049b6:	9314      	str	r3, [sp, #80]	; 0x50
 80049b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80049bc:	2b30      	cmp	r3, #48	; 0x30
 80049be:	d0f8      	beq.n	80049b2 <_dtoa_r+0x63a>
 80049c0:	46c2      	mov	sl, r8
 80049c2:	e03b      	b.n	8004a3c <_dtoa_r+0x6c4>
 80049c4:	4b9f      	ldr	r3, [pc, #636]	; (8004c44 <_dtoa_r+0x8cc>)
 80049c6:	f7fb fd87 	bl	80004d8 <__aeabi_dmul>
 80049ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049ce:	e7bc      	b.n	800494a <_dtoa_r+0x5d2>
 80049d0:	9f03      	ldr	r7, [sp, #12]
 80049d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80049d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fb fea5 	bl	800072c <__aeabi_ddiv>
 80049e2:	f7fc f829 	bl	8000a38 <__aeabi_d2iz>
 80049e6:	4604      	mov	r4, r0
 80049e8:	f7fb fd0c 	bl	8000404 <__aeabi_i2d>
 80049ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049f0:	f7fb fd72 	bl	80004d8 <__aeabi_dmul>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4640      	mov	r0, r8
 80049fa:	4649      	mov	r1, r9
 80049fc:	f7fb fbb4 	bl	8000168 <__aeabi_dsub>
 8004a00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004a04:	f807 6b01 	strb.w	r6, [r7], #1
 8004a08:	9e03      	ldr	r6, [sp, #12]
 8004a0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004a0e:	1bbe      	subs	r6, r7, r6
 8004a10:	45b4      	cmp	ip, r6
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	d136      	bne.n	8004a86 <_dtoa_r+0x70e>
 8004a18:	f7fb fba8 	bl	800016c <__adddf3>
 8004a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a20:	4680      	mov	r8, r0
 8004a22:	4689      	mov	r9, r1
 8004a24:	f7fb ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 8004a28:	bb58      	cbnz	r0, 8004a82 <_dtoa_r+0x70a>
 8004a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8004a36:	b108      	cbz	r0, 8004a3c <_dtoa_r+0x6c4>
 8004a38:	07e1      	lsls	r1, r4, #31
 8004a3a:	d422      	bmi.n	8004a82 <_dtoa_r+0x70a>
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	4659      	mov	r1, fp
 8004a40:	f000 faf0 	bl	8005024 <_Bfree>
 8004a44:	2300      	movs	r3, #0
 8004a46:	703b      	strb	r3, [r7, #0]
 8004a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004a4a:	f10a 0001 	add.w	r0, sl, #1
 8004a4e:	6018      	str	r0, [r3, #0]
 8004a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f43f acde 	beq.w	8004414 <_dtoa_r+0x9c>
 8004a58:	601f      	str	r7, [r3, #0]
 8004a5a:	e4db      	b.n	8004414 <_dtoa_r+0x9c>
 8004a5c:	4627      	mov	r7, r4
 8004a5e:	463b      	mov	r3, r7
 8004a60:	461f      	mov	r7, r3
 8004a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a66:	2a39      	cmp	r2, #57	; 0x39
 8004a68:	d107      	bne.n	8004a7a <_dtoa_r+0x702>
 8004a6a:	9a03      	ldr	r2, [sp, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1f7      	bne.n	8004a60 <_dtoa_r+0x6e8>
 8004a70:	2230      	movs	r2, #48	; 0x30
 8004a72:	9903      	ldr	r1, [sp, #12]
 8004a74:	f108 0801 	add.w	r8, r8, #1
 8004a78:	700a      	strb	r2, [r1, #0]
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	3201      	adds	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e79e      	b.n	80049c0 <_dtoa_r+0x648>
 8004a82:	46d0      	mov	r8, sl
 8004a84:	e7eb      	b.n	8004a5e <_dtoa_r+0x6e6>
 8004a86:	2200      	movs	r2, #0
 8004a88:	4b6e      	ldr	r3, [pc, #440]	; (8004c44 <_dtoa_r+0x8cc>)
 8004a8a:	f7fb fd25 	bl	80004d8 <__aeabi_dmul>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2300      	movs	r3, #0
 8004a92:	4680      	mov	r8, r0
 8004a94:	4689      	mov	r9, r1
 8004a96:	f7fb ff87 	bl	80009a8 <__aeabi_dcmpeq>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d09b      	beq.n	80049d6 <_dtoa_r+0x65e>
 8004a9e:	e7cd      	b.n	8004a3c <_dtoa_r+0x6c4>
 8004aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	f000 80d0 	beq.w	8004c48 <_dtoa_r+0x8d0>
 8004aa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004aaa:	2a01      	cmp	r2, #1
 8004aac:	f300 80ae 	bgt.w	8004c0c <_dtoa_r+0x894>
 8004ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	f000 80a6 	beq.w	8004c04 <_dtoa_r+0x88c>
 8004ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004abc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004abe:	9f06      	ldr	r7, [sp, #24]
 8004ac0:	9a06      	ldr	r2, [sp, #24]
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	441a      	add	r2, r3
 8004ac6:	9206      	str	r2, [sp, #24]
 8004ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aca:	4628      	mov	r0, r5
 8004acc:	441a      	add	r2, r3
 8004ace:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad0:	f000 fb5e 	bl	8005190 <__i2b>
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	dd0c      	ble.n	8004af4 <_dtoa_r+0x77c>
 8004ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	dd09      	ble.n	8004af4 <_dtoa_r+0x77c>
 8004ae0:	42bb      	cmp	r3, r7
 8004ae2:	bfa8      	it	ge
 8004ae4:	463b      	movge	r3, r7
 8004ae6:	9a06      	ldr	r2, [sp, #24]
 8004ae8:	1aff      	subs	r7, r7, r3
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	9206      	str	r2, [sp, #24]
 8004aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af6:	b1f3      	cbz	r3, 8004b36 <_dtoa_r+0x7be>
 8004af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80a8 	beq.w	8004c50 <_dtoa_r+0x8d8>
 8004b00:	2c00      	cmp	r4, #0
 8004b02:	dd10      	ble.n	8004b26 <_dtoa_r+0x7ae>
 8004b04:	4631      	mov	r1, r6
 8004b06:	4622      	mov	r2, r4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 fbff 	bl	800530c <__pow5mult>
 8004b0e:	465a      	mov	r2, fp
 8004b10:	4601      	mov	r1, r0
 8004b12:	4606      	mov	r6, r0
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 fb51 	bl	80051bc <__multiply>
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 fa80 	bl	8005024 <_Bfree>
 8004b24:	46c3      	mov	fp, r8
 8004b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b28:	1b1a      	subs	r2, r3, r4
 8004b2a:	d004      	beq.n	8004b36 <_dtoa_r+0x7be>
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 fbec 	bl	800530c <__pow5mult>
 8004b34:	4683      	mov	fp, r0
 8004b36:	2101      	movs	r1, #1
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 fb29 	bl	8005190 <__i2b>
 8004b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b40:	4604      	mov	r4, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f340 8086 	ble.w	8004c54 <_dtoa_r+0x8dc>
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 fbdd 	bl	800530c <__pow5mult>
 8004b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b54:	4604      	mov	r4, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	dd7f      	ble.n	8004c5a <_dtoa_r+0x8e2>
 8004b5a:	f04f 0800 	mov.w	r8, #0
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b64:	6918      	ldr	r0, [r3, #16]
 8004b66:	f000 fac5 	bl	80050f4 <__hi0bits>
 8004b6a:	f1c0 0020 	rsb	r0, r0, #32
 8004b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b70:	4418      	add	r0, r3
 8004b72:	f010 001f 	ands.w	r0, r0, #31
 8004b76:	f000 8092 	beq.w	8004c9e <_dtoa_r+0x926>
 8004b7a:	f1c0 0320 	rsb	r3, r0, #32
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	f340 808a 	ble.w	8004c98 <_dtoa_r+0x920>
 8004b84:	f1c0 001c 	rsb	r0, r0, #28
 8004b88:	9b06      	ldr	r3, [sp, #24]
 8004b8a:	4407      	add	r7, r0
 8004b8c:	4403      	add	r3, r0
 8004b8e:	9306      	str	r3, [sp, #24]
 8004b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b92:	4403      	add	r3, r0
 8004b94:	9309      	str	r3, [sp, #36]	; 0x24
 8004b96:	9b06      	ldr	r3, [sp, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dd05      	ble.n	8004ba8 <_dtoa_r+0x830>
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 fc0d 	bl	80053c0 <__lshift>
 8004ba6:	4683      	mov	fp, r0
 8004ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dd05      	ble.n	8004bba <_dtoa_r+0x842>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 fc04 	bl	80053c0 <__lshift>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d070      	beq.n	8004ca2 <_dtoa_r+0x92a>
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4658      	mov	r0, fp
 8004bc4:	f000 fc6c 	bl	80054a0 <__mcmp>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	da6a      	bge.n	8004ca2 <_dtoa_r+0x92a>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4659      	mov	r1, fp
 8004bd0:	220a      	movs	r2, #10
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 fa48 	bl	8005068 <__multadd>
 8004bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bda:	4683      	mov	fp, r0
 8004bdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8194 	beq.w	8004f0e <_dtoa_r+0xb96>
 8004be6:	4631      	mov	r1, r6
 8004be8:	2300      	movs	r3, #0
 8004bea:	220a      	movs	r2, #10
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 fa3b 	bl	8005068 <__multadd>
 8004bf2:	f1b9 0f00 	cmp.w	r9, #0
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	f300 8093 	bgt.w	8004d22 <_dtoa_r+0x9aa>
 8004bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	dc57      	bgt.n	8004cb2 <_dtoa_r+0x93a>
 8004c02:	e08e      	b.n	8004d22 <_dtoa_r+0x9aa>
 8004c04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c0a:	e757      	b.n	8004abc <_dtoa_r+0x744>
 8004c0c:	9b08      	ldr	r3, [sp, #32]
 8004c0e:	1e5c      	subs	r4, r3, #1
 8004c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c12:	42a3      	cmp	r3, r4
 8004c14:	bfb7      	itett	lt
 8004c16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c18:	1b1c      	subge	r4, r3, r4
 8004c1a:	1ae2      	sublt	r2, r4, r3
 8004c1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004c1e:	bfbe      	ittt	lt
 8004c20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004c22:	189b      	addlt	r3, r3, r2
 8004c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004c26:	9b08      	ldr	r3, [sp, #32]
 8004c28:	bfb8      	it	lt
 8004c2a:	2400      	movlt	r4, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bfbb      	ittet	lt
 8004c30:	9b06      	ldrlt	r3, [sp, #24]
 8004c32:	9a08      	ldrlt	r2, [sp, #32]
 8004c34:	9f06      	ldrge	r7, [sp, #24]
 8004c36:	1a9f      	sublt	r7, r3, r2
 8004c38:	bfac      	ite	ge
 8004c3a:	9b08      	ldrge	r3, [sp, #32]
 8004c3c:	2300      	movlt	r3, #0
 8004c3e:	e73f      	b.n	8004ac0 <_dtoa_r+0x748>
 8004c40:	3fe00000 	.word	0x3fe00000
 8004c44:	40240000 	.word	0x40240000
 8004c48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c4a:	9f06      	ldr	r7, [sp, #24]
 8004c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004c4e:	e742      	b.n	8004ad6 <_dtoa_r+0x75e>
 8004c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c52:	e76b      	b.n	8004b2c <_dtoa_r+0x7b4>
 8004c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	dc19      	bgt.n	8004c8e <_dtoa_r+0x916>
 8004c5a:	9b04      	ldr	r3, [sp, #16]
 8004c5c:	b9bb      	cbnz	r3, 8004c8e <_dtoa_r+0x916>
 8004c5e:	9b05      	ldr	r3, [sp, #20]
 8004c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c64:	b99b      	cbnz	r3, 8004c8e <_dtoa_r+0x916>
 8004c66:	9b05      	ldr	r3, [sp, #20]
 8004c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	0d1b      	lsrs	r3, r3, #20
 8004c6e:	051b      	lsls	r3, r3, #20
 8004c70:	b183      	cbz	r3, 8004c94 <_dtoa_r+0x91c>
 8004c72:	f04f 0801 	mov.w	r8, #1
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	9306      	str	r3, [sp, #24]
 8004c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7e:	3301      	adds	r3, #1
 8004c80:	9309      	str	r3, [sp, #36]	; 0x24
 8004c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f47f af6a 	bne.w	8004b5e <_dtoa_r+0x7e6>
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	e76f      	b.n	8004b6e <_dtoa_r+0x7f6>
 8004c8e:	f04f 0800 	mov.w	r8, #0
 8004c92:	e7f6      	b.n	8004c82 <_dtoa_r+0x90a>
 8004c94:	4698      	mov	r8, r3
 8004c96:	e7f4      	b.n	8004c82 <_dtoa_r+0x90a>
 8004c98:	f43f af7d 	beq.w	8004b96 <_dtoa_r+0x81e>
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	301c      	adds	r0, #28
 8004ca0:	e772      	b.n	8004b88 <_dtoa_r+0x810>
 8004ca2:	9b08      	ldr	r3, [sp, #32]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc36      	bgt.n	8004d16 <_dtoa_r+0x99e>
 8004ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	dd33      	ble.n	8004d16 <_dtoa_r+0x99e>
 8004cae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cb2:	f1b9 0f00 	cmp.w	r9, #0
 8004cb6:	d10d      	bne.n	8004cd4 <_dtoa_r+0x95c>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	464b      	mov	r3, r9
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 f9d2 	bl	8005068 <__multadd>
 8004cc4:	4601      	mov	r1, r0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4658      	mov	r0, fp
 8004cca:	f000 fbe9 	bl	80054a0 <__mcmp>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f73f adb8 	bgt.w	8004844 <_dtoa_r+0x4cc>
 8004cd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cd6:	9f03      	ldr	r7, [sp, #12]
 8004cd8:	ea6f 0a03 	mvn.w	sl, r3
 8004cdc:	f04f 0800 	mov.w	r8, #0
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f99e 	bl	8005024 <_Bfree>
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	f43f aea7 	beq.w	8004a3c <_dtoa_r+0x6c4>
 8004cee:	f1b8 0f00 	cmp.w	r8, #0
 8004cf2:	d005      	beq.n	8004d00 <_dtoa_r+0x988>
 8004cf4:	45b0      	cmp	r8, r6
 8004cf6:	d003      	beq.n	8004d00 <_dtoa_r+0x988>
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 f992 	bl	8005024 <_Bfree>
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 f98e 	bl	8005024 <_Bfree>
 8004d08:	e698      	b.n	8004a3c <_dtoa_r+0x6c4>
 8004d0a:	2400      	movs	r4, #0
 8004d0c:	4626      	mov	r6, r4
 8004d0e:	e7e1      	b.n	8004cd4 <_dtoa_r+0x95c>
 8004d10:	46c2      	mov	sl, r8
 8004d12:	4626      	mov	r6, r4
 8004d14:	e596      	b.n	8004844 <_dtoa_r+0x4cc>
 8004d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80fd 	beq.w	8004f1c <_dtoa_r+0xba4>
 8004d22:	2f00      	cmp	r7, #0
 8004d24:	dd05      	ble.n	8004d32 <_dtoa_r+0x9ba>
 8004d26:	4631      	mov	r1, r6
 8004d28:	463a      	mov	r2, r7
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fb48 	bl	80053c0 <__lshift>
 8004d30:	4606      	mov	r6, r0
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	d05c      	beq.n	8004df2 <_dtoa_r+0xa7a>
 8004d38:	4628      	mov	r0, r5
 8004d3a:	6871      	ldr	r1, [r6, #4]
 8004d3c:	f000 f932 	bl	8004fa4 <_Balloc>
 8004d40:	4607      	mov	r7, r0
 8004d42:	b928      	cbnz	r0, 8004d50 <_dtoa_r+0x9d8>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d4a:	4b7f      	ldr	r3, [pc, #508]	; (8004f48 <_dtoa_r+0xbd0>)
 8004d4c:	f7ff bb28 	b.w	80043a0 <_dtoa_r+0x28>
 8004d50:	6932      	ldr	r2, [r6, #16]
 8004d52:	f106 010c 	add.w	r1, r6, #12
 8004d56:	3202      	adds	r2, #2
 8004d58:	0092      	lsls	r2, r2, #2
 8004d5a:	300c      	adds	r0, #12
 8004d5c:	f000 f914 	bl	8004f88 <memcpy>
 8004d60:	2201      	movs	r2, #1
 8004d62:	4639      	mov	r1, r7
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 fb2b 	bl	80053c0 <__lshift>
 8004d6a:	46b0      	mov	r8, r6
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	9308      	str	r3, [sp, #32]
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	444b      	add	r3, r9
 8004d78:	930a      	str	r3, [sp, #40]	; 0x28
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	9309      	str	r3, [sp, #36]	; 0x24
 8004d82:	9b08      	ldr	r3, [sp, #32]
 8004d84:	4621      	mov	r1, r4
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4658      	mov	r0, fp
 8004d8a:	9304      	str	r3, [sp, #16]
 8004d8c:	f7ff fa66 	bl	800425c <quorem>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4641      	mov	r1, r8
 8004d94:	3330      	adds	r3, #48	; 0x30
 8004d96:	9006      	str	r0, [sp, #24]
 8004d98:	4658      	mov	r0, fp
 8004d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d9c:	f000 fb80 	bl	80054a0 <__mcmp>
 8004da0:	4632      	mov	r2, r6
 8004da2:	4681      	mov	r9, r0
 8004da4:	4621      	mov	r1, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fb96 	bl	80054d8 <__mdiff>
 8004dac:	68c2      	ldr	r2, [r0, #12]
 8004dae:	4607      	mov	r7, r0
 8004db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004db2:	bb02      	cbnz	r2, 8004df6 <_dtoa_r+0xa7e>
 8004db4:	4601      	mov	r1, r0
 8004db6:	4658      	mov	r0, fp
 8004db8:	f000 fb72 	bl	80054a0 <__mcmp>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004dc8:	f000 f92c 	bl	8005024 <_Bfree>
 8004dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dd0:	9f08      	ldr	r7, [sp, #32]
 8004dd2:	ea43 0102 	orr.w	r1, r3, r2
 8004dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ddc:	d10d      	bne.n	8004dfa <_dtoa_r+0xa82>
 8004dde:	2b39      	cmp	r3, #57	; 0x39
 8004de0:	d029      	beq.n	8004e36 <_dtoa_r+0xabe>
 8004de2:	f1b9 0f00 	cmp.w	r9, #0
 8004de6:	dd01      	ble.n	8004dec <_dtoa_r+0xa74>
 8004de8:	9b06      	ldr	r3, [sp, #24]
 8004dea:	3331      	adds	r3, #49	; 0x31
 8004dec:	9a04      	ldr	r2, [sp, #16]
 8004dee:	7013      	strb	r3, [r2, #0]
 8004df0:	e776      	b.n	8004ce0 <_dtoa_r+0x968>
 8004df2:	4630      	mov	r0, r6
 8004df4:	e7b9      	b.n	8004d6a <_dtoa_r+0x9f2>
 8004df6:	2201      	movs	r2, #1
 8004df8:	e7e2      	b.n	8004dc0 <_dtoa_r+0xa48>
 8004dfa:	f1b9 0f00 	cmp.w	r9, #0
 8004dfe:	db06      	blt.n	8004e0e <_dtoa_r+0xa96>
 8004e00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004e02:	ea41 0909 	orr.w	r9, r1, r9
 8004e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e08:	ea59 0101 	orrs.w	r1, r9, r1
 8004e0c:	d120      	bne.n	8004e50 <_dtoa_r+0xad8>
 8004e0e:	2a00      	cmp	r2, #0
 8004e10:	ddec      	ble.n	8004dec <_dtoa_r+0xa74>
 8004e12:	4659      	mov	r1, fp
 8004e14:	2201      	movs	r2, #1
 8004e16:	4628      	mov	r0, r5
 8004e18:	9308      	str	r3, [sp, #32]
 8004e1a:	f000 fad1 	bl	80053c0 <__lshift>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4683      	mov	fp, r0
 8004e22:	f000 fb3d 	bl	80054a0 <__mcmp>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	dc02      	bgt.n	8004e32 <_dtoa_r+0xaba>
 8004e2c:	d1de      	bne.n	8004dec <_dtoa_r+0xa74>
 8004e2e:	07da      	lsls	r2, r3, #31
 8004e30:	d5dc      	bpl.n	8004dec <_dtoa_r+0xa74>
 8004e32:	2b39      	cmp	r3, #57	; 0x39
 8004e34:	d1d8      	bne.n	8004de8 <_dtoa_r+0xa70>
 8004e36:	2339      	movs	r3, #57	; 0x39
 8004e38:	9a04      	ldr	r2, [sp, #16]
 8004e3a:	7013      	strb	r3, [r2, #0]
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	461f      	mov	r7, r3
 8004e40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	2a39      	cmp	r2, #57	; 0x39
 8004e48:	d050      	beq.n	8004eec <_dtoa_r+0xb74>
 8004e4a:	3201      	adds	r2, #1
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e747      	b.n	8004ce0 <_dtoa_r+0x968>
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	dd03      	ble.n	8004e5c <_dtoa_r+0xae4>
 8004e54:	2b39      	cmp	r3, #57	; 0x39
 8004e56:	d0ee      	beq.n	8004e36 <_dtoa_r+0xabe>
 8004e58:	3301      	adds	r3, #1
 8004e5a:	e7c7      	b.n	8004dec <_dtoa_r+0xa74>
 8004e5c:	9a08      	ldr	r2, [sp, #32]
 8004e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e64:	428a      	cmp	r2, r1
 8004e66:	d02a      	beq.n	8004ebe <_dtoa_r+0xb46>
 8004e68:	4659      	mov	r1, fp
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	220a      	movs	r2, #10
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 f8fa 	bl	8005068 <__multadd>
 8004e74:	45b0      	cmp	r8, r6
 8004e76:	4683      	mov	fp, r0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	f04f 020a 	mov.w	r2, #10
 8004e80:	4641      	mov	r1, r8
 8004e82:	4628      	mov	r0, r5
 8004e84:	d107      	bne.n	8004e96 <_dtoa_r+0xb1e>
 8004e86:	f000 f8ef 	bl	8005068 <__multadd>
 8004e8a:	4680      	mov	r8, r0
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	9b08      	ldr	r3, [sp, #32]
 8004e90:	3301      	adds	r3, #1
 8004e92:	9308      	str	r3, [sp, #32]
 8004e94:	e775      	b.n	8004d82 <_dtoa_r+0xa0a>
 8004e96:	f000 f8e7 	bl	8005068 <__multadd>
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	220a      	movs	r2, #10
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f8e0 	bl	8005068 <__multadd>
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	e7f0      	b.n	8004e8e <_dtoa_r+0xb16>
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	bfcc      	ite	gt
 8004eb2:	464f      	movgt	r7, r9
 8004eb4:	2701      	movle	r7, #1
 8004eb6:	f04f 0800 	mov.w	r8, #0
 8004eba:	9a03      	ldr	r2, [sp, #12]
 8004ebc:	4417      	add	r7, r2
 8004ebe:	4659      	mov	r1, fp
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	9308      	str	r3, [sp, #32]
 8004ec6:	f000 fa7b 	bl	80053c0 <__lshift>
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4683      	mov	fp, r0
 8004ece:	f000 fae7 	bl	80054a0 <__mcmp>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	dcb2      	bgt.n	8004e3c <_dtoa_r+0xac4>
 8004ed6:	d102      	bne.n	8004ede <_dtoa_r+0xb66>
 8004ed8:	9b08      	ldr	r3, [sp, #32]
 8004eda:	07db      	lsls	r3, r3, #31
 8004edc:	d4ae      	bmi.n	8004e3c <_dtoa_r+0xac4>
 8004ede:	463b      	mov	r3, r7
 8004ee0:	461f      	mov	r7, r3
 8004ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ee6:	2a30      	cmp	r2, #48	; 0x30
 8004ee8:	d0fa      	beq.n	8004ee0 <_dtoa_r+0xb68>
 8004eea:	e6f9      	b.n	8004ce0 <_dtoa_r+0x968>
 8004eec:	9a03      	ldr	r2, [sp, #12]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d1a5      	bne.n	8004e3e <_dtoa_r+0xac6>
 8004ef2:	2331      	movs	r3, #49	; 0x31
 8004ef4:	f10a 0a01 	add.w	sl, sl, #1
 8004ef8:	e779      	b.n	8004dee <_dtoa_r+0xa76>
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <_dtoa_r+0xbd4>)
 8004efc:	f7ff baa8 	b.w	8004450 <_dtoa_r+0xd8>
 8004f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f47f aa81 	bne.w	800440a <_dtoa_r+0x92>
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <_dtoa_r+0xbd8>)
 8004f0a:	f7ff baa1 	b.w	8004450 <_dtoa_r+0xd8>
 8004f0e:	f1b9 0f00 	cmp.w	r9, #0
 8004f12:	dc03      	bgt.n	8004f1c <_dtoa_r+0xba4>
 8004f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	f73f aecb 	bgt.w	8004cb2 <_dtoa_r+0x93a>
 8004f1c:	9f03      	ldr	r7, [sp, #12]
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4658      	mov	r0, fp
 8004f22:	f7ff f99b 	bl	800425c <quorem>
 8004f26:	9a03      	ldr	r2, [sp, #12]
 8004f28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004f2c:	f807 3b01 	strb.w	r3, [r7], #1
 8004f30:	1aba      	subs	r2, r7, r2
 8004f32:	4591      	cmp	r9, r2
 8004f34:	ddba      	ble.n	8004eac <_dtoa_r+0xb34>
 8004f36:	4659      	mov	r1, fp
 8004f38:	2300      	movs	r3, #0
 8004f3a:	220a      	movs	r2, #10
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f000 f893 	bl	8005068 <__multadd>
 8004f42:	4683      	mov	fp, r0
 8004f44:	e7eb      	b.n	8004f1e <_dtoa_r+0xba6>
 8004f46:	bf00      	nop
 8004f48:	0800681f 	.word	0x0800681f
 8004f4c:	0800677c 	.word	0x0800677c
 8004f50:	080067a0 	.word	0x080067a0

08004f54 <_localeconv_r>:
 8004f54:	4800      	ldr	r0, [pc, #0]	; (8004f58 <_localeconv_r+0x4>)
 8004f56:	4770      	bx	lr
 8004f58:	20000170 	.word	0x20000170

08004f5c <malloc>:
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <malloc+0xc>)
 8004f5e:	4601      	mov	r1, r0
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f000 bc1d 	b.w	80057a0 <_malloc_r>
 8004f66:	bf00      	nop
 8004f68:	2000001c 	.word	0x2000001c

08004f6c <memchr>:
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	b2c9      	uxtb	r1, r1
 8004f72:	4402      	add	r2, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	d101      	bne.n	8004f7e <memchr+0x12>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e003      	b.n	8004f86 <memchr+0x1a>
 8004f7e:	7804      	ldrb	r4, [r0, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	428c      	cmp	r4, r1
 8004f84:	d1f6      	bne.n	8004f74 <memchr+0x8>
 8004f86:	bd10      	pop	{r4, pc}

08004f88 <memcpy>:
 8004f88:	440a      	add	r2, r1
 8004f8a:	4291      	cmp	r1, r2
 8004f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f90:	d100      	bne.n	8004f94 <memcpy+0xc>
 8004f92:	4770      	bx	lr
 8004f94:	b510      	push	{r4, lr}
 8004f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f9a:	4291      	cmp	r1, r2
 8004f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa0:	d1f9      	bne.n	8004f96 <memcpy+0xe>
 8004fa2:	bd10      	pop	{r4, pc}

08004fa4 <_Balloc>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	b976      	cbnz	r6, 8004fcc <_Balloc+0x28>
 8004fae:	2010      	movs	r0, #16
 8004fb0:	f7ff ffd4 	bl	8004f5c <malloc>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8004fb8:	b920      	cbnz	r0, 8004fc4 <_Balloc+0x20>
 8004fba:	2166      	movs	r1, #102	; 0x66
 8004fbc:	4b17      	ldr	r3, [pc, #92]	; (800501c <_Balloc+0x78>)
 8004fbe:	4818      	ldr	r0, [pc, #96]	; (8005020 <_Balloc+0x7c>)
 8004fc0:	f000 fdce 	bl	8005b60 <__assert_func>
 8004fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fc8:	6006      	str	r6, [r0, #0]
 8004fca:	60c6      	str	r6, [r0, #12]
 8004fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fce:	68f3      	ldr	r3, [r6, #12]
 8004fd0:	b183      	cbz	r3, 8004ff4 <_Balloc+0x50>
 8004fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fda:	b9b8      	cbnz	r0, 800500c <_Balloc+0x68>
 8004fdc:	2101      	movs	r1, #1
 8004fde:	fa01 f605 	lsl.w	r6, r1, r5
 8004fe2:	1d72      	adds	r2, r6, #5
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	0092      	lsls	r2, r2, #2
 8004fe8:	f000 fb5e 	bl	80056a8 <_calloc_r>
 8004fec:	b160      	cbz	r0, 8005008 <_Balloc+0x64>
 8004fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ff2:	e00e      	b.n	8005012 <_Balloc+0x6e>
 8004ff4:	2221      	movs	r2, #33	; 0x21
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fb55 	bl	80056a8 <_calloc_r>
 8004ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005000:	60f0      	str	r0, [r6, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e4      	bne.n	8004fd2 <_Balloc+0x2e>
 8005008:	2000      	movs	r0, #0
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	6802      	ldr	r2, [r0, #0]
 800500e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005012:	2300      	movs	r3, #0
 8005014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005018:	e7f7      	b.n	800500a <_Balloc+0x66>
 800501a:	bf00      	nop
 800501c:	080067ad 	.word	0x080067ad
 8005020:	08006830 	.word	0x08006830

08005024 <_Bfree>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005028:	4605      	mov	r5, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b976      	cbnz	r6, 800504c <_Bfree+0x28>
 800502e:	2010      	movs	r0, #16
 8005030:	f7ff ff94 	bl	8004f5c <malloc>
 8005034:	4602      	mov	r2, r0
 8005036:	6268      	str	r0, [r5, #36]	; 0x24
 8005038:	b920      	cbnz	r0, 8005044 <_Bfree+0x20>
 800503a:	218a      	movs	r1, #138	; 0x8a
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <_Bfree+0x3c>)
 800503e:	4809      	ldr	r0, [pc, #36]	; (8005064 <_Bfree+0x40>)
 8005040:	f000 fd8e 	bl	8005b60 <__assert_func>
 8005044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005048:	6006      	str	r6, [r0, #0]
 800504a:	60c6      	str	r6, [r0, #12]
 800504c:	b13c      	cbz	r4, 800505e <_Bfree+0x3a>
 800504e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005050:	6862      	ldr	r2, [r4, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005058:	6021      	str	r1, [r4, #0]
 800505a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	080067ad 	.word	0x080067ad
 8005064:	08006830 	.word	0x08006830

08005068 <__multadd>:
 8005068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	4607      	mov	r7, r0
 800506e:	460c      	mov	r4, r1
 8005070:	461e      	mov	r6, r3
 8005072:	2000      	movs	r0, #0
 8005074:	690d      	ldr	r5, [r1, #16]
 8005076:	f101 0c14 	add.w	ip, r1, #20
 800507a:	f8dc 3000 	ldr.w	r3, [ip]
 800507e:	3001      	adds	r0, #1
 8005080:	b299      	uxth	r1, r3
 8005082:	fb02 6101 	mla	r1, r2, r1, r6
 8005086:	0c1e      	lsrs	r6, r3, #16
 8005088:	0c0b      	lsrs	r3, r1, #16
 800508a:	fb02 3306 	mla	r3, r2, r6, r3
 800508e:	b289      	uxth	r1, r1
 8005090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005094:	4285      	cmp	r5, r0
 8005096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800509a:	f84c 1b04 	str.w	r1, [ip], #4
 800509e:	dcec      	bgt.n	800507a <__multadd+0x12>
 80050a0:	b30e      	cbz	r6, 80050e6 <__multadd+0x7e>
 80050a2:	68a3      	ldr	r3, [r4, #8]
 80050a4:	42ab      	cmp	r3, r5
 80050a6:	dc19      	bgt.n	80050dc <__multadd+0x74>
 80050a8:	6861      	ldr	r1, [r4, #4]
 80050aa:	4638      	mov	r0, r7
 80050ac:	3101      	adds	r1, #1
 80050ae:	f7ff ff79 	bl	8004fa4 <_Balloc>
 80050b2:	4680      	mov	r8, r0
 80050b4:	b928      	cbnz	r0, 80050c2 <__multadd+0x5a>
 80050b6:	4602      	mov	r2, r0
 80050b8:	21b5      	movs	r1, #181	; 0xb5
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <__multadd+0x84>)
 80050bc:	480c      	ldr	r0, [pc, #48]	; (80050f0 <__multadd+0x88>)
 80050be:	f000 fd4f 	bl	8005b60 <__assert_func>
 80050c2:	6922      	ldr	r2, [r4, #16]
 80050c4:	f104 010c 	add.w	r1, r4, #12
 80050c8:	3202      	adds	r2, #2
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	300c      	adds	r0, #12
 80050ce:	f7ff ff5b 	bl	8004f88 <memcpy>
 80050d2:	4621      	mov	r1, r4
 80050d4:	4638      	mov	r0, r7
 80050d6:	f7ff ffa5 	bl	8005024 <_Bfree>
 80050da:	4644      	mov	r4, r8
 80050dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050e0:	3501      	adds	r5, #1
 80050e2:	615e      	str	r6, [r3, #20]
 80050e4:	6125      	str	r5, [r4, #16]
 80050e6:	4620      	mov	r0, r4
 80050e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ec:	0800681f 	.word	0x0800681f
 80050f0:	08006830 	.word	0x08006830

080050f4 <__hi0bits>:
 80050f4:	0c02      	lsrs	r2, r0, #16
 80050f6:	0412      	lsls	r2, r2, #16
 80050f8:	4603      	mov	r3, r0
 80050fa:	b9ca      	cbnz	r2, 8005130 <__hi0bits+0x3c>
 80050fc:	0403      	lsls	r3, r0, #16
 80050fe:	2010      	movs	r0, #16
 8005100:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005104:	bf04      	itt	eq
 8005106:	021b      	lsleq	r3, r3, #8
 8005108:	3008      	addeq	r0, #8
 800510a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800510e:	bf04      	itt	eq
 8005110:	011b      	lsleq	r3, r3, #4
 8005112:	3004      	addeq	r0, #4
 8005114:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005118:	bf04      	itt	eq
 800511a:	009b      	lsleq	r3, r3, #2
 800511c:	3002      	addeq	r0, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	db05      	blt.n	800512e <__hi0bits+0x3a>
 8005122:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005126:	f100 0001 	add.w	r0, r0, #1
 800512a:	bf08      	it	eq
 800512c:	2020      	moveq	r0, #32
 800512e:	4770      	bx	lr
 8005130:	2000      	movs	r0, #0
 8005132:	e7e5      	b.n	8005100 <__hi0bits+0xc>

08005134 <__lo0bits>:
 8005134:	6803      	ldr	r3, [r0, #0]
 8005136:	4602      	mov	r2, r0
 8005138:	f013 0007 	ands.w	r0, r3, #7
 800513c:	d00b      	beq.n	8005156 <__lo0bits+0x22>
 800513e:	07d9      	lsls	r1, r3, #31
 8005140:	d421      	bmi.n	8005186 <__lo0bits+0x52>
 8005142:	0798      	lsls	r0, r3, #30
 8005144:	bf49      	itett	mi
 8005146:	085b      	lsrmi	r3, r3, #1
 8005148:	089b      	lsrpl	r3, r3, #2
 800514a:	2001      	movmi	r0, #1
 800514c:	6013      	strmi	r3, [r2, #0]
 800514e:	bf5c      	itt	pl
 8005150:	2002      	movpl	r0, #2
 8005152:	6013      	strpl	r3, [r2, #0]
 8005154:	4770      	bx	lr
 8005156:	b299      	uxth	r1, r3
 8005158:	b909      	cbnz	r1, 800515e <__lo0bits+0x2a>
 800515a:	2010      	movs	r0, #16
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	b2d9      	uxtb	r1, r3
 8005160:	b909      	cbnz	r1, 8005166 <__lo0bits+0x32>
 8005162:	3008      	adds	r0, #8
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	0719      	lsls	r1, r3, #28
 8005168:	bf04      	itt	eq
 800516a:	091b      	lsreq	r3, r3, #4
 800516c:	3004      	addeq	r0, #4
 800516e:	0799      	lsls	r1, r3, #30
 8005170:	bf04      	itt	eq
 8005172:	089b      	lsreq	r3, r3, #2
 8005174:	3002      	addeq	r0, #2
 8005176:	07d9      	lsls	r1, r3, #31
 8005178:	d403      	bmi.n	8005182 <__lo0bits+0x4e>
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	f100 0001 	add.w	r0, r0, #1
 8005180:	d003      	beq.n	800518a <__lo0bits+0x56>
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4770      	bx	lr
 8005186:	2000      	movs	r0, #0
 8005188:	4770      	bx	lr
 800518a:	2020      	movs	r0, #32
 800518c:	4770      	bx	lr
	...

08005190 <__i2b>:
 8005190:	b510      	push	{r4, lr}
 8005192:	460c      	mov	r4, r1
 8005194:	2101      	movs	r1, #1
 8005196:	f7ff ff05 	bl	8004fa4 <_Balloc>
 800519a:	4602      	mov	r2, r0
 800519c:	b928      	cbnz	r0, 80051aa <__i2b+0x1a>
 800519e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80051a2:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <__i2b+0x24>)
 80051a4:	4804      	ldr	r0, [pc, #16]	; (80051b8 <__i2b+0x28>)
 80051a6:	f000 fcdb 	bl	8005b60 <__assert_func>
 80051aa:	2301      	movs	r3, #1
 80051ac:	6144      	str	r4, [r0, #20]
 80051ae:	6103      	str	r3, [r0, #16]
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	bf00      	nop
 80051b4:	0800681f 	.word	0x0800681f
 80051b8:	08006830 	.word	0x08006830

080051bc <__multiply>:
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	4691      	mov	r9, r2
 80051c2:	690a      	ldr	r2, [r1, #16]
 80051c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80051c8:	460c      	mov	r4, r1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	bfbe      	ittt	lt
 80051ce:	460b      	movlt	r3, r1
 80051d0:	464c      	movlt	r4, r9
 80051d2:	4699      	movlt	r9, r3
 80051d4:	6927      	ldr	r7, [r4, #16]
 80051d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	6861      	ldr	r1, [r4, #4]
 80051de:	eb07 060a 	add.w	r6, r7, sl
 80051e2:	42b3      	cmp	r3, r6
 80051e4:	b085      	sub	sp, #20
 80051e6:	bfb8      	it	lt
 80051e8:	3101      	addlt	r1, #1
 80051ea:	f7ff fedb 	bl	8004fa4 <_Balloc>
 80051ee:	b930      	cbnz	r0, 80051fe <__multiply+0x42>
 80051f0:	4602      	mov	r2, r0
 80051f2:	f240 115d 	movw	r1, #349	; 0x15d
 80051f6:	4b43      	ldr	r3, [pc, #268]	; (8005304 <__multiply+0x148>)
 80051f8:	4843      	ldr	r0, [pc, #268]	; (8005308 <__multiply+0x14c>)
 80051fa:	f000 fcb1 	bl	8005b60 <__assert_func>
 80051fe:	f100 0514 	add.w	r5, r0, #20
 8005202:	462b      	mov	r3, r5
 8005204:	2200      	movs	r2, #0
 8005206:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800520a:	4543      	cmp	r3, r8
 800520c:	d321      	bcc.n	8005252 <__multiply+0x96>
 800520e:	f104 0314 	add.w	r3, r4, #20
 8005212:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005216:	f109 0314 	add.w	r3, r9, #20
 800521a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800521e:	9202      	str	r2, [sp, #8]
 8005220:	1b3a      	subs	r2, r7, r4
 8005222:	3a15      	subs	r2, #21
 8005224:	f022 0203 	bic.w	r2, r2, #3
 8005228:	3204      	adds	r2, #4
 800522a:	f104 0115 	add.w	r1, r4, #21
 800522e:	428f      	cmp	r7, r1
 8005230:	bf38      	it	cc
 8005232:	2204      	movcc	r2, #4
 8005234:	9201      	str	r2, [sp, #4]
 8005236:	9a02      	ldr	r2, [sp, #8]
 8005238:	9303      	str	r3, [sp, #12]
 800523a:	429a      	cmp	r2, r3
 800523c:	d80c      	bhi.n	8005258 <__multiply+0x9c>
 800523e:	2e00      	cmp	r6, #0
 8005240:	dd03      	ble.n	800524a <__multiply+0x8e>
 8005242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005246:	2b00      	cmp	r3, #0
 8005248:	d059      	beq.n	80052fe <__multiply+0x142>
 800524a:	6106      	str	r6, [r0, #16]
 800524c:	b005      	add	sp, #20
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	f843 2b04 	str.w	r2, [r3], #4
 8005256:	e7d8      	b.n	800520a <__multiply+0x4e>
 8005258:	f8b3 a000 	ldrh.w	sl, [r3]
 800525c:	f1ba 0f00 	cmp.w	sl, #0
 8005260:	d023      	beq.n	80052aa <__multiply+0xee>
 8005262:	46a9      	mov	r9, r5
 8005264:	f04f 0c00 	mov.w	ip, #0
 8005268:	f104 0e14 	add.w	lr, r4, #20
 800526c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005270:	f8d9 1000 	ldr.w	r1, [r9]
 8005274:	fa1f fb82 	uxth.w	fp, r2
 8005278:	b289      	uxth	r1, r1
 800527a:	fb0a 110b 	mla	r1, sl, fp, r1
 800527e:	4461      	add	r1, ip
 8005280:	f8d9 c000 	ldr.w	ip, [r9]
 8005284:	0c12      	lsrs	r2, r2, #16
 8005286:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800528a:	fb0a c202 	mla	r2, sl, r2, ip
 800528e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005292:	b289      	uxth	r1, r1
 8005294:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005298:	4577      	cmp	r7, lr
 800529a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800529e:	f849 1b04 	str.w	r1, [r9], #4
 80052a2:	d8e3      	bhi.n	800526c <__multiply+0xb0>
 80052a4:	9a01      	ldr	r2, [sp, #4]
 80052a6:	f845 c002 	str.w	ip, [r5, r2]
 80052aa:	9a03      	ldr	r2, [sp, #12]
 80052ac:	3304      	adds	r3, #4
 80052ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80052b2:	f1b9 0f00 	cmp.w	r9, #0
 80052b6:	d020      	beq.n	80052fa <__multiply+0x13e>
 80052b8:	46ae      	mov	lr, r5
 80052ba:	f04f 0a00 	mov.w	sl, #0
 80052be:	6829      	ldr	r1, [r5, #0]
 80052c0:	f104 0c14 	add.w	ip, r4, #20
 80052c4:	f8bc b000 	ldrh.w	fp, [ip]
 80052c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80052cc:	b289      	uxth	r1, r1
 80052ce:	fb09 220b 	mla	r2, r9, fp, r2
 80052d2:	4492      	add	sl, r2
 80052d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80052d8:	f84e 1b04 	str.w	r1, [lr], #4
 80052dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80052e0:	f8be 1000 	ldrh.w	r1, [lr]
 80052e4:	0c12      	lsrs	r2, r2, #16
 80052e6:	fb09 1102 	mla	r1, r9, r2, r1
 80052ea:	4567      	cmp	r7, ip
 80052ec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80052f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80052f4:	d8e6      	bhi.n	80052c4 <__multiply+0x108>
 80052f6:	9a01      	ldr	r2, [sp, #4]
 80052f8:	50a9      	str	r1, [r5, r2]
 80052fa:	3504      	adds	r5, #4
 80052fc:	e79b      	b.n	8005236 <__multiply+0x7a>
 80052fe:	3e01      	subs	r6, #1
 8005300:	e79d      	b.n	800523e <__multiply+0x82>
 8005302:	bf00      	nop
 8005304:	0800681f 	.word	0x0800681f
 8005308:	08006830 	.word	0x08006830

0800530c <__pow5mult>:
 800530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005310:	4615      	mov	r5, r2
 8005312:	f012 0203 	ands.w	r2, r2, #3
 8005316:	4606      	mov	r6, r0
 8005318:	460f      	mov	r7, r1
 800531a:	d007      	beq.n	800532c <__pow5mult+0x20>
 800531c:	4c25      	ldr	r4, [pc, #148]	; (80053b4 <__pow5mult+0xa8>)
 800531e:	3a01      	subs	r2, #1
 8005320:	2300      	movs	r3, #0
 8005322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005326:	f7ff fe9f 	bl	8005068 <__multadd>
 800532a:	4607      	mov	r7, r0
 800532c:	10ad      	asrs	r5, r5, #2
 800532e:	d03d      	beq.n	80053ac <__pow5mult+0xa0>
 8005330:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005332:	b97c      	cbnz	r4, 8005354 <__pow5mult+0x48>
 8005334:	2010      	movs	r0, #16
 8005336:	f7ff fe11 	bl	8004f5c <malloc>
 800533a:	4602      	mov	r2, r0
 800533c:	6270      	str	r0, [r6, #36]	; 0x24
 800533e:	b928      	cbnz	r0, 800534c <__pow5mult+0x40>
 8005340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <__pow5mult+0xac>)
 8005346:	481d      	ldr	r0, [pc, #116]	; (80053bc <__pow5mult+0xb0>)
 8005348:	f000 fc0a 	bl	8005b60 <__assert_func>
 800534c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005350:	6004      	str	r4, [r0, #0]
 8005352:	60c4      	str	r4, [r0, #12]
 8005354:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800535c:	b94c      	cbnz	r4, 8005372 <__pow5mult+0x66>
 800535e:	f240 2171 	movw	r1, #625	; 0x271
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff ff14 	bl	8005190 <__i2b>
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005370:	6003      	str	r3, [r0, #0]
 8005372:	f04f 0900 	mov.w	r9, #0
 8005376:	07eb      	lsls	r3, r5, #31
 8005378:	d50a      	bpl.n	8005390 <__pow5mult+0x84>
 800537a:	4639      	mov	r1, r7
 800537c:	4622      	mov	r2, r4
 800537e:	4630      	mov	r0, r6
 8005380:	f7ff ff1c 	bl	80051bc <__multiply>
 8005384:	4680      	mov	r8, r0
 8005386:	4639      	mov	r1, r7
 8005388:	4630      	mov	r0, r6
 800538a:	f7ff fe4b 	bl	8005024 <_Bfree>
 800538e:	4647      	mov	r7, r8
 8005390:	106d      	asrs	r5, r5, #1
 8005392:	d00b      	beq.n	80053ac <__pow5mult+0xa0>
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	b938      	cbnz	r0, 80053a8 <__pow5mult+0x9c>
 8005398:	4622      	mov	r2, r4
 800539a:	4621      	mov	r1, r4
 800539c:	4630      	mov	r0, r6
 800539e:	f7ff ff0d 	bl	80051bc <__multiply>
 80053a2:	6020      	str	r0, [r4, #0]
 80053a4:	f8c0 9000 	str.w	r9, [r0]
 80053a8:	4604      	mov	r4, r0
 80053aa:	e7e4      	b.n	8005376 <__pow5mult+0x6a>
 80053ac:	4638      	mov	r0, r7
 80053ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b2:	bf00      	nop
 80053b4:	08006980 	.word	0x08006980
 80053b8:	080067ad 	.word	0x080067ad
 80053bc:	08006830 	.word	0x08006830

080053c0 <__lshift>:
 80053c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	460c      	mov	r4, r1
 80053c6:	4607      	mov	r7, r0
 80053c8:	4691      	mov	r9, r2
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	6849      	ldr	r1, [r1, #4]
 80053ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053d8:	f108 0601 	add.w	r6, r8, #1
 80053dc:	42b3      	cmp	r3, r6
 80053de:	db0b      	blt.n	80053f8 <__lshift+0x38>
 80053e0:	4638      	mov	r0, r7
 80053e2:	f7ff fddf 	bl	8004fa4 <_Balloc>
 80053e6:	4605      	mov	r5, r0
 80053e8:	b948      	cbnz	r0, 80053fe <__lshift+0x3e>
 80053ea:	4602      	mov	r2, r0
 80053ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053f0:	4b29      	ldr	r3, [pc, #164]	; (8005498 <__lshift+0xd8>)
 80053f2:	482a      	ldr	r0, [pc, #168]	; (800549c <__lshift+0xdc>)
 80053f4:	f000 fbb4 	bl	8005b60 <__assert_func>
 80053f8:	3101      	adds	r1, #1
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	e7ee      	b.n	80053dc <__lshift+0x1c>
 80053fe:	2300      	movs	r3, #0
 8005400:	f100 0114 	add.w	r1, r0, #20
 8005404:	f100 0210 	add.w	r2, r0, #16
 8005408:	4618      	mov	r0, r3
 800540a:	4553      	cmp	r3, sl
 800540c:	db37      	blt.n	800547e <__lshift+0xbe>
 800540e:	6920      	ldr	r0, [r4, #16]
 8005410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005414:	f104 0314 	add.w	r3, r4, #20
 8005418:	f019 091f 	ands.w	r9, r9, #31
 800541c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005424:	d02f      	beq.n	8005486 <__lshift+0xc6>
 8005426:	468a      	mov	sl, r1
 8005428:	f04f 0c00 	mov.w	ip, #0
 800542c:	f1c9 0e20 	rsb	lr, r9, #32
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	fa02 f209 	lsl.w	r2, r2, r9
 8005436:	ea42 020c 	orr.w	r2, r2, ip
 800543a:	f84a 2b04 	str.w	r2, [sl], #4
 800543e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005442:	4298      	cmp	r0, r3
 8005444:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005448:	d8f2      	bhi.n	8005430 <__lshift+0x70>
 800544a:	1b03      	subs	r3, r0, r4
 800544c:	3b15      	subs	r3, #21
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	3304      	adds	r3, #4
 8005454:	f104 0215 	add.w	r2, r4, #21
 8005458:	4290      	cmp	r0, r2
 800545a:	bf38      	it	cc
 800545c:	2304      	movcc	r3, #4
 800545e:	f841 c003 	str.w	ip, [r1, r3]
 8005462:	f1bc 0f00 	cmp.w	ip, #0
 8005466:	d001      	beq.n	800546c <__lshift+0xac>
 8005468:	f108 0602 	add.w	r6, r8, #2
 800546c:	3e01      	subs	r6, #1
 800546e:	4638      	mov	r0, r7
 8005470:	4621      	mov	r1, r4
 8005472:	612e      	str	r6, [r5, #16]
 8005474:	f7ff fdd6 	bl	8005024 <_Bfree>
 8005478:	4628      	mov	r0, r5
 800547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005482:	3301      	adds	r3, #1
 8005484:	e7c1      	b.n	800540a <__lshift+0x4a>
 8005486:	3904      	subs	r1, #4
 8005488:	f853 2b04 	ldr.w	r2, [r3], #4
 800548c:	4298      	cmp	r0, r3
 800548e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005492:	d8f9      	bhi.n	8005488 <__lshift+0xc8>
 8005494:	e7ea      	b.n	800546c <__lshift+0xac>
 8005496:	bf00      	nop
 8005498:	0800681f 	.word	0x0800681f
 800549c:	08006830 	.word	0x08006830

080054a0 <__mcmp>:
 80054a0:	4603      	mov	r3, r0
 80054a2:	690a      	ldr	r2, [r1, #16]
 80054a4:	6900      	ldr	r0, [r0, #16]
 80054a6:	b530      	push	{r4, r5, lr}
 80054a8:	1a80      	subs	r0, r0, r2
 80054aa:	d10d      	bne.n	80054c8 <__mcmp+0x28>
 80054ac:	3314      	adds	r3, #20
 80054ae:	3114      	adds	r1, #20
 80054b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80054b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80054b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80054c0:	4295      	cmp	r5, r2
 80054c2:	d002      	beq.n	80054ca <__mcmp+0x2a>
 80054c4:	d304      	bcc.n	80054d0 <__mcmp+0x30>
 80054c6:	2001      	movs	r0, #1
 80054c8:	bd30      	pop	{r4, r5, pc}
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	d3f4      	bcc.n	80054b8 <__mcmp+0x18>
 80054ce:	e7fb      	b.n	80054c8 <__mcmp+0x28>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	e7f8      	b.n	80054c8 <__mcmp+0x28>
	...

080054d8 <__mdiff>:
 80054d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	460d      	mov	r5, r1
 80054de:	4607      	mov	r7, r0
 80054e0:	4611      	mov	r1, r2
 80054e2:	4628      	mov	r0, r5
 80054e4:	4614      	mov	r4, r2
 80054e6:	f7ff ffdb 	bl	80054a0 <__mcmp>
 80054ea:	1e06      	subs	r6, r0, #0
 80054ec:	d111      	bne.n	8005512 <__mdiff+0x3a>
 80054ee:	4631      	mov	r1, r6
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff fd57 	bl	8004fa4 <_Balloc>
 80054f6:	4602      	mov	r2, r0
 80054f8:	b928      	cbnz	r0, 8005506 <__mdiff+0x2e>
 80054fa:	f240 2132 	movw	r1, #562	; 0x232
 80054fe:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <__mdiff+0x110>)
 8005500:	483a      	ldr	r0, [pc, #232]	; (80055ec <__mdiff+0x114>)
 8005502:	f000 fb2d 	bl	8005b60 <__assert_func>
 8005506:	2301      	movs	r3, #1
 8005508:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800550c:	4610      	mov	r0, r2
 800550e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	bfa4      	itt	ge
 8005514:	4623      	movge	r3, r4
 8005516:	462c      	movge	r4, r5
 8005518:	4638      	mov	r0, r7
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	bfa6      	itte	ge
 800551e:	461d      	movge	r5, r3
 8005520:	2600      	movge	r6, #0
 8005522:	2601      	movlt	r6, #1
 8005524:	f7ff fd3e 	bl	8004fa4 <_Balloc>
 8005528:	4602      	mov	r2, r0
 800552a:	b918      	cbnz	r0, 8005534 <__mdiff+0x5c>
 800552c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005530:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <__mdiff+0x110>)
 8005532:	e7e5      	b.n	8005500 <__mdiff+0x28>
 8005534:	f102 0814 	add.w	r8, r2, #20
 8005538:	46c2      	mov	sl, r8
 800553a:	f04f 0c00 	mov.w	ip, #0
 800553e:	6927      	ldr	r7, [r4, #16]
 8005540:	60c6      	str	r6, [r0, #12]
 8005542:	692e      	ldr	r6, [r5, #16]
 8005544:	f104 0014 	add.w	r0, r4, #20
 8005548:	f105 0914 	add.w	r9, r5, #20
 800554c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005554:	3410      	adds	r4, #16
 8005556:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800555a:	f859 3b04 	ldr.w	r3, [r9], #4
 800555e:	fa1f f18b 	uxth.w	r1, fp
 8005562:	448c      	add	ip, r1
 8005564:	b299      	uxth	r1, r3
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	ebac 0101 	sub.w	r1, ip, r1
 800556c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005570:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005574:	b289      	uxth	r1, r1
 8005576:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800557a:	454e      	cmp	r6, r9
 800557c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005580:	f84a 3b04 	str.w	r3, [sl], #4
 8005584:	d8e7      	bhi.n	8005556 <__mdiff+0x7e>
 8005586:	1b73      	subs	r3, r6, r5
 8005588:	3b15      	subs	r3, #21
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	3515      	adds	r5, #21
 8005590:	3304      	adds	r3, #4
 8005592:	42ae      	cmp	r6, r5
 8005594:	bf38      	it	cc
 8005596:	2304      	movcc	r3, #4
 8005598:	4418      	add	r0, r3
 800559a:	4443      	add	r3, r8
 800559c:	461e      	mov	r6, r3
 800559e:	4605      	mov	r5, r0
 80055a0:	4575      	cmp	r5, lr
 80055a2:	d30e      	bcc.n	80055c2 <__mdiff+0xea>
 80055a4:	f10e 0103 	add.w	r1, lr, #3
 80055a8:	1a09      	subs	r1, r1, r0
 80055aa:	f021 0103 	bic.w	r1, r1, #3
 80055ae:	3803      	subs	r0, #3
 80055b0:	4586      	cmp	lr, r0
 80055b2:	bf38      	it	cc
 80055b4:	2100      	movcc	r1, #0
 80055b6:	4419      	add	r1, r3
 80055b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80055bc:	b18b      	cbz	r3, 80055e2 <__mdiff+0x10a>
 80055be:	6117      	str	r7, [r2, #16]
 80055c0:	e7a4      	b.n	800550c <__mdiff+0x34>
 80055c2:	f855 8b04 	ldr.w	r8, [r5], #4
 80055c6:	fa1f f188 	uxth.w	r1, r8
 80055ca:	4461      	add	r1, ip
 80055cc:	140c      	asrs	r4, r1, #16
 80055ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80055d2:	b289      	uxth	r1, r1
 80055d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80055d8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80055dc:	f846 1b04 	str.w	r1, [r6], #4
 80055e0:	e7de      	b.n	80055a0 <__mdiff+0xc8>
 80055e2:	3f01      	subs	r7, #1
 80055e4:	e7e8      	b.n	80055b8 <__mdiff+0xe0>
 80055e6:	bf00      	nop
 80055e8:	0800681f 	.word	0x0800681f
 80055ec:	08006830 	.word	0x08006830

080055f0 <__d2b>:
 80055f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055f4:	2101      	movs	r1, #1
 80055f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80055fa:	4690      	mov	r8, r2
 80055fc:	461d      	mov	r5, r3
 80055fe:	f7ff fcd1 	bl	8004fa4 <_Balloc>
 8005602:	4604      	mov	r4, r0
 8005604:	b930      	cbnz	r0, 8005614 <__d2b+0x24>
 8005606:	4602      	mov	r2, r0
 8005608:	f240 310a 	movw	r1, #778	; 0x30a
 800560c:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <__d2b+0xb0>)
 800560e:	4825      	ldr	r0, [pc, #148]	; (80056a4 <__d2b+0xb4>)
 8005610:	f000 faa6 	bl	8005b60 <__assert_func>
 8005614:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005618:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800561c:	bb2d      	cbnz	r5, 800566a <__d2b+0x7a>
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	f1b8 0300 	subs.w	r3, r8, #0
 8005624:	d026      	beq.n	8005674 <__d2b+0x84>
 8005626:	4668      	mov	r0, sp
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	f7ff fd83 	bl	8005134 <__lo0bits>
 800562e:	9900      	ldr	r1, [sp, #0]
 8005630:	b1f0      	cbz	r0, 8005670 <__d2b+0x80>
 8005632:	9a01      	ldr	r2, [sp, #4]
 8005634:	f1c0 0320 	rsb	r3, r0, #32
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	430b      	orrs	r3, r1
 800563e:	40c2      	lsrs	r2, r0
 8005640:	6163      	str	r3, [r4, #20]
 8005642:	9201      	str	r2, [sp, #4]
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2102      	movne	r1, #2
 800564c:	2101      	moveq	r1, #1
 800564e:	61a3      	str	r3, [r4, #24]
 8005650:	6121      	str	r1, [r4, #16]
 8005652:	b1c5      	cbz	r5, 8005686 <__d2b+0x96>
 8005654:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005658:	4405      	add	r5, r0
 800565a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800565e:	603d      	str	r5, [r7, #0]
 8005660:	6030      	str	r0, [r6, #0]
 8005662:	4620      	mov	r0, r4
 8005664:	b002      	add	sp, #8
 8005666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566e:	e7d6      	b.n	800561e <__d2b+0x2e>
 8005670:	6161      	str	r1, [r4, #20]
 8005672:	e7e7      	b.n	8005644 <__d2b+0x54>
 8005674:	a801      	add	r0, sp, #4
 8005676:	f7ff fd5d 	bl	8005134 <__lo0bits>
 800567a:	2101      	movs	r1, #1
 800567c:	9b01      	ldr	r3, [sp, #4]
 800567e:	6121      	str	r1, [r4, #16]
 8005680:	6163      	str	r3, [r4, #20]
 8005682:	3020      	adds	r0, #32
 8005684:	e7e5      	b.n	8005652 <__d2b+0x62>
 8005686:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800568a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800568e:	6038      	str	r0, [r7, #0]
 8005690:	6918      	ldr	r0, [r3, #16]
 8005692:	f7ff fd2f 	bl	80050f4 <__hi0bits>
 8005696:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800569a:	6031      	str	r1, [r6, #0]
 800569c:	e7e1      	b.n	8005662 <__d2b+0x72>
 800569e:	bf00      	nop
 80056a0:	0800681f 	.word	0x0800681f
 80056a4:	08006830 	.word	0x08006830

080056a8 <_calloc_r>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	fba1 5402 	umull	r5, r4, r1, r2
 80056ae:	b934      	cbnz	r4, 80056be <_calloc_r+0x16>
 80056b0:	4629      	mov	r1, r5
 80056b2:	f000 f875 	bl	80057a0 <_malloc_r>
 80056b6:	4606      	mov	r6, r0
 80056b8:	b928      	cbnz	r0, 80056c6 <_calloc_r+0x1e>
 80056ba:	4630      	mov	r0, r6
 80056bc:	bd70      	pop	{r4, r5, r6, pc}
 80056be:	220c      	movs	r2, #12
 80056c0:	2600      	movs	r6, #0
 80056c2:	6002      	str	r2, [r0, #0]
 80056c4:	e7f9      	b.n	80056ba <_calloc_r+0x12>
 80056c6:	462a      	mov	r2, r5
 80056c8:	4621      	mov	r1, r4
 80056ca:	f7fe f92b 	bl	8003924 <memset>
 80056ce:	e7f4      	b.n	80056ba <_calloc_r+0x12>

080056d0 <_free_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4605      	mov	r5, r0
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d040      	beq.n	800575a <_free_r+0x8a>
 80056d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056dc:	1f0c      	subs	r4, r1, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfb8      	it	lt
 80056e2:	18e4      	addlt	r4, r4, r3
 80056e4:	f000 fa98 	bl	8005c18 <__malloc_lock>
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <_free_r+0x8c>)
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	b933      	cbnz	r3, 80056fc <_free_r+0x2c>
 80056ee:	6063      	str	r3, [r4, #4]
 80056f0:	6014      	str	r4, [r2, #0]
 80056f2:	4628      	mov	r0, r5
 80056f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056f8:	f000 ba94 	b.w	8005c24 <__malloc_unlock>
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	d908      	bls.n	8005712 <_free_r+0x42>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	1821      	adds	r1, r4, r0
 8005704:	428b      	cmp	r3, r1
 8005706:	bf01      	itttt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	e7ed      	b.n	80056ee <_free_r+0x1e>
 8005712:	461a      	mov	r2, r3
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	b10b      	cbz	r3, 800571c <_free_r+0x4c>
 8005718:	42a3      	cmp	r3, r4
 800571a:	d9fa      	bls.n	8005712 <_free_r+0x42>
 800571c:	6811      	ldr	r1, [r2, #0]
 800571e:	1850      	adds	r0, r2, r1
 8005720:	42a0      	cmp	r0, r4
 8005722:	d10b      	bne.n	800573c <_free_r+0x6c>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	4401      	add	r1, r0
 8005728:	1850      	adds	r0, r2, r1
 800572a:	4283      	cmp	r3, r0
 800572c:	6011      	str	r1, [r2, #0]
 800572e:	d1e0      	bne.n	80056f2 <_free_r+0x22>
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4401      	add	r1, r0
 8005736:	6011      	str	r1, [r2, #0]
 8005738:	6053      	str	r3, [r2, #4]
 800573a:	e7da      	b.n	80056f2 <_free_r+0x22>
 800573c:	d902      	bls.n	8005744 <_free_r+0x74>
 800573e:	230c      	movs	r3, #12
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	e7d6      	b.n	80056f2 <_free_r+0x22>
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	1821      	adds	r1, r4, r0
 8005748:	428b      	cmp	r3, r1
 800574a:	bf01      	itttt	eq
 800574c:	6819      	ldreq	r1, [r3, #0]
 800574e:	685b      	ldreq	r3, [r3, #4]
 8005750:	1809      	addeq	r1, r1, r0
 8005752:	6021      	streq	r1, [r4, #0]
 8005754:	6063      	str	r3, [r4, #4]
 8005756:	6054      	str	r4, [r2, #4]
 8005758:	e7cb      	b.n	80056f2 <_free_r+0x22>
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	200002e4 	.word	0x200002e4

08005760 <sbrk_aligned>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	4e0e      	ldr	r6, [pc, #56]	; (800579c <sbrk_aligned+0x3c>)
 8005764:	460c      	mov	r4, r1
 8005766:	6831      	ldr	r1, [r6, #0]
 8005768:	4605      	mov	r5, r0
 800576a:	b911      	cbnz	r1, 8005772 <sbrk_aligned+0x12>
 800576c:	f000 f9e8 	bl	8005b40 <_sbrk_r>
 8005770:	6030      	str	r0, [r6, #0]
 8005772:	4621      	mov	r1, r4
 8005774:	4628      	mov	r0, r5
 8005776:	f000 f9e3 	bl	8005b40 <_sbrk_r>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d00a      	beq.n	8005794 <sbrk_aligned+0x34>
 800577e:	1cc4      	adds	r4, r0, #3
 8005780:	f024 0403 	bic.w	r4, r4, #3
 8005784:	42a0      	cmp	r0, r4
 8005786:	d007      	beq.n	8005798 <sbrk_aligned+0x38>
 8005788:	1a21      	subs	r1, r4, r0
 800578a:	4628      	mov	r0, r5
 800578c:	f000 f9d8 	bl	8005b40 <_sbrk_r>
 8005790:	3001      	adds	r0, #1
 8005792:	d101      	bne.n	8005798 <sbrk_aligned+0x38>
 8005794:	f04f 34ff 	mov.w	r4, #4294967295
 8005798:	4620      	mov	r0, r4
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	200002e8 	.word	0x200002e8

080057a0 <_malloc_r>:
 80057a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a4:	1ccd      	adds	r5, r1, #3
 80057a6:	f025 0503 	bic.w	r5, r5, #3
 80057aa:	3508      	adds	r5, #8
 80057ac:	2d0c      	cmp	r5, #12
 80057ae:	bf38      	it	cc
 80057b0:	250c      	movcc	r5, #12
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	4607      	mov	r7, r0
 80057b6:	db01      	blt.n	80057bc <_malloc_r+0x1c>
 80057b8:	42a9      	cmp	r1, r5
 80057ba:	d905      	bls.n	80057c8 <_malloc_r+0x28>
 80057bc:	230c      	movs	r3, #12
 80057be:	2600      	movs	r6, #0
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4630      	mov	r0, r6
 80057c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c8:	4e2e      	ldr	r6, [pc, #184]	; (8005884 <_malloc_r+0xe4>)
 80057ca:	f000 fa25 	bl	8005c18 <__malloc_lock>
 80057ce:	6833      	ldr	r3, [r6, #0]
 80057d0:	461c      	mov	r4, r3
 80057d2:	bb34      	cbnz	r4, 8005822 <_malloc_r+0x82>
 80057d4:	4629      	mov	r1, r5
 80057d6:	4638      	mov	r0, r7
 80057d8:	f7ff ffc2 	bl	8005760 <sbrk_aligned>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	4604      	mov	r4, r0
 80057e0:	d14d      	bne.n	800587e <_malloc_r+0xde>
 80057e2:	6834      	ldr	r4, [r6, #0]
 80057e4:	4626      	mov	r6, r4
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	d140      	bne.n	800586c <_malloc_r+0xcc>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	4631      	mov	r1, r6
 80057ee:	4638      	mov	r0, r7
 80057f0:	eb04 0803 	add.w	r8, r4, r3
 80057f4:	f000 f9a4 	bl	8005b40 <_sbrk_r>
 80057f8:	4580      	cmp	r8, r0
 80057fa:	d13a      	bne.n	8005872 <_malloc_r+0xd2>
 80057fc:	6821      	ldr	r1, [r4, #0]
 80057fe:	3503      	adds	r5, #3
 8005800:	1a6d      	subs	r5, r5, r1
 8005802:	f025 0503 	bic.w	r5, r5, #3
 8005806:	3508      	adds	r5, #8
 8005808:	2d0c      	cmp	r5, #12
 800580a:	bf38      	it	cc
 800580c:	250c      	movcc	r5, #12
 800580e:	4638      	mov	r0, r7
 8005810:	4629      	mov	r1, r5
 8005812:	f7ff ffa5 	bl	8005760 <sbrk_aligned>
 8005816:	3001      	adds	r0, #1
 8005818:	d02b      	beq.n	8005872 <_malloc_r+0xd2>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	442b      	add	r3, r5
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	e00e      	b.n	8005840 <_malloc_r+0xa0>
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	1b52      	subs	r2, r2, r5
 8005826:	d41e      	bmi.n	8005866 <_malloc_r+0xc6>
 8005828:	2a0b      	cmp	r2, #11
 800582a:	d916      	bls.n	800585a <_malloc_r+0xba>
 800582c:	1961      	adds	r1, r4, r5
 800582e:	42a3      	cmp	r3, r4
 8005830:	6025      	str	r5, [r4, #0]
 8005832:	bf18      	it	ne
 8005834:	6059      	strne	r1, [r3, #4]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	bf08      	it	eq
 800583a:	6031      	streq	r1, [r6, #0]
 800583c:	5162      	str	r2, [r4, r5]
 800583e:	604b      	str	r3, [r1, #4]
 8005840:	4638      	mov	r0, r7
 8005842:	f104 060b 	add.w	r6, r4, #11
 8005846:	f000 f9ed 	bl	8005c24 <__malloc_unlock>
 800584a:	f026 0607 	bic.w	r6, r6, #7
 800584e:	1d23      	adds	r3, r4, #4
 8005850:	1af2      	subs	r2, r6, r3
 8005852:	d0b6      	beq.n	80057c2 <_malloc_r+0x22>
 8005854:	1b9b      	subs	r3, r3, r6
 8005856:	50a3      	str	r3, [r4, r2]
 8005858:	e7b3      	b.n	80057c2 <_malloc_r+0x22>
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	42a3      	cmp	r3, r4
 800585e:	bf0c      	ite	eq
 8005860:	6032      	streq	r2, [r6, #0]
 8005862:	605a      	strne	r2, [r3, #4]
 8005864:	e7ec      	b.n	8005840 <_malloc_r+0xa0>
 8005866:	4623      	mov	r3, r4
 8005868:	6864      	ldr	r4, [r4, #4]
 800586a:	e7b2      	b.n	80057d2 <_malloc_r+0x32>
 800586c:	4634      	mov	r4, r6
 800586e:	6876      	ldr	r6, [r6, #4]
 8005870:	e7b9      	b.n	80057e6 <_malloc_r+0x46>
 8005872:	230c      	movs	r3, #12
 8005874:	4638      	mov	r0, r7
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	f000 f9d4 	bl	8005c24 <__malloc_unlock>
 800587c:	e7a1      	b.n	80057c2 <_malloc_r+0x22>
 800587e:	6025      	str	r5, [r4, #0]
 8005880:	e7de      	b.n	8005840 <_malloc_r+0xa0>
 8005882:	bf00      	nop
 8005884:	200002e4 	.word	0x200002e4

08005888 <__ssputs_r>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	688e      	ldr	r6, [r1, #8]
 800588e:	4682      	mov	sl, r0
 8005890:	429e      	cmp	r6, r3
 8005892:	460c      	mov	r4, r1
 8005894:	4690      	mov	r8, r2
 8005896:	461f      	mov	r7, r3
 8005898:	d838      	bhi.n	800590c <__ssputs_r+0x84>
 800589a:	898a      	ldrh	r2, [r1, #12]
 800589c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058a0:	d032      	beq.n	8005908 <__ssputs_r+0x80>
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	6909      	ldr	r1, [r1, #16]
 80058a6:	3301      	adds	r3, #1
 80058a8:	eba5 0901 	sub.w	r9, r5, r1
 80058ac:	6965      	ldr	r5, [r4, #20]
 80058ae:	444b      	add	r3, r9
 80058b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058b8:	106d      	asrs	r5, r5, #1
 80058ba:	429d      	cmp	r5, r3
 80058bc:	bf38      	it	cc
 80058be:	461d      	movcc	r5, r3
 80058c0:	0553      	lsls	r3, r2, #21
 80058c2:	d531      	bpl.n	8005928 <__ssputs_r+0xa0>
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7ff ff6b 	bl	80057a0 <_malloc_r>
 80058ca:	4606      	mov	r6, r0
 80058cc:	b950      	cbnz	r0, 80058e4 <__ssputs_r+0x5c>
 80058ce:	230c      	movs	r3, #12
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	f8ca 3000 	str.w	r3, [sl]
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e4:	464a      	mov	r2, r9
 80058e6:	6921      	ldr	r1, [r4, #16]
 80058e8:	f7ff fb4e 	bl	8004f88 <memcpy>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	6126      	str	r6, [r4, #16]
 80058fa:	444e      	add	r6, r9
 80058fc:	6026      	str	r6, [r4, #0]
 80058fe:	463e      	mov	r6, r7
 8005900:	6165      	str	r5, [r4, #20]
 8005902:	eba5 0509 	sub.w	r5, r5, r9
 8005906:	60a5      	str	r5, [r4, #8]
 8005908:	42be      	cmp	r6, r7
 800590a:	d900      	bls.n	800590e <__ssputs_r+0x86>
 800590c:	463e      	mov	r6, r7
 800590e:	4632      	mov	r2, r6
 8005910:	4641      	mov	r1, r8
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	f000 f966 	bl	8005be4 <memmove>
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	2000      	movs	r0, #0
 800591c:	1b9b      	subs	r3, r3, r6
 800591e:	60a3      	str	r3, [r4, #8]
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	4433      	add	r3, r6
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	e7db      	b.n	80058e0 <__ssputs_r+0x58>
 8005928:	462a      	mov	r2, r5
 800592a:	f000 f981 	bl	8005c30 <_realloc_r>
 800592e:	4606      	mov	r6, r0
 8005930:	2800      	cmp	r0, #0
 8005932:	d1e1      	bne.n	80058f8 <__ssputs_r+0x70>
 8005934:	4650      	mov	r0, sl
 8005936:	6921      	ldr	r1, [r4, #16]
 8005938:	f7ff feca 	bl	80056d0 <_free_r>
 800593c:	e7c7      	b.n	80058ce <__ssputs_r+0x46>
	...

08005940 <_svfiprintf_r>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	4698      	mov	r8, r3
 8005946:	898b      	ldrh	r3, [r1, #12]
 8005948:	4607      	mov	r7, r0
 800594a:	061b      	lsls	r3, r3, #24
 800594c:	460d      	mov	r5, r1
 800594e:	4614      	mov	r4, r2
 8005950:	b09d      	sub	sp, #116	; 0x74
 8005952:	d50e      	bpl.n	8005972 <_svfiprintf_r+0x32>
 8005954:	690b      	ldr	r3, [r1, #16]
 8005956:	b963      	cbnz	r3, 8005972 <_svfiprintf_r+0x32>
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	f7ff ff21 	bl	80057a0 <_malloc_r>
 800595e:	6028      	str	r0, [r5, #0]
 8005960:	6128      	str	r0, [r5, #16]
 8005962:	b920      	cbnz	r0, 800596e <_svfiprintf_r+0x2e>
 8005964:	230c      	movs	r3, #12
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	e0d1      	b.n	8005b12 <_svfiprintf_r+0x1d2>
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	616b      	str	r3, [r5, #20]
 8005972:	2300      	movs	r3, #0
 8005974:	9309      	str	r3, [sp, #36]	; 0x24
 8005976:	2320      	movs	r3, #32
 8005978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800597c:	2330      	movs	r3, #48	; 0x30
 800597e:	f04f 0901 	mov.w	r9, #1
 8005982:	f8cd 800c 	str.w	r8, [sp, #12]
 8005986:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b2c <_svfiprintf_r+0x1ec>
 800598a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800598e:	4623      	mov	r3, r4
 8005990:	469a      	mov	sl, r3
 8005992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005996:	b10a      	cbz	r2, 800599c <_svfiprintf_r+0x5c>
 8005998:	2a25      	cmp	r2, #37	; 0x25
 800599a:	d1f9      	bne.n	8005990 <_svfiprintf_r+0x50>
 800599c:	ebba 0b04 	subs.w	fp, sl, r4
 80059a0:	d00b      	beq.n	80059ba <_svfiprintf_r+0x7a>
 80059a2:	465b      	mov	r3, fp
 80059a4:	4622      	mov	r2, r4
 80059a6:	4629      	mov	r1, r5
 80059a8:	4638      	mov	r0, r7
 80059aa:	f7ff ff6d 	bl	8005888 <__ssputs_r>
 80059ae:	3001      	adds	r0, #1
 80059b0:	f000 80aa 	beq.w	8005b08 <_svfiprintf_r+0x1c8>
 80059b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b6:	445a      	add	r2, fp
 80059b8:	9209      	str	r2, [sp, #36]	; 0x24
 80059ba:	f89a 3000 	ldrb.w	r3, [sl]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80a2 	beq.w	8005b08 <_svfiprintf_r+0x1c8>
 80059c4:	2300      	movs	r3, #0
 80059c6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ce:	f10a 0a01 	add.w	sl, sl, #1
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	9307      	str	r3, [sp, #28]
 80059d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059da:	931a      	str	r3, [sp, #104]	; 0x68
 80059dc:	4654      	mov	r4, sl
 80059de:	2205      	movs	r2, #5
 80059e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e4:	4851      	ldr	r0, [pc, #324]	; (8005b2c <_svfiprintf_r+0x1ec>)
 80059e6:	f7ff fac1 	bl	8004f6c <memchr>
 80059ea:	9a04      	ldr	r2, [sp, #16]
 80059ec:	b9d8      	cbnz	r0, 8005a26 <_svfiprintf_r+0xe6>
 80059ee:	06d0      	lsls	r0, r2, #27
 80059f0:	bf44      	itt	mi
 80059f2:	2320      	movmi	r3, #32
 80059f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f8:	0711      	lsls	r1, r2, #28
 80059fa:	bf44      	itt	mi
 80059fc:	232b      	movmi	r3, #43	; 0x2b
 80059fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a02:	f89a 3000 	ldrb.w	r3, [sl]
 8005a06:	2b2a      	cmp	r3, #42	; 0x2a
 8005a08:	d015      	beq.n	8005a36 <_svfiprintf_r+0xf6>
 8005a0a:	4654      	mov	r4, sl
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f04f 0c0a 	mov.w	ip, #10
 8005a12:	9a07      	ldr	r2, [sp, #28]
 8005a14:	4621      	mov	r1, r4
 8005a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a1a:	3b30      	subs	r3, #48	; 0x30
 8005a1c:	2b09      	cmp	r3, #9
 8005a1e:	d94e      	bls.n	8005abe <_svfiprintf_r+0x17e>
 8005a20:	b1b0      	cbz	r0, 8005a50 <_svfiprintf_r+0x110>
 8005a22:	9207      	str	r2, [sp, #28]
 8005a24:	e014      	b.n	8005a50 <_svfiprintf_r+0x110>
 8005a26:	eba0 0308 	sub.w	r3, r0, r8
 8005a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	46a2      	mov	sl, r4
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	e7d2      	b.n	80059dc <_svfiprintf_r+0x9c>
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	1d19      	adds	r1, r3, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	9103      	str	r1, [sp, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfbb      	ittet	lt
 8005a42:	425b      	neglt	r3, r3
 8005a44:	f042 0202 	orrlt.w	r2, r2, #2
 8005a48:	9307      	strge	r3, [sp, #28]
 8005a4a:	9307      	strlt	r3, [sp, #28]
 8005a4c:	bfb8      	it	lt
 8005a4e:	9204      	strlt	r2, [sp, #16]
 8005a50:	7823      	ldrb	r3, [r4, #0]
 8005a52:	2b2e      	cmp	r3, #46	; 0x2e
 8005a54:	d10c      	bne.n	8005a70 <_svfiprintf_r+0x130>
 8005a56:	7863      	ldrb	r3, [r4, #1]
 8005a58:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5a:	d135      	bne.n	8005ac8 <_svfiprintf_r+0x188>
 8005a5c:	9b03      	ldr	r3, [sp, #12]
 8005a5e:	3402      	adds	r4, #2
 8005a60:	1d1a      	adds	r2, r3, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	9203      	str	r2, [sp, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfb8      	it	lt
 8005a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005b30 <_svfiprintf_r+0x1f0>
 8005a74:	2203      	movs	r2, #3
 8005a76:	4650      	mov	r0, sl
 8005a78:	7821      	ldrb	r1, [r4, #0]
 8005a7a:	f7ff fa77 	bl	8004f6c <memchr>
 8005a7e:	b140      	cbz	r0, 8005a92 <_svfiprintf_r+0x152>
 8005a80:	2340      	movs	r3, #64	; 0x40
 8005a82:	eba0 000a 	sub.w	r0, r0, sl
 8005a86:	fa03 f000 	lsl.w	r0, r3, r0
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	3401      	adds	r4, #1
 8005a8e:	4303      	orrs	r3, r0
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a96:	2206      	movs	r2, #6
 8005a98:	4826      	ldr	r0, [pc, #152]	; (8005b34 <_svfiprintf_r+0x1f4>)
 8005a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a9e:	f7ff fa65 	bl	8004f6c <memchr>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d038      	beq.n	8005b18 <_svfiprintf_r+0x1d8>
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <_svfiprintf_r+0x1f8>)
 8005aa8:	bb1b      	cbnz	r3, 8005af2 <_svfiprintf_r+0x1b2>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	3307      	adds	r3, #7
 8005aae:	f023 0307 	bic.w	r3, r3, #7
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab8:	4433      	add	r3, r6
 8005aba:	9309      	str	r3, [sp, #36]	; 0x24
 8005abc:	e767      	b.n	800598e <_svfiprintf_r+0x4e>
 8005abe:	460c      	mov	r4, r1
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ac6:	e7a5      	b.n	8005a14 <_svfiprintf_r+0xd4>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f04f 0c0a 	mov.w	ip, #10
 8005ace:	4619      	mov	r1, r3
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ada:	3a30      	subs	r2, #48	; 0x30
 8005adc:	2a09      	cmp	r2, #9
 8005ade:	d903      	bls.n	8005ae8 <_svfiprintf_r+0x1a8>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0c5      	beq.n	8005a70 <_svfiprintf_r+0x130>
 8005ae4:	9105      	str	r1, [sp, #20]
 8005ae6:	e7c3      	b.n	8005a70 <_svfiprintf_r+0x130>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	2301      	movs	r3, #1
 8005aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005af0:	e7f0      	b.n	8005ad4 <_svfiprintf_r+0x194>
 8005af2:	ab03      	add	r3, sp, #12
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	462a      	mov	r2, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <_svfiprintf_r+0x1fc>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	f7fd ffb7 	bl	8003a70 <_printf_float>
 8005b02:	1c42      	adds	r2, r0, #1
 8005b04:	4606      	mov	r6, r0
 8005b06:	d1d6      	bne.n	8005ab6 <_svfiprintf_r+0x176>
 8005b08:	89ab      	ldrh	r3, [r5, #12]
 8005b0a:	065b      	lsls	r3, r3, #25
 8005b0c:	f53f af2c 	bmi.w	8005968 <_svfiprintf_r+0x28>
 8005b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b12:	b01d      	add	sp, #116	; 0x74
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	ab03      	add	r3, sp, #12
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	4638      	mov	r0, r7
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <_svfiprintf_r+0x1fc>)
 8005b22:	a904      	add	r1, sp, #16
 8005b24:	f7fe fa40 	bl	8003fa8 <_printf_i>
 8005b28:	e7eb      	b.n	8005b02 <_svfiprintf_r+0x1c2>
 8005b2a:	bf00      	nop
 8005b2c:	0800698c 	.word	0x0800698c
 8005b30:	08006992 	.word	0x08006992
 8005b34:	08006996 	.word	0x08006996
 8005b38:	08003a71 	.word	0x08003a71
 8005b3c:	08005889 	.word	0x08005889

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	2300      	movs	r3, #0
 8005b44:	4d05      	ldr	r5, [pc, #20]	; (8005b5c <_sbrk_r+0x1c>)
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fb fdea 	bl	8001724 <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	200002ec 	.word	0x200002ec

08005b60 <__assert_func>:
 8005b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b62:	4614      	mov	r4, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <__assert_func+0x2c>)
 8005b68:	4605      	mov	r5, r0
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68d8      	ldr	r0, [r3, #12]
 8005b6e:	b14c      	cbz	r4, 8005b84 <__assert_func+0x24>
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <__assert_func+0x30>)
 8005b72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b76:	9100      	str	r1, [sp, #0]
 8005b78:	462b      	mov	r3, r5
 8005b7a:	4906      	ldr	r1, [pc, #24]	; (8005b94 <__assert_func+0x34>)
 8005b7c:	f000 f80e 	bl	8005b9c <fiprintf>
 8005b80:	f000 faaa 	bl	80060d8 <abort>
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <__assert_func+0x38>)
 8005b86:	461c      	mov	r4, r3
 8005b88:	e7f3      	b.n	8005b72 <__assert_func+0x12>
 8005b8a:	bf00      	nop
 8005b8c:	2000001c 	.word	0x2000001c
 8005b90:	0800699d 	.word	0x0800699d
 8005b94:	080069aa 	.word	0x080069aa
 8005b98:	080069d8 	.word	0x080069d8

08005b9c <fiprintf>:
 8005b9c:	b40e      	push	{r1, r2, r3}
 8005b9e:	b503      	push	{r0, r1, lr}
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	4805      	ldr	r0, [pc, #20]	; (8005bbc <fiprintf+0x20>)
 8005ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	f000 f895 	bl	8005cdc <_vfiprintf_r>
 8005bb2:	b002      	add	sp, #8
 8005bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bb8:	b003      	add	sp, #12
 8005bba:	4770      	bx	lr
 8005bbc:	2000001c 	.word	0x2000001c

08005bc0 <__ascii_mbtowc>:
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	b901      	cbnz	r1, 8005bc6 <__ascii_mbtowc+0x6>
 8005bc4:	a901      	add	r1, sp, #4
 8005bc6:	b142      	cbz	r2, 8005bda <__ascii_mbtowc+0x1a>
 8005bc8:	b14b      	cbz	r3, 8005bde <__ascii_mbtowc+0x1e>
 8005bca:	7813      	ldrb	r3, [r2, #0]
 8005bcc:	600b      	str	r3, [r1, #0]
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	1e10      	subs	r0, r2, #0
 8005bd2:	bf18      	it	ne
 8005bd4:	2001      	movne	r0, #1
 8005bd6:	b002      	add	sp, #8
 8005bd8:	4770      	bx	lr
 8005bda:	4610      	mov	r0, r2
 8005bdc:	e7fb      	b.n	8005bd6 <__ascii_mbtowc+0x16>
 8005bde:	f06f 0001 	mvn.w	r0, #1
 8005be2:	e7f8      	b.n	8005bd6 <__ascii_mbtowc+0x16>

08005be4 <memmove>:
 8005be4:	4288      	cmp	r0, r1
 8005be6:	b510      	push	{r4, lr}
 8005be8:	eb01 0402 	add.w	r4, r1, r2
 8005bec:	d902      	bls.n	8005bf4 <memmove+0x10>
 8005bee:	4284      	cmp	r4, r0
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	d807      	bhi.n	8005c04 <memmove+0x20>
 8005bf4:	1e43      	subs	r3, r0, #1
 8005bf6:	42a1      	cmp	r1, r4
 8005bf8:	d008      	beq.n	8005c0c <memmove+0x28>
 8005bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c02:	e7f8      	b.n	8005bf6 <memmove+0x12>
 8005c04:	4601      	mov	r1, r0
 8005c06:	4402      	add	r2, r0
 8005c08:	428a      	cmp	r2, r1
 8005c0a:	d100      	bne.n	8005c0e <memmove+0x2a>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c16:	e7f7      	b.n	8005c08 <memmove+0x24>

08005c18 <__malloc_lock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__malloc_lock+0x8>)
 8005c1a:	f000 bc19 	b.w	8006450 <__retarget_lock_acquire_recursive>
 8005c1e:	bf00      	nop
 8005c20:	200002f0 	.word	0x200002f0

08005c24 <__malloc_unlock>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__malloc_unlock+0x8>)
 8005c26:	f000 bc14 	b.w	8006452 <__retarget_lock_release_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	200002f0 	.word	0x200002f0

08005c30 <_realloc_r>:
 8005c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c34:	4680      	mov	r8, r0
 8005c36:	4614      	mov	r4, r2
 8005c38:	460e      	mov	r6, r1
 8005c3a:	b921      	cbnz	r1, 8005c46 <_realloc_r+0x16>
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	f7ff bdad 	b.w	80057a0 <_malloc_r>
 8005c46:	b92a      	cbnz	r2, 8005c54 <_realloc_r+0x24>
 8005c48:	f7ff fd42 	bl	80056d0 <_free_r>
 8005c4c:	4625      	mov	r5, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c54:	f000 fc64 	bl	8006520 <_malloc_usable_size_r>
 8005c58:	4284      	cmp	r4, r0
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	d802      	bhi.n	8005c64 <_realloc_r+0x34>
 8005c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c62:	d812      	bhi.n	8005c8a <_realloc_r+0x5a>
 8005c64:	4621      	mov	r1, r4
 8005c66:	4640      	mov	r0, r8
 8005c68:	f7ff fd9a 	bl	80057a0 <_malloc_r>
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d0ed      	beq.n	8005c4e <_realloc_r+0x1e>
 8005c72:	42bc      	cmp	r4, r7
 8005c74:	4622      	mov	r2, r4
 8005c76:	4631      	mov	r1, r6
 8005c78:	bf28      	it	cs
 8005c7a:	463a      	movcs	r2, r7
 8005c7c:	f7ff f984 	bl	8004f88 <memcpy>
 8005c80:	4631      	mov	r1, r6
 8005c82:	4640      	mov	r0, r8
 8005c84:	f7ff fd24 	bl	80056d0 <_free_r>
 8005c88:	e7e1      	b.n	8005c4e <_realloc_r+0x1e>
 8005c8a:	4635      	mov	r5, r6
 8005c8c:	e7df      	b.n	8005c4e <_realloc_r+0x1e>

08005c8e <__sfputc_r>:
 8005c8e:	6893      	ldr	r3, [r2, #8]
 8005c90:	b410      	push	{r4}
 8005c92:	3b01      	subs	r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	6093      	str	r3, [r2, #8]
 8005c98:	da07      	bge.n	8005caa <__sfputc_r+0x1c>
 8005c9a:	6994      	ldr	r4, [r2, #24]
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	db01      	blt.n	8005ca4 <__sfputc_r+0x16>
 8005ca0:	290a      	cmp	r1, #10
 8005ca2:	d102      	bne.n	8005caa <__sfputc_r+0x1c>
 8005ca4:	bc10      	pop	{r4}
 8005ca6:	f000 b949 	b.w	8005f3c <__swbuf_r>
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	1c58      	adds	r0, r3, #1
 8005cae:	6010      	str	r0, [r2, #0]
 8005cb0:	7019      	strb	r1, [r3, #0]
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	bc10      	pop	{r4}
 8005cb6:	4770      	bx	lr

08005cb8 <__sfputs_r>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	4606      	mov	r6, r0
 8005cbc:	460f      	mov	r7, r1
 8005cbe:	4614      	mov	r4, r2
 8005cc0:	18d5      	adds	r5, r2, r3
 8005cc2:	42ac      	cmp	r4, r5
 8005cc4:	d101      	bne.n	8005cca <__sfputs_r+0x12>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	e007      	b.n	8005cda <__sfputs_r+0x22>
 8005cca:	463a      	mov	r2, r7
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd2:	f7ff ffdc 	bl	8005c8e <__sfputc_r>
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	d1f3      	bne.n	8005cc2 <__sfputs_r+0xa>
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005cdc <_vfiprintf_r>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	4698      	mov	r8, r3
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	b09d      	sub	sp, #116	; 0x74
 8005cea:	b118      	cbz	r0, 8005cf4 <_vfiprintf_r+0x18>
 8005cec:	6983      	ldr	r3, [r0, #24]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <_vfiprintf_r+0x18>
 8005cf0:	f000 fb10 	bl	8006314 <__sinit>
 8005cf4:	4b89      	ldr	r3, [pc, #548]	; (8005f1c <_vfiprintf_r+0x240>)
 8005cf6:	429d      	cmp	r5, r3
 8005cf8:	d11b      	bne.n	8005d32 <_vfiprintf_r+0x56>
 8005cfa:	6875      	ldr	r5, [r6, #4]
 8005cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cfe:	07d9      	lsls	r1, r3, #31
 8005d00:	d405      	bmi.n	8005d0e <_vfiprintf_r+0x32>
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	059a      	lsls	r2, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_vfiprintf_r+0x32>
 8005d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d0a:	f000 fba1 	bl	8006450 <__retarget_lock_acquire_recursive>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	071b      	lsls	r3, r3, #28
 8005d12:	d501      	bpl.n	8005d18 <_vfiprintf_r+0x3c>
 8005d14:	692b      	ldr	r3, [r5, #16]
 8005d16:	b9eb      	cbnz	r3, 8005d54 <_vfiprintf_r+0x78>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 f96e 	bl	8005ffc <__swsetup_r>
 8005d20:	b1c0      	cbz	r0, 8005d54 <_vfiprintf_r+0x78>
 8005d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d24:	07dc      	lsls	r4, r3, #31
 8005d26:	d50e      	bpl.n	8005d46 <_vfiprintf_r+0x6a>
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	b01d      	add	sp, #116	; 0x74
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d32:	4b7b      	ldr	r3, [pc, #492]	; (8005f20 <_vfiprintf_r+0x244>)
 8005d34:	429d      	cmp	r5, r3
 8005d36:	d101      	bne.n	8005d3c <_vfiprintf_r+0x60>
 8005d38:	68b5      	ldr	r5, [r6, #8]
 8005d3a:	e7df      	b.n	8005cfc <_vfiprintf_r+0x20>
 8005d3c:	4b79      	ldr	r3, [pc, #484]	; (8005f24 <_vfiprintf_r+0x248>)
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	bf08      	it	eq
 8005d42:	68f5      	ldreq	r5, [r6, #12]
 8005d44:	e7da      	b.n	8005cfc <_vfiprintf_r+0x20>
 8005d46:	89ab      	ldrh	r3, [r5, #12]
 8005d48:	0598      	lsls	r0, r3, #22
 8005d4a:	d4ed      	bmi.n	8005d28 <_vfiprintf_r+0x4c>
 8005d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d4e:	f000 fb80 	bl	8006452 <__retarget_lock_release_recursive>
 8005d52:	e7e9      	b.n	8005d28 <_vfiprintf_r+0x4c>
 8005d54:	2300      	movs	r3, #0
 8005d56:	9309      	str	r3, [sp, #36]	; 0x24
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d5e:	2330      	movs	r3, #48	; 0x30
 8005d60:	f04f 0901 	mov.w	r9, #1
 8005d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005f28 <_vfiprintf_r+0x24c>
 8005d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d70:	4623      	mov	r3, r4
 8005d72:	469a      	mov	sl, r3
 8005d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d78:	b10a      	cbz	r2, 8005d7e <_vfiprintf_r+0xa2>
 8005d7a:	2a25      	cmp	r2, #37	; 0x25
 8005d7c:	d1f9      	bne.n	8005d72 <_vfiprintf_r+0x96>
 8005d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d82:	d00b      	beq.n	8005d9c <_vfiprintf_r+0xc0>
 8005d84:	465b      	mov	r3, fp
 8005d86:	4622      	mov	r2, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff ff94 	bl	8005cb8 <__sfputs_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	f000 80aa 	beq.w	8005eea <_vfiprintf_r+0x20e>
 8005d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d98:	445a      	add	r2, fp
 8005d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80a2 	beq.w	8005eea <_vfiprintf_r+0x20e>
 8005da6:	2300      	movs	r3, #0
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db0:	f10a 0a01 	add.w	sl, sl, #1
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dbe:	4654      	mov	r4, sl
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc6:	4858      	ldr	r0, [pc, #352]	; (8005f28 <_vfiprintf_r+0x24c>)
 8005dc8:	f7ff f8d0 	bl	8004f6c <memchr>
 8005dcc:	9a04      	ldr	r2, [sp, #16]
 8005dce:	b9d8      	cbnz	r0, 8005e08 <_vfiprintf_r+0x12c>
 8005dd0:	06d1      	lsls	r1, r2, #27
 8005dd2:	bf44      	itt	mi
 8005dd4:	2320      	movmi	r3, #32
 8005dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dda:	0713      	lsls	r3, r2, #28
 8005ddc:	bf44      	itt	mi
 8005dde:	232b      	movmi	r3, #43	; 0x2b
 8005de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005de4:	f89a 3000 	ldrb.w	r3, [sl]
 8005de8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dea:	d015      	beq.n	8005e18 <_vfiprintf_r+0x13c>
 8005dec:	4654      	mov	r4, sl
 8005dee:	2000      	movs	r0, #0
 8005df0:	f04f 0c0a 	mov.w	ip, #10
 8005df4:	9a07      	ldr	r2, [sp, #28]
 8005df6:	4621      	mov	r1, r4
 8005df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dfc:	3b30      	subs	r3, #48	; 0x30
 8005dfe:	2b09      	cmp	r3, #9
 8005e00:	d94e      	bls.n	8005ea0 <_vfiprintf_r+0x1c4>
 8005e02:	b1b0      	cbz	r0, 8005e32 <_vfiprintf_r+0x156>
 8005e04:	9207      	str	r2, [sp, #28]
 8005e06:	e014      	b.n	8005e32 <_vfiprintf_r+0x156>
 8005e08:	eba0 0308 	sub.w	r3, r0, r8
 8005e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e10:	4313      	orrs	r3, r2
 8005e12:	46a2      	mov	sl, r4
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	e7d2      	b.n	8005dbe <_vfiprintf_r+0xe2>
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	1d19      	adds	r1, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	9103      	str	r1, [sp, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bfbb      	ittet	lt
 8005e24:	425b      	neglt	r3, r3
 8005e26:	f042 0202 	orrlt.w	r2, r2, #2
 8005e2a:	9307      	strge	r3, [sp, #28]
 8005e2c:	9307      	strlt	r3, [sp, #28]
 8005e2e:	bfb8      	it	lt
 8005e30:	9204      	strlt	r2, [sp, #16]
 8005e32:	7823      	ldrb	r3, [r4, #0]
 8005e34:	2b2e      	cmp	r3, #46	; 0x2e
 8005e36:	d10c      	bne.n	8005e52 <_vfiprintf_r+0x176>
 8005e38:	7863      	ldrb	r3, [r4, #1]
 8005e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3c:	d135      	bne.n	8005eaa <_vfiprintf_r+0x1ce>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	3402      	adds	r4, #2
 8005e42:	1d1a      	adds	r2, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	9203      	str	r2, [sp, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bfb8      	it	lt
 8005e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005f2c <_vfiprintf_r+0x250>
 8005e56:	2203      	movs	r2, #3
 8005e58:	4650      	mov	r0, sl
 8005e5a:	7821      	ldrb	r1, [r4, #0]
 8005e5c:	f7ff f886 	bl	8004f6c <memchr>
 8005e60:	b140      	cbz	r0, 8005e74 <_vfiprintf_r+0x198>
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	eba0 000a 	sub.w	r0, r0, sl
 8005e68:	fa03 f000 	lsl.w	r0, r3, r0
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	3401      	adds	r4, #1
 8005e70:	4303      	orrs	r3, r0
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e78:	2206      	movs	r2, #6
 8005e7a:	482d      	ldr	r0, [pc, #180]	; (8005f30 <_vfiprintf_r+0x254>)
 8005e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e80:	f7ff f874 	bl	8004f6c <memchr>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d03f      	beq.n	8005f08 <_vfiprintf_r+0x22c>
 8005e88:	4b2a      	ldr	r3, [pc, #168]	; (8005f34 <_vfiprintf_r+0x258>)
 8005e8a:	bb1b      	cbnz	r3, 8005ed4 <_vfiprintf_r+0x1f8>
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	3307      	adds	r3, #7
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	3308      	adds	r3, #8
 8005e96:	9303      	str	r3, [sp, #12]
 8005e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9a:	443b      	add	r3, r7
 8005e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9e:	e767      	b.n	8005d70 <_vfiprintf_r+0x94>
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ea8:	e7a5      	b.n	8005df6 <_vfiprintf_r+0x11a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f04f 0c0a 	mov.w	ip, #10
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	3401      	adds	r4, #1
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ebc:	3a30      	subs	r2, #48	; 0x30
 8005ebe:	2a09      	cmp	r2, #9
 8005ec0:	d903      	bls.n	8005eca <_vfiprintf_r+0x1ee>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0c5      	beq.n	8005e52 <_vfiprintf_r+0x176>
 8005ec6:	9105      	str	r1, [sp, #20]
 8005ec8:	e7c3      	b.n	8005e52 <_vfiprintf_r+0x176>
 8005eca:	4604      	mov	r4, r0
 8005ecc:	2301      	movs	r3, #1
 8005ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ed2:	e7f0      	b.n	8005eb6 <_vfiprintf_r+0x1da>
 8005ed4:	ab03      	add	r3, sp, #12
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	462a      	mov	r2, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <_vfiprintf_r+0x25c>)
 8005ede:	a904      	add	r1, sp, #16
 8005ee0:	f7fd fdc6 	bl	8003a70 <_printf_float>
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	1c78      	adds	r0, r7, #1
 8005ee8:	d1d6      	bne.n	8005e98 <_vfiprintf_r+0x1bc>
 8005eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eec:	07d9      	lsls	r1, r3, #31
 8005eee:	d405      	bmi.n	8005efc <_vfiprintf_r+0x220>
 8005ef0:	89ab      	ldrh	r3, [r5, #12]
 8005ef2:	059a      	lsls	r2, r3, #22
 8005ef4:	d402      	bmi.n	8005efc <_vfiprintf_r+0x220>
 8005ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ef8:	f000 faab 	bl	8006452 <__retarget_lock_release_recursive>
 8005efc:	89ab      	ldrh	r3, [r5, #12]
 8005efe:	065b      	lsls	r3, r3, #25
 8005f00:	f53f af12 	bmi.w	8005d28 <_vfiprintf_r+0x4c>
 8005f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f06:	e711      	b.n	8005d2c <_vfiprintf_r+0x50>
 8005f08:	ab03      	add	r3, sp, #12
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4630      	mov	r0, r6
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <_vfiprintf_r+0x25c>)
 8005f12:	a904      	add	r1, sp, #16
 8005f14:	f7fe f848 	bl	8003fa8 <_printf_i>
 8005f18:	e7e4      	b.n	8005ee4 <_vfiprintf_r+0x208>
 8005f1a:	bf00      	nop
 8005f1c:	08006b04 	.word	0x08006b04
 8005f20:	08006b24 	.word	0x08006b24
 8005f24:	08006ae4 	.word	0x08006ae4
 8005f28:	0800698c 	.word	0x0800698c
 8005f2c:	08006992 	.word	0x08006992
 8005f30:	08006996 	.word	0x08006996
 8005f34:	08003a71 	.word	0x08003a71
 8005f38:	08005cb9 	.word	0x08005cb9

08005f3c <__swbuf_r>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	460e      	mov	r6, r1
 8005f40:	4614      	mov	r4, r2
 8005f42:	4605      	mov	r5, r0
 8005f44:	b118      	cbz	r0, 8005f4e <__swbuf_r+0x12>
 8005f46:	6983      	ldr	r3, [r0, #24]
 8005f48:	b90b      	cbnz	r3, 8005f4e <__swbuf_r+0x12>
 8005f4a:	f000 f9e3 	bl	8006314 <__sinit>
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <__swbuf_r+0x98>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	d12b      	bne.n	8005fac <__swbuf_r+0x70>
 8005f54:	686c      	ldr	r4, [r5, #4]
 8005f56:	69a3      	ldr	r3, [r4, #24]
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	071a      	lsls	r2, r3, #28
 8005f5e:	d52f      	bpl.n	8005fc0 <__swbuf_r+0x84>
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	b36b      	cbz	r3, 8005fc0 <__swbuf_r+0x84>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	6820      	ldr	r0, [r4, #0]
 8005f68:	b2f6      	uxtb	r6, r6
 8005f6a:	1ac0      	subs	r0, r0, r3
 8005f6c:	6963      	ldr	r3, [r4, #20]
 8005f6e:	4637      	mov	r7, r6
 8005f70:	4283      	cmp	r3, r0
 8005f72:	dc04      	bgt.n	8005f7e <__swbuf_r+0x42>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f938 	bl	80061ec <_fflush_r>
 8005f7c:	bb30      	cbnz	r0, 8005fcc <__swbuf_r+0x90>
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	3001      	adds	r0, #1
 8005f82:	3b01      	subs	r3, #1
 8005f84:	60a3      	str	r3, [r4, #8]
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	6022      	str	r2, [r4, #0]
 8005f8c:	701e      	strb	r6, [r3, #0]
 8005f8e:	6963      	ldr	r3, [r4, #20]
 8005f90:	4283      	cmp	r3, r0
 8005f92:	d004      	beq.n	8005f9e <__swbuf_r+0x62>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	07db      	lsls	r3, r3, #31
 8005f98:	d506      	bpl.n	8005fa8 <__swbuf_r+0x6c>
 8005f9a:	2e0a      	cmp	r6, #10
 8005f9c:	d104      	bne.n	8005fa8 <__swbuf_r+0x6c>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f923 	bl	80061ec <_fflush_r>
 8005fa6:	b988      	cbnz	r0, 8005fcc <__swbuf_r+0x90>
 8005fa8:	4638      	mov	r0, r7
 8005faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <__swbuf_r+0x9c>)
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d101      	bne.n	8005fb6 <__swbuf_r+0x7a>
 8005fb2:	68ac      	ldr	r4, [r5, #8]
 8005fb4:	e7cf      	b.n	8005f56 <__swbuf_r+0x1a>
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <__swbuf_r+0xa0>)
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	bf08      	it	eq
 8005fbc:	68ec      	ldreq	r4, [r5, #12]
 8005fbe:	e7ca      	b.n	8005f56 <__swbuf_r+0x1a>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f81a 	bl	8005ffc <__swsetup_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d0cb      	beq.n	8005f64 <__swbuf_r+0x28>
 8005fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8005fd0:	e7ea      	b.n	8005fa8 <__swbuf_r+0x6c>
 8005fd2:	bf00      	nop
 8005fd4:	08006b04 	.word	0x08006b04
 8005fd8:	08006b24 	.word	0x08006b24
 8005fdc:	08006ae4 	.word	0x08006ae4

08005fe0 <__ascii_wctomb>:
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4608      	mov	r0, r1
 8005fe4:	b141      	cbz	r1, 8005ff8 <__ascii_wctomb+0x18>
 8005fe6:	2aff      	cmp	r2, #255	; 0xff
 8005fe8:	d904      	bls.n	8005ff4 <__ascii_wctomb+0x14>
 8005fea:	228a      	movs	r2, #138	; 0x8a
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	4770      	bx	lr
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	700a      	strb	r2, [r1, #0]
 8005ff8:	4770      	bx	lr
	...

08005ffc <__swsetup_r>:
 8005ffc:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <__swsetup_r+0xcc>)
 8005ffe:	b570      	push	{r4, r5, r6, lr}
 8006000:	681d      	ldr	r5, [r3, #0]
 8006002:	4606      	mov	r6, r0
 8006004:	460c      	mov	r4, r1
 8006006:	b125      	cbz	r5, 8006012 <__swsetup_r+0x16>
 8006008:	69ab      	ldr	r3, [r5, #24]
 800600a:	b913      	cbnz	r3, 8006012 <__swsetup_r+0x16>
 800600c:	4628      	mov	r0, r5
 800600e:	f000 f981 	bl	8006314 <__sinit>
 8006012:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <__swsetup_r+0xd0>)
 8006014:	429c      	cmp	r4, r3
 8006016:	d10f      	bne.n	8006038 <__swsetup_r+0x3c>
 8006018:	686c      	ldr	r4, [r5, #4]
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006020:	0719      	lsls	r1, r3, #28
 8006022:	d42c      	bmi.n	800607e <__swsetup_r+0x82>
 8006024:	06dd      	lsls	r5, r3, #27
 8006026:	d411      	bmi.n	800604c <__swsetup_r+0x50>
 8006028:	2309      	movs	r3, #9
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	e03e      	b.n	80060b6 <__swsetup_r+0xba>
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <__swsetup_r+0xd4>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d101      	bne.n	8006042 <__swsetup_r+0x46>
 800603e:	68ac      	ldr	r4, [r5, #8]
 8006040:	e7eb      	b.n	800601a <__swsetup_r+0x1e>
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <__swsetup_r+0xd8>)
 8006044:	429c      	cmp	r4, r3
 8006046:	bf08      	it	eq
 8006048:	68ec      	ldreq	r4, [r5, #12]
 800604a:	e7e6      	b.n	800601a <__swsetup_r+0x1e>
 800604c:	0758      	lsls	r0, r3, #29
 800604e:	d512      	bpl.n	8006076 <__swsetup_r+0x7a>
 8006050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006052:	b141      	cbz	r1, 8006066 <__swsetup_r+0x6a>
 8006054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006058:	4299      	cmp	r1, r3
 800605a:	d002      	beq.n	8006062 <__swsetup_r+0x66>
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff fb37 	bl	80056d0 <_free_r>
 8006062:	2300      	movs	r3, #0
 8006064:	6363      	str	r3, [r4, #52]	; 0x34
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	2300      	movs	r3, #0
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	f043 0308 	orr.w	r3, r3, #8
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	b94b      	cbnz	r3, 8006096 <__swsetup_r+0x9a>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608c:	d003      	beq.n	8006096 <__swsetup_r+0x9a>
 800608e:	4621      	mov	r1, r4
 8006090:	4630      	mov	r0, r6
 8006092:	f000 fa05 	bl	80064a0 <__smakebuf_r>
 8006096:	89a0      	ldrh	r0, [r4, #12]
 8006098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800609c:	f010 0301 	ands.w	r3, r0, #1
 80060a0:	d00a      	beq.n	80060b8 <__swsetup_r+0xbc>
 80060a2:	2300      	movs	r3, #0
 80060a4:	60a3      	str	r3, [r4, #8]
 80060a6:	6963      	ldr	r3, [r4, #20]
 80060a8:	425b      	negs	r3, r3
 80060aa:	61a3      	str	r3, [r4, #24]
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	b943      	cbnz	r3, 80060c2 <__swsetup_r+0xc6>
 80060b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060b4:	d1ba      	bne.n	800602c <__swsetup_r+0x30>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	0781      	lsls	r1, r0, #30
 80060ba:	bf58      	it	pl
 80060bc:	6963      	ldrpl	r3, [r4, #20]
 80060be:	60a3      	str	r3, [r4, #8]
 80060c0:	e7f4      	b.n	80060ac <__swsetup_r+0xb0>
 80060c2:	2000      	movs	r0, #0
 80060c4:	e7f7      	b.n	80060b6 <__swsetup_r+0xba>
 80060c6:	bf00      	nop
 80060c8:	2000001c 	.word	0x2000001c
 80060cc:	08006b04 	.word	0x08006b04
 80060d0:	08006b24 	.word	0x08006b24
 80060d4:	08006ae4 	.word	0x08006ae4

080060d8 <abort>:
 80060d8:	2006      	movs	r0, #6
 80060da:	b508      	push	{r3, lr}
 80060dc:	f000 fa50 	bl	8006580 <raise>
 80060e0:	2001      	movs	r0, #1
 80060e2:	f7fb faab 	bl	800163c <_exit>
	...

080060e8 <__sflush_r>:
 80060e8:	898a      	ldrh	r2, [r1, #12]
 80060ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ec:	4605      	mov	r5, r0
 80060ee:	0710      	lsls	r0, r2, #28
 80060f0:	460c      	mov	r4, r1
 80060f2:	d457      	bmi.n	80061a4 <__sflush_r+0xbc>
 80060f4:	684b      	ldr	r3, [r1, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dc04      	bgt.n	8006104 <__sflush_r+0x1c>
 80060fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	dc01      	bgt.n	8006104 <__sflush_r+0x1c>
 8006100:	2000      	movs	r0, #0
 8006102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006106:	2e00      	cmp	r6, #0
 8006108:	d0fa      	beq.n	8006100 <__sflush_r+0x18>
 800610a:	2300      	movs	r3, #0
 800610c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006110:	682f      	ldr	r7, [r5, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	d032      	beq.n	800617c <__sflush_r+0x94>
 8006116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	075a      	lsls	r2, r3, #29
 800611c:	d505      	bpl.n	800612a <__sflush_r+0x42>
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	1ac0      	subs	r0, r0, r3
 8006122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006124:	b10b      	cbz	r3, 800612a <__sflush_r+0x42>
 8006126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006128:	1ac0      	subs	r0, r0, r3
 800612a:	2300      	movs	r3, #0
 800612c:	4602      	mov	r2, r0
 800612e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006130:	4628      	mov	r0, r5
 8006132:	6a21      	ldr	r1, [r4, #32]
 8006134:	47b0      	blx	r6
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	d106      	bne.n	800614a <__sflush_r+0x62>
 800613c:	6829      	ldr	r1, [r5, #0]
 800613e:	291d      	cmp	r1, #29
 8006140:	d82c      	bhi.n	800619c <__sflush_r+0xb4>
 8006142:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <__sflush_r+0x100>)
 8006144:	40ca      	lsrs	r2, r1
 8006146:	07d6      	lsls	r6, r2, #31
 8006148:	d528      	bpl.n	800619c <__sflush_r+0xb4>
 800614a:	2200      	movs	r2, #0
 800614c:	6062      	str	r2, [r4, #4]
 800614e:	6922      	ldr	r2, [r4, #16]
 8006150:	04d9      	lsls	r1, r3, #19
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	d504      	bpl.n	8006160 <__sflush_r+0x78>
 8006156:	1c42      	adds	r2, r0, #1
 8006158:	d101      	bne.n	800615e <__sflush_r+0x76>
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	b903      	cbnz	r3, 8006160 <__sflush_r+0x78>
 800615e:	6560      	str	r0, [r4, #84]	; 0x54
 8006160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006162:	602f      	str	r7, [r5, #0]
 8006164:	2900      	cmp	r1, #0
 8006166:	d0cb      	beq.n	8006100 <__sflush_r+0x18>
 8006168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800616c:	4299      	cmp	r1, r3
 800616e:	d002      	beq.n	8006176 <__sflush_r+0x8e>
 8006170:	4628      	mov	r0, r5
 8006172:	f7ff faad 	bl	80056d0 <_free_r>
 8006176:	2000      	movs	r0, #0
 8006178:	6360      	str	r0, [r4, #52]	; 0x34
 800617a:	e7c2      	b.n	8006102 <__sflush_r+0x1a>
 800617c:	6a21      	ldr	r1, [r4, #32]
 800617e:	2301      	movs	r3, #1
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	1c41      	adds	r1, r0, #1
 8006186:	d1c7      	bne.n	8006118 <__sflush_r+0x30>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0c4      	beq.n	8006118 <__sflush_r+0x30>
 800618e:	2b1d      	cmp	r3, #29
 8006190:	d001      	beq.n	8006196 <__sflush_r+0xae>
 8006192:	2b16      	cmp	r3, #22
 8006194:	d101      	bne.n	800619a <__sflush_r+0xb2>
 8006196:	602f      	str	r7, [r5, #0]
 8006198:	e7b2      	b.n	8006100 <__sflush_r+0x18>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	e7ae      	b.n	8006102 <__sflush_r+0x1a>
 80061a4:	690f      	ldr	r7, [r1, #16]
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	d0aa      	beq.n	8006100 <__sflush_r+0x18>
 80061aa:	0793      	lsls	r3, r2, #30
 80061ac:	bf18      	it	ne
 80061ae:	2300      	movne	r3, #0
 80061b0:	680e      	ldr	r6, [r1, #0]
 80061b2:	bf08      	it	eq
 80061b4:	694b      	ldreq	r3, [r1, #20]
 80061b6:	1bf6      	subs	r6, r6, r7
 80061b8:	600f      	str	r7, [r1, #0]
 80061ba:	608b      	str	r3, [r1, #8]
 80061bc:	2e00      	cmp	r6, #0
 80061be:	dd9f      	ble.n	8006100 <__sflush_r+0x18>
 80061c0:	4633      	mov	r3, r6
 80061c2:	463a      	mov	r2, r7
 80061c4:	4628      	mov	r0, r5
 80061c6:	6a21      	ldr	r1, [r4, #32]
 80061c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80061cc:	47e0      	blx	ip
 80061ce:	2800      	cmp	r0, #0
 80061d0:	dc06      	bgt.n	80061e0 <__sflush_r+0xf8>
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	e790      	b.n	8006102 <__sflush_r+0x1a>
 80061e0:	4407      	add	r7, r0
 80061e2:	1a36      	subs	r6, r6, r0
 80061e4:	e7ea      	b.n	80061bc <__sflush_r+0xd4>
 80061e6:	bf00      	nop
 80061e8:	20400001 	.word	0x20400001

080061ec <_fflush_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	690b      	ldr	r3, [r1, #16]
 80061f0:	4605      	mov	r5, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	b913      	cbnz	r3, 80061fc <_fflush_r+0x10>
 80061f6:	2500      	movs	r5, #0
 80061f8:	4628      	mov	r0, r5
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	b118      	cbz	r0, 8006206 <_fflush_r+0x1a>
 80061fe:	6983      	ldr	r3, [r0, #24]
 8006200:	b90b      	cbnz	r3, 8006206 <_fflush_r+0x1a>
 8006202:	f000 f887 	bl	8006314 <__sinit>
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <_fflush_r+0x6c>)
 8006208:	429c      	cmp	r4, r3
 800620a:	d11b      	bne.n	8006244 <_fflush_r+0x58>
 800620c:	686c      	ldr	r4, [r5, #4]
 800620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0ef      	beq.n	80061f6 <_fflush_r+0xa>
 8006216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006218:	07d0      	lsls	r0, r2, #31
 800621a:	d404      	bmi.n	8006226 <_fflush_r+0x3a>
 800621c:	0599      	lsls	r1, r3, #22
 800621e:	d402      	bmi.n	8006226 <_fflush_r+0x3a>
 8006220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006222:	f000 f915 	bl	8006450 <__retarget_lock_acquire_recursive>
 8006226:	4628      	mov	r0, r5
 8006228:	4621      	mov	r1, r4
 800622a:	f7ff ff5d 	bl	80060e8 <__sflush_r>
 800622e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006230:	4605      	mov	r5, r0
 8006232:	07da      	lsls	r2, r3, #31
 8006234:	d4e0      	bmi.n	80061f8 <_fflush_r+0xc>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	059b      	lsls	r3, r3, #22
 800623a:	d4dd      	bmi.n	80061f8 <_fflush_r+0xc>
 800623c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623e:	f000 f908 	bl	8006452 <__retarget_lock_release_recursive>
 8006242:	e7d9      	b.n	80061f8 <_fflush_r+0xc>
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <_fflush_r+0x70>)
 8006246:	429c      	cmp	r4, r3
 8006248:	d101      	bne.n	800624e <_fflush_r+0x62>
 800624a:	68ac      	ldr	r4, [r5, #8]
 800624c:	e7df      	b.n	800620e <_fflush_r+0x22>
 800624e:	4b04      	ldr	r3, [pc, #16]	; (8006260 <_fflush_r+0x74>)
 8006250:	429c      	cmp	r4, r3
 8006252:	bf08      	it	eq
 8006254:	68ec      	ldreq	r4, [r5, #12]
 8006256:	e7da      	b.n	800620e <_fflush_r+0x22>
 8006258:	08006b04 	.word	0x08006b04
 800625c:	08006b24 	.word	0x08006b24
 8006260:	08006ae4 	.word	0x08006ae4

08006264 <std>:
 8006264:	2300      	movs	r3, #0
 8006266:	b510      	push	{r4, lr}
 8006268:	4604      	mov	r4, r0
 800626a:	e9c0 3300 	strd	r3, r3, [r0]
 800626e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006272:	6083      	str	r3, [r0, #8]
 8006274:	8181      	strh	r1, [r0, #12]
 8006276:	6643      	str	r3, [r0, #100]	; 0x64
 8006278:	81c2      	strh	r2, [r0, #14]
 800627a:	6183      	str	r3, [r0, #24]
 800627c:	4619      	mov	r1, r3
 800627e:	2208      	movs	r2, #8
 8006280:	305c      	adds	r0, #92	; 0x5c
 8006282:	f7fd fb4f 	bl	8003924 <memset>
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <std+0x38>)
 8006288:	6224      	str	r4, [r4, #32]
 800628a:	6263      	str	r3, [r4, #36]	; 0x24
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <std+0x3c>)
 800628e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <std+0x40>)
 8006292:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <std+0x44>)
 8006296:	6323      	str	r3, [r4, #48]	; 0x30
 8006298:	bd10      	pop	{r4, pc}
 800629a:	bf00      	nop
 800629c:	080065b9 	.word	0x080065b9
 80062a0:	080065db 	.word	0x080065db
 80062a4:	08006613 	.word	0x08006613
 80062a8:	08006637 	.word	0x08006637

080062ac <_cleanup_r>:
 80062ac:	4901      	ldr	r1, [pc, #4]	; (80062b4 <_cleanup_r+0x8>)
 80062ae:	f000 b8af 	b.w	8006410 <_fwalk_reent>
 80062b2:	bf00      	nop
 80062b4:	080061ed 	.word	0x080061ed

080062b8 <__sfmoreglue>:
 80062b8:	2268      	movs	r2, #104	; 0x68
 80062ba:	b570      	push	{r4, r5, r6, lr}
 80062bc:	1e4d      	subs	r5, r1, #1
 80062be:	4355      	muls	r5, r2
 80062c0:	460e      	mov	r6, r1
 80062c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062c6:	f7ff fa6b 	bl	80057a0 <_malloc_r>
 80062ca:	4604      	mov	r4, r0
 80062cc:	b140      	cbz	r0, 80062e0 <__sfmoreglue+0x28>
 80062ce:	2100      	movs	r1, #0
 80062d0:	e9c0 1600 	strd	r1, r6, [r0]
 80062d4:	300c      	adds	r0, #12
 80062d6:	60a0      	str	r0, [r4, #8]
 80062d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062dc:	f7fd fb22 	bl	8003924 <memset>
 80062e0:	4620      	mov	r0, r4
 80062e2:	bd70      	pop	{r4, r5, r6, pc}

080062e4 <__sfp_lock_acquire>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__sfp_lock_acquire+0x8>)
 80062e6:	f000 b8b3 	b.w	8006450 <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	200002f1 	.word	0x200002f1

080062f0 <__sfp_lock_release>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__sfp_lock_release+0x8>)
 80062f2:	f000 b8ae 	b.w	8006452 <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	200002f1 	.word	0x200002f1

080062fc <__sinit_lock_acquire>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__sinit_lock_acquire+0x8>)
 80062fe:	f000 b8a7 	b.w	8006450 <__retarget_lock_acquire_recursive>
 8006302:	bf00      	nop
 8006304:	200002f2 	.word	0x200002f2

08006308 <__sinit_lock_release>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__sinit_lock_release+0x8>)
 800630a:	f000 b8a2 	b.w	8006452 <__retarget_lock_release_recursive>
 800630e:	bf00      	nop
 8006310:	200002f2 	.word	0x200002f2

08006314 <__sinit>:
 8006314:	b510      	push	{r4, lr}
 8006316:	4604      	mov	r4, r0
 8006318:	f7ff fff0 	bl	80062fc <__sinit_lock_acquire>
 800631c:	69a3      	ldr	r3, [r4, #24]
 800631e:	b11b      	cbz	r3, 8006328 <__sinit+0x14>
 8006320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006324:	f7ff bff0 	b.w	8006308 <__sinit_lock_release>
 8006328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800632c:	6523      	str	r3, [r4, #80]	; 0x50
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <__sinit+0x68>)
 8006330:	4a13      	ldr	r2, [pc, #76]	; (8006380 <__sinit+0x6c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	62a2      	str	r2, [r4, #40]	; 0x28
 8006336:	42a3      	cmp	r3, r4
 8006338:	bf08      	it	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	4620      	mov	r0, r4
 800633e:	bf08      	it	eq
 8006340:	61a3      	streq	r3, [r4, #24]
 8006342:	f000 f81f 	bl	8006384 <__sfp>
 8006346:	6060      	str	r0, [r4, #4]
 8006348:	4620      	mov	r0, r4
 800634a:	f000 f81b 	bl	8006384 <__sfp>
 800634e:	60a0      	str	r0, [r4, #8]
 8006350:	4620      	mov	r0, r4
 8006352:	f000 f817 	bl	8006384 <__sfp>
 8006356:	2200      	movs	r2, #0
 8006358:	2104      	movs	r1, #4
 800635a:	60e0      	str	r0, [r4, #12]
 800635c:	6860      	ldr	r0, [r4, #4]
 800635e:	f7ff ff81 	bl	8006264 <std>
 8006362:	2201      	movs	r2, #1
 8006364:	2109      	movs	r1, #9
 8006366:	68a0      	ldr	r0, [r4, #8]
 8006368:	f7ff ff7c 	bl	8006264 <std>
 800636c:	2202      	movs	r2, #2
 800636e:	2112      	movs	r1, #18
 8006370:	68e0      	ldr	r0, [r4, #12]
 8006372:	f7ff ff77 	bl	8006264 <std>
 8006376:	2301      	movs	r3, #1
 8006378:	61a3      	str	r3, [r4, #24]
 800637a:	e7d1      	b.n	8006320 <__sinit+0xc>
 800637c:	08006768 	.word	0x08006768
 8006380:	080062ad 	.word	0x080062ad

08006384 <__sfp>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	4607      	mov	r7, r0
 8006388:	f7ff ffac 	bl	80062e4 <__sfp_lock_acquire>
 800638c:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <__sfp+0x84>)
 800638e:	681e      	ldr	r6, [r3, #0]
 8006390:	69b3      	ldr	r3, [r6, #24]
 8006392:	b913      	cbnz	r3, 800639a <__sfp+0x16>
 8006394:	4630      	mov	r0, r6
 8006396:	f7ff ffbd 	bl	8006314 <__sinit>
 800639a:	3648      	adds	r6, #72	; 0x48
 800639c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	d503      	bpl.n	80063ac <__sfp+0x28>
 80063a4:	6833      	ldr	r3, [r6, #0]
 80063a6:	b30b      	cbz	r3, 80063ec <__sfp+0x68>
 80063a8:	6836      	ldr	r6, [r6, #0]
 80063aa:	e7f7      	b.n	800639c <__sfp+0x18>
 80063ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063b0:	b9d5      	cbnz	r5, 80063e8 <__sfp+0x64>
 80063b2:	4b16      	ldr	r3, [pc, #88]	; (800640c <__sfp+0x88>)
 80063b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063b8:	60e3      	str	r3, [r4, #12]
 80063ba:	6665      	str	r5, [r4, #100]	; 0x64
 80063bc:	f000 f847 	bl	800644e <__retarget_lock_init_recursive>
 80063c0:	f7ff ff96 	bl	80062f0 <__sfp_lock_release>
 80063c4:	2208      	movs	r2, #8
 80063c6:	4629      	mov	r1, r5
 80063c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063d0:	6025      	str	r5, [r4, #0]
 80063d2:	61a5      	str	r5, [r4, #24]
 80063d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063d8:	f7fd faa4 	bl	8003924 <memset>
 80063dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063e4:	4620      	mov	r0, r4
 80063e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e8:	3468      	adds	r4, #104	; 0x68
 80063ea:	e7d9      	b.n	80063a0 <__sfp+0x1c>
 80063ec:	2104      	movs	r1, #4
 80063ee:	4638      	mov	r0, r7
 80063f0:	f7ff ff62 	bl	80062b8 <__sfmoreglue>
 80063f4:	4604      	mov	r4, r0
 80063f6:	6030      	str	r0, [r6, #0]
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d1d5      	bne.n	80063a8 <__sfp+0x24>
 80063fc:	f7ff ff78 	bl	80062f0 <__sfp_lock_release>
 8006400:	230c      	movs	r3, #12
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	e7ee      	b.n	80063e4 <__sfp+0x60>
 8006406:	bf00      	nop
 8006408:	08006768 	.word	0x08006768
 800640c:	ffff0001 	.word	0xffff0001

08006410 <_fwalk_reent>:
 8006410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006414:	4606      	mov	r6, r0
 8006416:	4688      	mov	r8, r1
 8006418:	2700      	movs	r7, #0
 800641a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800641e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006422:	f1b9 0901 	subs.w	r9, r9, #1
 8006426:	d505      	bpl.n	8006434 <_fwalk_reent+0x24>
 8006428:	6824      	ldr	r4, [r4, #0]
 800642a:	2c00      	cmp	r4, #0
 800642c:	d1f7      	bne.n	800641e <_fwalk_reent+0xe>
 800642e:	4638      	mov	r0, r7
 8006430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006434:	89ab      	ldrh	r3, [r5, #12]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d907      	bls.n	800644a <_fwalk_reent+0x3a>
 800643a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800643e:	3301      	adds	r3, #1
 8006440:	d003      	beq.n	800644a <_fwalk_reent+0x3a>
 8006442:	4629      	mov	r1, r5
 8006444:	4630      	mov	r0, r6
 8006446:	47c0      	blx	r8
 8006448:	4307      	orrs	r7, r0
 800644a:	3568      	adds	r5, #104	; 0x68
 800644c:	e7e9      	b.n	8006422 <_fwalk_reent+0x12>

0800644e <__retarget_lock_init_recursive>:
 800644e:	4770      	bx	lr

08006450 <__retarget_lock_acquire_recursive>:
 8006450:	4770      	bx	lr

08006452 <__retarget_lock_release_recursive>:
 8006452:	4770      	bx	lr

08006454 <__swhatbuf_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	460e      	mov	r6, r1
 8006458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645c:	4614      	mov	r4, r2
 800645e:	2900      	cmp	r1, #0
 8006460:	461d      	mov	r5, r3
 8006462:	b096      	sub	sp, #88	; 0x58
 8006464:	da08      	bge.n	8006478 <__swhatbuf_r+0x24>
 8006466:	2200      	movs	r2, #0
 8006468:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	061a      	lsls	r2, r3, #24
 8006470:	d410      	bmi.n	8006494 <__swhatbuf_r+0x40>
 8006472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006476:	e00e      	b.n	8006496 <__swhatbuf_r+0x42>
 8006478:	466a      	mov	r2, sp
 800647a:	f000 f903 	bl	8006684 <_fstat_r>
 800647e:	2800      	cmp	r0, #0
 8006480:	dbf1      	blt.n	8006466 <__swhatbuf_r+0x12>
 8006482:	9a01      	ldr	r2, [sp, #4]
 8006484:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006488:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800648c:	425a      	negs	r2, r3
 800648e:	415a      	adcs	r2, r3
 8006490:	602a      	str	r2, [r5, #0]
 8006492:	e7ee      	b.n	8006472 <__swhatbuf_r+0x1e>
 8006494:	2340      	movs	r3, #64	; 0x40
 8006496:	2000      	movs	r0, #0
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	b016      	add	sp, #88	; 0x58
 800649c:	bd70      	pop	{r4, r5, r6, pc}
	...

080064a0 <__smakebuf_r>:
 80064a0:	898b      	ldrh	r3, [r1, #12]
 80064a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064a4:	079d      	lsls	r5, r3, #30
 80064a6:	4606      	mov	r6, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	d507      	bpl.n	80064bc <__smakebuf_r+0x1c>
 80064ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	2301      	movs	r3, #1
 80064b6:	6163      	str	r3, [r4, #20]
 80064b8:	b002      	add	sp, #8
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	466a      	mov	r2, sp
 80064be:	ab01      	add	r3, sp, #4
 80064c0:	f7ff ffc8 	bl	8006454 <__swhatbuf_r>
 80064c4:	9900      	ldr	r1, [sp, #0]
 80064c6:	4605      	mov	r5, r0
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff f969 	bl	80057a0 <_malloc_r>
 80064ce:	b948      	cbnz	r0, 80064e4 <__smakebuf_r+0x44>
 80064d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d4ef      	bmi.n	80064b8 <__smakebuf_r+0x18>
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	f043 0302 	orr.w	r3, r3, #2
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	e7e3      	b.n	80064ac <__smakebuf_r+0xc>
 80064e4:	4b0d      	ldr	r3, [pc, #52]	; (800651c <__smakebuf_r+0x7c>)
 80064e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	6020      	str	r0, [r4, #0]
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	9b00      	ldr	r3, [sp, #0]
 80064f4:	6120      	str	r0, [r4, #16]
 80064f6:	6163      	str	r3, [r4, #20]
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	b15b      	cbz	r3, 8006514 <__smakebuf_r+0x74>
 80064fc:	4630      	mov	r0, r6
 80064fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006502:	f000 f8d1 	bl	80066a8 <_isatty_r>
 8006506:	b128      	cbz	r0, 8006514 <__smakebuf_r+0x74>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	81a3      	strh	r3, [r4, #12]
 8006514:	89a0      	ldrh	r0, [r4, #12]
 8006516:	4305      	orrs	r5, r0
 8006518:	81a5      	strh	r5, [r4, #12]
 800651a:	e7cd      	b.n	80064b8 <__smakebuf_r+0x18>
 800651c:	080062ad 	.word	0x080062ad

08006520 <_malloc_usable_size_r>:
 8006520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006524:	1f18      	subs	r0, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfbc      	itt	lt
 800652a:	580b      	ldrlt	r3, [r1, r0]
 800652c:	18c0      	addlt	r0, r0, r3
 800652e:	4770      	bx	lr

08006530 <_raise_r>:
 8006530:	291f      	cmp	r1, #31
 8006532:	b538      	push	{r3, r4, r5, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	460d      	mov	r5, r1
 8006538:	d904      	bls.n	8006544 <_raise_r+0x14>
 800653a:	2316      	movs	r3, #22
 800653c:	6003      	str	r3, [r0, #0]
 800653e:	f04f 30ff 	mov.w	r0, #4294967295
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006546:	b112      	cbz	r2, 800654e <_raise_r+0x1e>
 8006548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800654c:	b94b      	cbnz	r3, 8006562 <_raise_r+0x32>
 800654e:	4620      	mov	r0, r4
 8006550:	f000 f830 	bl	80065b4 <_getpid_r>
 8006554:	462a      	mov	r2, r5
 8006556:	4601      	mov	r1, r0
 8006558:	4620      	mov	r0, r4
 800655a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800655e:	f000 b817 	b.w	8006590 <_kill_r>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d00a      	beq.n	800657c <_raise_r+0x4c>
 8006566:	1c59      	adds	r1, r3, #1
 8006568:	d103      	bne.n	8006572 <_raise_r+0x42>
 800656a:	2316      	movs	r3, #22
 800656c:	6003      	str	r3, [r0, #0]
 800656e:	2001      	movs	r0, #1
 8006570:	e7e7      	b.n	8006542 <_raise_r+0x12>
 8006572:	2400      	movs	r4, #0
 8006574:	4628      	mov	r0, r5
 8006576:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800657a:	4798      	blx	r3
 800657c:	2000      	movs	r0, #0
 800657e:	e7e0      	b.n	8006542 <_raise_r+0x12>

08006580 <raise>:
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <raise+0xc>)
 8006582:	4601      	mov	r1, r0
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f7ff bfd3 	b.w	8006530 <_raise_r>
 800658a:	bf00      	nop
 800658c:	2000001c 	.word	0x2000001c

08006590 <_kill_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	2300      	movs	r3, #0
 8006594:	4d06      	ldr	r5, [pc, #24]	; (80065b0 <_kill_r+0x20>)
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f7fb f83d 	bl	800161c <_kill>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d102      	bne.n	80065ac <_kill_r+0x1c>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	b103      	cbz	r3, 80065ac <_kill_r+0x1c>
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	bd38      	pop	{r3, r4, r5, pc}
 80065ae:	bf00      	nop
 80065b0:	200002ec 	.word	0x200002ec

080065b4 <_getpid_r>:
 80065b4:	f7fb b82b 	b.w	800160e <_getpid>

080065b8 <__sread>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	460c      	mov	r4, r1
 80065bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c0:	f000 f894 	bl	80066ec <_read_r>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	bfab      	itete	ge
 80065c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ca:	89a3      	ldrhlt	r3, [r4, #12]
 80065cc:	181b      	addge	r3, r3, r0
 80065ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065d2:	bfac      	ite	ge
 80065d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065d6:	81a3      	strhlt	r3, [r4, #12]
 80065d8:	bd10      	pop	{r4, pc}

080065da <__swrite>:
 80065da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065de:	461f      	mov	r7, r3
 80065e0:	898b      	ldrh	r3, [r1, #12]
 80065e2:	4605      	mov	r5, r0
 80065e4:	05db      	lsls	r3, r3, #23
 80065e6:	460c      	mov	r4, r1
 80065e8:	4616      	mov	r6, r2
 80065ea:	d505      	bpl.n	80065f8 <__swrite+0x1e>
 80065ec:	2302      	movs	r3, #2
 80065ee:	2200      	movs	r2, #0
 80065f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f4:	f000 f868 	bl	80066c8 <_lseek_r>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	4632      	mov	r2, r6
 80065fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	4628      	mov	r0, r5
 8006604:	463b      	mov	r3, r7
 8006606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800660e:	f000 b817 	b.w	8006640 <_write_r>

08006612 <__sseek>:
 8006612:	b510      	push	{r4, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661a:	f000 f855 	bl	80066c8 <_lseek_r>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	bf15      	itete	ne
 8006624:	6560      	strne	r0, [r4, #84]	; 0x54
 8006626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800662a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800662e:	81a3      	strheq	r3, [r4, #12]
 8006630:	bf18      	it	ne
 8006632:	81a3      	strhne	r3, [r4, #12]
 8006634:	bd10      	pop	{r4, pc}

08006636 <__sclose>:
 8006636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663a:	f000 b813 	b.w	8006664 <_close_r>
	...

08006640 <_write_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	2200      	movs	r2, #0
 800664a:	4d05      	ldr	r5, [pc, #20]	; (8006660 <_write_r+0x20>)
 800664c:	602a      	str	r2, [r5, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	f7fb f81b 	bl	800168a <_write>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_write_r+0x1e>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_write_r+0x1e>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	200002ec 	.word	0x200002ec

08006664 <_close_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	2300      	movs	r3, #0
 8006668:	4d05      	ldr	r5, [pc, #20]	; (8006680 <_close_r+0x1c>)
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fb f827 	bl	80016c2 <_close>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_close_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_close_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	200002ec 	.word	0x200002ec

08006684 <_fstat_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	2300      	movs	r3, #0
 8006688:	4d06      	ldr	r5, [pc, #24]	; (80066a4 <_fstat_r+0x20>)
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f7fb f821 	bl	80016d8 <_fstat>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d102      	bne.n	80066a0 <_fstat_r+0x1c>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b103      	cbz	r3, 80066a0 <_fstat_r+0x1c>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	200002ec 	.word	0x200002ec

080066a8 <_isatty_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	2300      	movs	r3, #0
 80066ac:	4d05      	ldr	r5, [pc, #20]	; (80066c4 <_isatty_r+0x1c>)
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb f81f 	bl	80016f6 <_isatty>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_isatty_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_isatty_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	200002ec 	.word	0x200002ec

080066c8 <_lseek_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	2200      	movs	r2, #0
 80066d2:	4d05      	ldr	r5, [pc, #20]	; (80066e8 <_lseek_r+0x20>)
 80066d4:	602a      	str	r2, [r5, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fb f817 	bl	800170a <_lseek>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_lseek_r+0x1e>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_lseek_r+0x1e>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	200002ec 	.word	0x200002ec

080066ec <_read_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	4d05      	ldr	r5, [pc, #20]	; (800670c <_read_r+0x20>)
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f7fa ffa8 	bl	8001650 <_read>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_read_r+0x1e>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_read_r+0x1e>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	200002ec 	.word	0x200002ec

08006710 <_init>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr

0800671c <_fini>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr
