
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003c00  08003c00  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c00  08003c00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000196c  20000010  08003c18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08003c18  0002197c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c978  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002239  00000000  00000000  0002c9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002f718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020b2  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c388  00000000  00000000  000321fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000885c8  00000000  00000000  0003e582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c74  00000000  00000000  000c6b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b80 	.word	0x08003b80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003b80 	.word	0x08003b80

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f938 	bl	80003c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f816 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f85a 	bl	8000214 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f000 fffc 	bl	800115c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	f001 f85d 	bl	8001228 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x34>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f001 f824 	bl	80011c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x28>
 800017a:	bf00      	nop
 800017c:	08003bcc 	.word	0x08003bcc
 8000180:	08000295 	.word	0x08000295
 8000184:	2000002c 	.word	0x2000002c

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f003 fcea 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fbdb 	bl	800098c <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001dc:	f000 f878 	bl	80002d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fe48 	bl	8000e90 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000206:	f000 f863 	bl	80002d0 <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	; 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0308 	add.w	r3, r7, #8
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_GPIO_Init+0x78>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	4a17      	ldr	r2, [pc, #92]	; (800028c <MX_GPIO_Init+0x78>)
 800022e:	f043 0320 	orr.w	r3, r3, #32
 8000232:	6193      	str	r3, [r2, #24]
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_GPIO_Init+0x78>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	f003 0320 	and.w	r3, r3, #32
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_GPIO_Init+0x78>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a11      	ldr	r2, [pc, #68]	; (800028c <MX_GPIO_Init+0x78>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_GPIO_Init+0x78>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f003 0304 	and.w	r3, r3, #4
 8000254:	603b      	str	r3, [r7, #0]
 8000256:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800025e:	480c      	ldr	r0, [pc, #48]	; (8000290 <MX_GPIO_Init+0x7c>)
 8000260:	f000 fb7c 	bl	800095c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	2301      	movs	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2302      	movs	r3, #2
 8000274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_GPIO_Init+0x7c>)
 800027e:	f000 f9e9 	bl	8000654 <HAL_GPIO_Init>

}
 8000282:	bf00      	nop
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800

08000294 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      // LED ON
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a2:	480a      	ldr	r0, [pc, #40]	; (80002cc <StartDefaultTask+0x38>)
 80002a4:	f000 fb5a 	bl	800095c <HAL_GPIO_WritePin>

      osDelay(300);
 80002a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002ac:	f001 f866 	bl	800137c <osDelay>
      // LED OFF
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <StartDefaultTask+0x38>)
 80002b8:	f000 fb50 	bl	800095c <HAL_GPIO_WritePin>

      osDelay(300);
 80002bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002c0:	f001 f85c 	bl	800137c <osDelay>

    osDelay(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f001 f859 	bl	800137c <osDelay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80002ca:	e7e7      	b.n	800029c <StartDefaultTask+0x8>
 80002cc:	40010800 	.word	0x40010800

080002d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d4:	b672      	cpsid	i
}
 80002d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <Error_Handler+0x8>
	...

080002dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <HAL_MspInit+0x4c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a10      	ldr	r2, [pc, #64]	; (8000328 <HAL_MspInit+0x4c>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <HAL_MspInit+0x4c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <HAL_MspInit+0x4c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <HAL_MspInit+0x4c>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	61d3      	str	r3, [r2, #28]
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <HAL_MspInit+0x4c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	210f      	movs	r1, #15
 8000316:	f06f 0001 	mvn.w	r0, #1
 800031a:	f000 f972 	bl	8000602 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000

0800032c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <NMI_Handler+0x4>

08000332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>

0800033e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <UsageFault_Handler+0x4>

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800035a:	f000 f87b 	bl	8000454 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800035e:	f002 fc19 	bl	8002b94 <xTaskGetSchedulerState>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	d001      	beq.n	800036c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000368:	f003 f976 	bl	8003658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003a2:	f7ff ffe5 	bl	8000370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f003 fbb1 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff fed1 	bl	8000150 <main>
  bx lr
 80003ae:	4770      	bx	lr
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80003b8:	08003c08 	.word	0x08003c08
  ldr r2, =_sbss
 80003bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80003c0:	2000197c 	.word	0x2000197c

080003c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC1_2_IRQHandler>
	...

080003c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <HAL_Init+0x28>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <HAL_Init+0x28>)
 80003d2:	f043 0310 	orr.w	r3, r3, #16
 80003d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003d8:	2003      	movs	r0, #3
 80003da:	f000 f907 	bl	80005ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003de:	200f      	movs	r0, #15
 80003e0:	f000 f808 	bl	80003f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003e4:	f7ff ff7a 	bl	80002dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40022000 	.word	0x40022000

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_InitTick+0x54>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_InitTick+0x58>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4619      	mov	r1, r3
 8000406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800040a:	fbb3 f3f1 	udiv	r3, r3, r1
 800040e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f911 	bl	800063a <HAL_SYSTICK_Config>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800041e:	2301      	movs	r3, #1
 8000420:	e00e      	b.n	8000440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b0f      	cmp	r3, #15
 8000426:	d80a      	bhi.n	800043e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000428:	2200      	movs	r2, #0
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	f04f 30ff 	mov.w	r0, #4294967295
 8000430:	f000 f8e7 	bl	8000602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <HAL_InitTick+0x5c>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800043a:	2300      	movs	r3, #0
 800043c:	e000      	b.n	8000440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
}
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000000 	.word	0x20000000
 800044c:	20000008 	.word	0x20000008
 8000450:	20000004 	.word	0x20000004

08000454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <HAL_IncTick+0x1c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_IncTick+0x20>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4413      	add	r3, r2
 8000464:	4a03      	ldr	r2, [pc, #12]	; (8000474 <HAL_IncTick+0x20>)
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000008 	.word	0x20000008
 8000474:	20000030 	.word	0x20000030

08000478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  return uwTick;
 800047c:	4b02      	ldr	r3, [pc, #8]	; (8000488 <HAL_GetTick+0x10>)
 800047e:	681b      	ldr	r3, [r3, #0]
}
 8000480:	4618      	mov	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	20000030 	.word	0x20000030

0800048c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f003 0307 	and.w	r3, r3, #7
 800049a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <__NVIC_SetPriorityGrouping+0x44>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <__NVIC_SetPriorityGrouping+0x44>)
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	60d3      	str	r3, [r2, #12]
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000ed00 	.word	0xe000ed00

080004d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <__NVIC_GetPriorityGrouping+0x18>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	f003 0307 	and.w	r3, r3, #7
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	db0a      	blt.n	800051a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	b2da      	uxtb	r2, r3
 8000508:	490c      	ldr	r1, [pc, #48]	; (800053c <__NVIC_SetPriority+0x4c>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	0112      	lsls	r2, r2, #4
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	440b      	add	r3, r1
 8000514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000518:	e00a      	b.n	8000530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4908      	ldr	r1, [pc, #32]	; (8000540 <__NVIC_SetPriority+0x50>)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 030f 	and.w	r3, r3, #15
 8000526:	3b04      	subs	r3, #4
 8000528:	0112      	lsls	r2, r2, #4
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	440b      	add	r3, r1
 800052e:	761a      	strb	r2, [r3, #24]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	; 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f003 0307 	and.w	r3, r3, #7
 8000556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	f1c3 0307 	rsb	r3, r3, #7
 800055e:	2b04      	cmp	r3, #4
 8000560:	bf28      	it	cs
 8000562:	2304      	movcs	r3, #4
 8000564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3304      	adds	r3, #4
 800056a:	2b06      	cmp	r3, #6
 800056c:	d902      	bls.n	8000574 <NVIC_EncodePriority+0x30>
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	3b03      	subs	r3, #3
 8000572:	e000      	b.n	8000576 <NVIC_EncodePriority+0x32>
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000578:	f04f 32ff 	mov.w	r2, #4294967295
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43da      	mvns	r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	401a      	ands	r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058c:	f04f 31ff 	mov.w	r1, #4294967295
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43d9      	mvns	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	4313      	orrs	r3, r2
         );
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3724      	adds	r7, #36	; 0x24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005b8:	d301      	bcc.n	80005be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00f      	b.n	80005de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <SysTick_Config+0x40>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005c6:	210f      	movs	r1, #15
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f7ff ff90 	bl	80004f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <SysTick_Config+0x40>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <SysTick_Config+0x40>)
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	e000e010 	.word	0xe000e010

080005ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff49 	bl	800048c <__NVIC_SetPriorityGrouping>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000614:	f7ff ff5e 	bl	80004d4 <__NVIC_GetPriorityGrouping>
 8000618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	6978      	ldr	r0, [r7, #20]
 8000620:	f7ff ff90 	bl	8000544 <NVIC_EncodePriority>
 8000624:	4602      	mov	r2, r0
 8000626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff5f 	bl	80004f0 <__NVIC_SetPriority>
}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ffb0 	bl	80005a8 <SysTick_Config>
 8000648:	4603      	mov	r3, r0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	b480      	push	{r7}
 8000656:	b08b      	sub	sp, #44	; 0x2c
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000666:	e169      	b.n	800093c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000668:	2201      	movs	r2, #1
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	69fa      	ldr	r2, [r7, #28]
 8000678:	4013      	ands	r3, r2
 800067a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	429a      	cmp	r2, r3
 8000682:	f040 8158 	bne.w	8000936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	4a9a      	ldr	r2, [pc, #616]	; (80008f4 <HAL_GPIO_Init+0x2a0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d05e      	beq.n	800074e <HAL_GPIO_Init+0xfa>
 8000690:	4a98      	ldr	r2, [pc, #608]	; (80008f4 <HAL_GPIO_Init+0x2a0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d875      	bhi.n	8000782 <HAL_GPIO_Init+0x12e>
 8000696:	4a98      	ldr	r2, [pc, #608]	; (80008f8 <HAL_GPIO_Init+0x2a4>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d058      	beq.n	800074e <HAL_GPIO_Init+0xfa>
 800069c:	4a96      	ldr	r2, [pc, #600]	; (80008f8 <HAL_GPIO_Init+0x2a4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d86f      	bhi.n	8000782 <HAL_GPIO_Init+0x12e>
 80006a2:	4a96      	ldr	r2, [pc, #600]	; (80008fc <HAL_GPIO_Init+0x2a8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d052      	beq.n	800074e <HAL_GPIO_Init+0xfa>
 80006a8:	4a94      	ldr	r2, [pc, #592]	; (80008fc <HAL_GPIO_Init+0x2a8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d869      	bhi.n	8000782 <HAL_GPIO_Init+0x12e>
 80006ae:	4a94      	ldr	r2, [pc, #592]	; (8000900 <HAL_GPIO_Init+0x2ac>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d04c      	beq.n	800074e <HAL_GPIO_Init+0xfa>
 80006b4:	4a92      	ldr	r2, [pc, #584]	; (8000900 <HAL_GPIO_Init+0x2ac>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d863      	bhi.n	8000782 <HAL_GPIO_Init+0x12e>
 80006ba:	4a92      	ldr	r2, [pc, #584]	; (8000904 <HAL_GPIO_Init+0x2b0>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d046      	beq.n	800074e <HAL_GPIO_Init+0xfa>
 80006c0:	4a90      	ldr	r2, [pc, #576]	; (8000904 <HAL_GPIO_Init+0x2b0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d85d      	bhi.n	8000782 <HAL_GPIO_Init+0x12e>
 80006c6:	2b12      	cmp	r3, #18
 80006c8:	d82a      	bhi.n	8000720 <HAL_GPIO_Init+0xcc>
 80006ca:	2b12      	cmp	r3, #18
 80006cc:	d859      	bhi.n	8000782 <HAL_GPIO_Init+0x12e>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <HAL_GPIO_Init+0x80>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	0800074f 	.word	0x0800074f
 80006d8:	08000729 	.word	0x08000729
 80006dc:	0800073b 	.word	0x0800073b
 80006e0:	0800077d 	.word	0x0800077d
 80006e4:	08000783 	.word	0x08000783
 80006e8:	08000783 	.word	0x08000783
 80006ec:	08000783 	.word	0x08000783
 80006f0:	08000783 	.word	0x08000783
 80006f4:	08000783 	.word	0x08000783
 80006f8:	08000783 	.word	0x08000783
 80006fc:	08000783 	.word	0x08000783
 8000700:	08000783 	.word	0x08000783
 8000704:	08000783 	.word	0x08000783
 8000708:	08000783 	.word	0x08000783
 800070c:	08000783 	.word	0x08000783
 8000710:	08000783 	.word	0x08000783
 8000714:	08000783 	.word	0x08000783
 8000718:	08000731 	.word	0x08000731
 800071c:	08000745 	.word	0x08000745
 8000720:	4a79      	ldr	r2, [pc, #484]	; (8000908 <HAL_GPIO_Init+0x2b4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d013      	beq.n	800074e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000726:	e02c      	b.n	8000782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	623b      	str	r3, [r7, #32]
          break;
 800072e:	e029      	b.n	8000784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	3304      	adds	r3, #4
 8000736:	623b      	str	r3, [r7, #32]
          break;
 8000738:	e024      	b.n	8000784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	3308      	adds	r3, #8
 8000740:	623b      	str	r3, [r7, #32]
          break;
 8000742:	e01f      	b.n	8000784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	330c      	adds	r3, #12
 800074a:	623b      	str	r3, [r7, #32]
          break;
 800074c:	e01a      	b.n	8000784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000756:	2304      	movs	r3, #4
 8000758:	623b      	str	r3, [r7, #32]
          break;
 800075a:	e013      	b.n	8000784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d105      	bne.n	8000770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000764:	2308      	movs	r3, #8
 8000766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	69fa      	ldr	r2, [r7, #28]
 800076c:	611a      	str	r2, [r3, #16]
          break;
 800076e:	e009      	b.n	8000784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000770:	2308      	movs	r3, #8
 8000772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	69fa      	ldr	r2, [r7, #28]
 8000778:	615a      	str	r2, [r3, #20]
          break;
 800077a:	e003      	b.n	8000784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
          break;
 8000780:	e000      	b.n	8000784 <HAL_GPIO_Init+0x130>
          break;
 8000782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2bff      	cmp	r3, #255	; 0xff
 8000788:	d801      	bhi.n	800078e <HAL_GPIO_Init+0x13a>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	e001      	b.n	8000792 <HAL_GPIO_Init+0x13e>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3304      	adds	r3, #4
 8000792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	2bff      	cmp	r3, #255	; 0xff
 8000798:	d802      	bhi.n	80007a0 <HAL_GPIO_Init+0x14c>
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	e002      	b.n	80007a6 <HAL_GPIO_Init+0x152>
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	3b08      	subs	r3, #8
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	210f      	movs	r1, #15
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	401a      	ands	r2, r3
 80007b8:	6a39      	ldr	r1, [r7, #32]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	431a      	orrs	r2, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f000 80b1 	beq.w	8000936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007d4:	4b4d      	ldr	r3, [pc, #308]	; (800090c <HAL_GPIO_Init+0x2b8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a4c      	ldr	r2, [pc, #304]	; (800090c <HAL_GPIO_Init+0x2b8>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b4a      	ldr	r3, [pc, #296]	; (800090c <HAL_GPIO_Init+0x2b8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80007ec:	4a48      	ldr	r2, [pc, #288]	; (8000910 <HAL_GPIO_Init+0x2bc>)
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	3302      	adds	r3, #2
 80007f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	220f      	movs	r2, #15
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a40      	ldr	r2, [pc, #256]	; (8000914 <HAL_GPIO_Init+0x2c0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d013      	beq.n	8000840 <HAL_GPIO_Init+0x1ec>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a3f      	ldr	r2, [pc, #252]	; (8000918 <HAL_GPIO_Init+0x2c4>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d00d      	beq.n	800083c <HAL_GPIO_Init+0x1e8>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a3e      	ldr	r2, [pc, #248]	; (800091c <HAL_GPIO_Init+0x2c8>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d007      	beq.n	8000838 <HAL_GPIO_Init+0x1e4>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a3d      	ldr	r2, [pc, #244]	; (8000920 <HAL_GPIO_Init+0x2cc>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d101      	bne.n	8000834 <HAL_GPIO_Init+0x1e0>
 8000830:	2303      	movs	r3, #3
 8000832:	e006      	b.n	8000842 <HAL_GPIO_Init+0x1ee>
 8000834:	2304      	movs	r3, #4
 8000836:	e004      	b.n	8000842 <HAL_GPIO_Init+0x1ee>
 8000838:	2302      	movs	r3, #2
 800083a:	e002      	b.n	8000842 <HAL_GPIO_Init+0x1ee>
 800083c:	2301      	movs	r3, #1
 800083e:	e000      	b.n	8000842 <HAL_GPIO_Init+0x1ee>
 8000840:	2300      	movs	r3, #0
 8000842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000844:	f002 0203 	and.w	r2, r2, #3
 8000848:	0092      	lsls	r2, r2, #2
 800084a:	4093      	lsls	r3, r2
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000852:	492f      	ldr	r1, [pc, #188]	; (8000910 <HAL_GPIO_Init+0x2bc>)
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	3302      	adds	r3, #2
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d006      	beq.n	800087a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	492c      	ldr	r1, [pc, #176]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	4313      	orrs	r3, r2
 8000876:	600b      	str	r3, [r1, #0]
 8000878:	e006      	b.n	8000888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	43db      	mvns	r3, r3
 8000882:	4928      	ldr	r1, [pc, #160]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 8000884:	4013      	ands	r3, r2
 8000886:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d006      	beq.n	80008a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	4922      	ldr	r1, [pc, #136]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	604b      	str	r3, [r1, #4]
 80008a0:	e006      	b.n	80008b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	43db      	mvns	r3, r3
 80008aa:	491e      	ldr	r1, [pc, #120]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008ac:	4013      	ands	r3, r2
 80008ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d006      	beq.n	80008ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	4918      	ldr	r1, [pc, #96]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	608b      	str	r3, [r1, #8]
 80008c8:	e006      	b.n	80008d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	43db      	mvns	r3, r3
 80008d2:	4914      	ldr	r1, [pc, #80]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d021      	beq.n	8000928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	490e      	ldr	r1, [pc, #56]	; (8000924 <HAL_GPIO_Init+0x2d0>)
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60cb      	str	r3, [r1, #12]
 80008f0:	e021      	b.n	8000936 <HAL_GPIO_Init+0x2e2>
 80008f2:	bf00      	nop
 80008f4:	10320000 	.word	0x10320000
 80008f8:	10310000 	.word	0x10310000
 80008fc:	10220000 	.word	0x10220000
 8000900:	10210000 	.word	0x10210000
 8000904:	10120000 	.word	0x10120000
 8000908:	10110000 	.word	0x10110000
 800090c:	40021000 	.word	0x40021000
 8000910:	40010000 	.word	0x40010000
 8000914:	40010800 	.word	0x40010800
 8000918:	40010c00 	.word	0x40010c00
 800091c:	40011000 	.word	0x40011000
 8000920:	40011400 	.word	0x40011400
 8000924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_GPIO_Init+0x304>)
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	43db      	mvns	r3, r3
 8000930:	4909      	ldr	r1, [pc, #36]	; (8000958 <HAL_GPIO_Init+0x304>)
 8000932:	4013      	ands	r3, r2
 8000934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	3301      	adds	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	fa22 f303 	lsr.w	r3, r2, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	f47f ae8e 	bne.w	8000668 <HAL_GPIO_Init+0x14>
  }
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	372c      	adds	r7, #44	; 0x2c
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40010400 	.word	0x40010400

0800095c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
 8000968:	4613      	mov	r3, r2
 800096a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800096c:	787b      	ldrb	r3, [r7, #1]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000972:	887a      	ldrh	r2, [r7, #2]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000978:	e003      	b.n	8000982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800097a:	887b      	ldrh	r3, [r7, #2]
 800097c:	041a      	lsls	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	611a      	str	r2, [r3, #16]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e272      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 8087 	beq.w	8000aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009ac:	4b92      	ldr	r3, [pc, #584]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 030c 	and.w	r3, r3, #12
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d00c      	beq.n	80009d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009b8:	4b8f      	ldr	r3, [pc, #572]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 030c 	and.w	r3, r3, #12
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d112      	bne.n	80009ea <HAL_RCC_OscConfig+0x5e>
 80009c4:	4b8c      	ldr	r3, [pc, #560]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d0:	d10b      	bne.n	80009ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d2:	4b89      	ldr	r3, [pc, #548]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d06c      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x12c>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d168      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e24c      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009f2:	d106      	bne.n	8000a02 <HAL_RCC_OscConfig+0x76>
 80009f4:	4b80      	ldr	r3, [pc, #512]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a7f      	ldr	r2, [pc, #508]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 80009fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e02e      	b.n	8000a60 <HAL_RCC_OscConfig+0xd4>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10c      	bne.n	8000a24 <HAL_RCC_OscConfig+0x98>
 8000a0a:	4b7b      	ldr	r3, [pc, #492]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a7a      	ldr	r2, [pc, #488]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	4b78      	ldr	r3, [pc, #480]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a77      	ldr	r2, [pc, #476]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e01d      	b.n	8000a60 <HAL_RCC_OscConfig+0xd4>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a2c:	d10c      	bne.n	8000a48 <HAL_RCC_OscConfig+0xbc>
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a71      	ldr	r2, [pc, #452]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a6e      	ldr	r2, [pc, #440]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e00b      	b.n	8000a60 <HAL_RCC_OscConfig+0xd4>
 8000a48:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a6a      	ldr	r2, [pc, #424]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a67      	ldr	r2, [pc, #412]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d013      	beq.n	8000a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fd06 	bl	8000478 <HAL_GetTick>
 8000a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6e:	e008      	b.n	8000a82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a70:	f7ff fd02 	bl	8000478 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b64      	cmp	r3, #100	; 0x64
 8000a7c:	d901      	bls.n	8000a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e200      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f0      	beq.n	8000a70 <HAL_RCC_OscConfig+0xe4>
 8000a8e:	e014      	b.n	8000aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a90:	f7ff fcf2 	bl	8000478 <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a96:	e008      	b.n	8000aaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a98:	f7ff fcee 	bl	8000478 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b64      	cmp	r3, #100	; 0x64
 8000aa4:	d901      	bls.n	8000aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e1ec      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aaa:	4b53      	ldr	r3, [pc, #332]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f0      	bne.n	8000a98 <HAL_RCC_OscConfig+0x10c>
 8000ab6:	e000      	b.n	8000aba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d063      	beq.n	8000b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 030c 	and.w	r3, r3, #12
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d11c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x18c>
 8000ade:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d116      	bne.n	8000b18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <HAL_RCC_OscConfig+0x176>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d001      	beq.n	8000b02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e1c0      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4939      	ldr	r1, [pc, #228]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b16:	e03a      	b.n	8000b8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d020      	beq.n	8000b62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b26:	f7ff fca7 	bl	8000478 <HAL_GetTick>
 8000b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fca3 	bl	8000478 <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e1a1      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f0      	beq.n	8000b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	4927      	ldr	r1, [pc, #156]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	600b      	str	r3, [r1, #0]
 8000b60:	e015      	b.n	8000b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <HAL_RCC_OscConfig+0x270>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fc86 	bl	8000478 <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b70:	f7ff fc82 	bl	8000478 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e180      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f0      	bne.n	8000b70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d03a      	beq.n	8000c10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d019      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_RCC_OscConfig+0x274>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba8:	f7ff fc66 	bl	8000478 <HAL_GetTick>
 8000bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bb0:	f7ff fc62 	bl	8000478 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e160      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f0      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 faa6 	bl	8001120 <RCC_Delay>
 8000bd4:	e01c      	b.n	8000c10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_RCC_OscConfig+0x274>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bdc:	f7ff fc4c 	bl	8000478 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000be2:	e00f      	b.n	8000c04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000be4:	f7ff fc48 	bl	8000478 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d908      	bls.n	8000c04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e146      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	42420000 	.word	0x42420000
 8000c00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c04:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1e9      	bne.n	8000be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a6 	beq.w	8000d6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c22:	4b8b      	ldr	r3, [pc, #556]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10d      	bne.n	8000c4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b88      	ldr	r3, [pc, #544]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a87      	ldr	r2, [pc, #540]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b85      	ldr	r3, [pc, #532]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c46:	2301      	movs	r3, #1
 8000c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c4a:	4b82      	ldr	r3, [pc, #520]	; (8000e54 <HAL_RCC_OscConfig+0x4c8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d118      	bne.n	8000c88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c56:	4b7f      	ldr	r3, [pc, #508]	; (8000e54 <HAL_RCC_OscConfig+0x4c8>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a7e      	ldr	r2, [pc, #504]	; (8000e54 <HAL_RCC_OscConfig+0x4c8>)
 8000c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c62:	f7ff fc09 	bl	8000478 <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c6a:	f7ff fc05 	bl	8000478 <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b64      	cmp	r3, #100	; 0x64
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e103      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c7c:	4b75      	ldr	r3, [pc, #468]	; (8000e54 <HAL_RCC_OscConfig+0x4c8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d106      	bne.n	8000c9e <HAL_RCC_OscConfig+0x312>
 8000c90:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	4a6e      	ldr	r2, [pc, #440]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6213      	str	r3, [r2, #32]
 8000c9c:	e02d      	b.n	8000cfa <HAL_RCC_OscConfig+0x36e>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x334>
 8000ca6:	4b6a      	ldr	r3, [pc, #424]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000ca8:	6a1b      	ldr	r3, [r3, #32]
 8000caa:	4a69      	ldr	r2, [pc, #420]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	6213      	str	r3, [r2, #32]
 8000cb2:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	4a66      	ldr	r2, [pc, #408]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cb8:	f023 0304 	bic.w	r3, r3, #4
 8000cbc:	6213      	str	r3, [r2, #32]
 8000cbe:	e01c      	b.n	8000cfa <HAL_RCC_OscConfig+0x36e>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x356>
 8000cc8:	4b61      	ldr	r3, [pc, #388]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	4a60      	ldr	r2, [pc, #384]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6213      	str	r3, [r2, #32]
 8000cd4:	4b5e      	ldr	r3, [pc, #376]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	4a5d      	ldr	r2, [pc, #372]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6213      	str	r3, [r2, #32]
 8000ce0:	e00b      	b.n	8000cfa <HAL_RCC_OscConfig+0x36e>
 8000ce2:	4b5b      	ldr	r3, [pc, #364]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4a5a      	ldr	r2, [pc, #360]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	6213      	str	r3, [r2, #32]
 8000cee:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4a57      	ldr	r2, [pc, #348]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000cf4:	f023 0304 	bic.w	r3, r3, #4
 8000cf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d015      	beq.n	8000d2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d02:	f7ff fbb9 	bl	8000478 <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d08:	e00a      	b.n	8000d20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fbb5 	bl	8000478 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e0b1      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0ee      	beq.n	8000d0a <HAL_RCC_OscConfig+0x37e>
 8000d2c:	e014      	b.n	8000d58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fba3 	bl	8000478 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d34:	e00a      	b.n	8000d4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d36:	f7ff fb9f 	bl	8000478 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e09b      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4c:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1ee      	bne.n	8000d36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d58:	7dfb      	ldrb	r3, [r7, #23]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d105      	bne.n	8000d6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a3b      	ldr	r2, [pc, #236]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8087 	beq.w	8000e82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d061      	beq.n	8000e44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d146      	bne.n	8000e16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <HAL_RCC_OscConfig+0x4cc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fb73 	bl	8000478 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d96:	f7ff fb6f 	bl	8000478 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e06d      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f0      	bne.n	8000d96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbc:	d108      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	4921      	ldr	r1, [pc, #132]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a19      	ldr	r1, [r3, #32]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	430b      	orrs	r3, r1
 8000de2:	491b      	ldr	r1, [pc, #108]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_RCC_OscConfig+0x4cc>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fb43 	bl	8000478 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df6:	f7ff fb3f 	bl	8000478 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e03d      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x46a>
 8000e14:	e035      	b.n	8000e82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_RCC_OscConfig+0x4cc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fb2c 	bl	8000478 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e24:	f7ff fb28 	bl	8000478 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e026      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x498>
 8000e42:	e01e      	b.n	8000e82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d107      	bne.n	8000e5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e019      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40007000 	.word	0x40007000
 8000e58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_RCC_OscConfig+0x500>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d106      	bne.n	8000e7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d101      	bne.n	8000ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0d0      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea4:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d910      	bls.n	8000ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 0207 	bic.w	r2, r3, #7
 8000eba:	4965      	ldr	r1, [pc, #404]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e0b8      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d020      	beq.n	8000f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	4a58      	ldr	r2, [pc, #352]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f04:	4b53      	ldr	r3, [pc, #332]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f10:	4b50      	ldr	r3, [pc, #320]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	494d      	ldr	r1, [pc, #308]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d040      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d107      	bne.n	8000f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d115      	bne.n	8000f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e07f      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d107      	bne.n	8000f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4e:	4b41      	ldr	r3, [pc, #260]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e073      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e06b      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f023 0203 	bic.w	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4936      	ldr	r1, [pc, #216]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f80:	f7ff fa7a 	bl	8000478 <HAL_GetTick>
 8000f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f86:	e00a      	b.n	8000f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f88:	f7ff fa76 	bl	8000478 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e053      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 020c 	and.w	r2, r3, #12
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d1eb      	bne.n	8000f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d210      	bcs.n	8000fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0207 	bic.w	r2, r3, #7
 8000fc6:	4922      	ldr	r1, [pc, #136]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e032      	b.n	8001046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d008      	beq.n	8000ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4916      	ldr	r1, [pc, #88]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d009      	beq.n	800101e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	490e      	ldr	r1, [pc, #56]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 800101a:	4313      	orrs	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800101e:	f000 f821 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001022:	4602      	mov	r2, r0
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <HAL_RCC_ClockConfig+0x1c8>)
 8001030:	5ccb      	ldrb	r3, [r1, r3]
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_RCC_ClockConfig+0x1cc>)
 8001038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_RCC_ClockConfig+0x1d0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f9d8 	bl	80003f4 <HAL_InitTick>

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40022000 	.word	0x40022000
 8001054:	40021000 	.word	0x40021000
 8001058:	08003bf0 	.word	0x08003bf0
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001064:	b490      	push	{r4, r7}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_RCC_GetSysClockFreq+0xac>)
 800106c:	1d3c      	adds	r4, r7, #4
 800106e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001074:	f240 2301 	movw	r3, #513	; 0x201
 8001078:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b04      	cmp	r3, #4
 800109c:	d002      	beq.n	80010a4 <HAL_RCC_GetSysClockFreq+0x40>
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d003      	beq.n	80010aa <HAL_RCC_GetSysClockFreq+0x46>
 80010a2:	e02b      	b.n	80010fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010a6:	623b      	str	r3, [r7, #32]
      break;
 80010a8:	e02b      	b.n	8001102 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d012      	beq.n	80010ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	0c5b      	lsrs	r3, r3, #17
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	3328      	adds	r3, #40	; 0x28
 80010d2:	443b      	add	r3, r7
 80010d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010de:	fb03 f202 	mul.w	r2, r3, r2
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	e004      	b.n	80010f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_RCC_GetSysClockFreq+0xb8>)
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	623b      	str	r3, [r7, #32]
      break;
 80010fa:	e002      	b.n	8001102 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010fe:	623b      	str	r3, [r7, #32]
      break;
 8001100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001102:	6a3b      	ldr	r3, [r7, #32]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bc90      	pop	{r4, r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	08003ba4 	.word	0x08003ba4
 8001114:	40021000 	.word	0x40021000
 8001118:	007a1200 	.word	0x007a1200
 800111c:	003d0900 	.word	0x003d0900

08001120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <RCC_Delay+0x34>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <RCC_Delay+0x38>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0a5b      	lsrs	r3, r3, #9
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800113c:	bf00      	nop
  }
  while (Delay --);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	60fa      	str	r2, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f9      	bne.n	800113c <RCC_Delay+0x1c>
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000000 	.word	0x20000000
 8001158:	10624dd3 	.word	0x10624dd3

0800115c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001162:	f3ef 8305 	mrs	r3, IPSR
 8001166:	60bb      	str	r3, [r7, #8]
  return(result);
 8001168:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10f      	bne.n	800118e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800116e:	f3ef 8310 	mrs	r3, PRIMASK
 8001172:	607b      	str	r3, [r7, #4]
  return(result);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <osKernelInitialize+0x32>
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <osKernelInitialize+0x60>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d109      	bne.n	8001196 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001182:	f3ef 8311 	mrs	r3, BASEPRI
 8001186:	603b      	str	r3, [r7, #0]
  return(result);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800118e:	f06f 0305 	mvn.w	r3, #5
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e00c      	b.n	80011b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <osKernelInitialize+0x60>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <osKernelInitialize+0x60>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e002      	b.n	80011b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000034 	.word	0x20000034

080011c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80011c6:	f3ef 8305 	mrs	r3, IPSR
 80011ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80011cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10f      	bne.n	80011f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d2:	f3ef 8310 	mrs	r3, PRIMASK
 80011d6:	607b      	str	r3, [r7, #4]
  return(result);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <osKernelStart+0x32>
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <osKernelStart+0x64>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d109      	bne.n	80011fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80011e6:	f3ef 8311 	mrs	r3, BASEPRI
 80011ea:	603b      	str	r3, [r7, #0]
  return(result);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80011f2:	f06f 0305 	mvn.w	r3, #5
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e00e      	b.n	8001218 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <osKernelStart+0x64>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <osKernelStart+0x64>)
 8001204:	2202      	movs	r2, #2
 8001206:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001208:	f001 f878 	bl	80022fc <vTaskStartScheduler>
      stat = osOK;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e002      	b.n	8001218 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000034 	.word	0x20000034

08001228 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b092      	sub	sp, #72	; 0x48
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001238:	f3ef 8305 	mrs	r3, IPSR
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 8094 	bne.w	800136e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001246:	f3ef 8310 	mrs	r3, PRIMASK
 800124a:	623b      	str	r3, [r7, #32]
  return(result);
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 808d 	bne.w	800136e <osThreadNew+0x146>
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <osThreadNew+0x150>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d106      	bne.n	800126a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800125c:	f3ef 8311 	mrs	r3, BASEPRI
 8001260:	61fb      	str	r3, [r7, #28]
  return(result);
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f040 8082 	bne.w	800136e <osThreadNew+0x146>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d07e      	beq.n	800136e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001274:	2318      	movs	r3, #24
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001278:	2300      	movs	r3, #0
 800127a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800127c:	f107 031b 	add.w	r3, r7, #27
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d045      	beq.n	800131a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <osThreadNew+0x74>
        name = attr->name;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <osThreadNew+0x9a>
 80012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b2:	2b38      	cmp	r3, #56	; 0x38
 80012b4:	d805      	bhi.n	80012c2 <osThreadNew+0x9a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <osThreadNew+0x9e>
        return (NULL);
 80012c2:	2300      	movs	r3, #0
 80012c4:	e054      	b.n	8001370 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00e      	beq.n	80012fc <osThreadNew+0xd4>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b5b      	cmp	r3, #91	; 0x5b
 80012e4:	d90a      	bls.n	80012fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <osThreadNew+0xd4>
        mem = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fa:	e010      	b.n	800131e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <osThreadNew+0xf6>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d108      	bne.n	800131e <osThreadNew+0xf6>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d104      	bne.n	800131e <osThreadNew+0xf6>
          mem = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
 8001318:	e001      	b.n	800131e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	2b01      	cmp	r3, #1
 8001322:	d110      	bne.n	8001346 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001338:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 fe12 	bl	8001f64 <xTaskCreateStatic>
 8001340:	4603      	mov	r3, r0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e013      	b.n	800136e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d110      	bne.n	800136e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134e:	b29a      	uxth	r2, r3
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 fe5c 	bl	800201c <xTaskCreate>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <osThreadNew+0x146>
          hTask = NULL;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800136e:	697b      	ldr	r3, [r7, #20]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000034 	.word	0x20000034

0800137c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001384:	f3ef 8305 	mrs	r3, IPSR
 8001388:	613b      	str	r3, [r7, #16]
  return(result);
 800138a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10f      	bne.n	80013b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001390:	f3ef 8310 	mrs	r3, PRIMASK
 8001394:	60fb      	str	r3, [r7, #12]
  return(result);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <osDelay+0x34>
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <osDelay+0x58>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d109      	bne.n	80013b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013a4:	f3ef 8311 	mrs	r3, BASEPRI
 80013a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <osDelay+0x3c>
    stat = osErrorISR;
 80013b0:	f06f 0305 	mvn.w	r3, #5
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e007      	b.n	80013c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 ff66 	bl	8002294 <vTaskDelay>
    }
  }

  return (stat);
 80013c8:	697b      	ldr	r3, [r7, #20]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000034 	.word	0x20000034

080013d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <vApplicationGetIdleTaskMemory+0x28>)
 80013e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <vApplicationGetIdleTaskMemory+0x2c>)
 80013ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000038 	.word	0x20000038
 8001404:	20000094 	.word	0x20000094

08001408 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <vApplicationGetTimerTaskMemory+0x2c>)
 8001418:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <vApplicationGetTimerTaskMemory+0x30>)
 800141e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000294 	.word	0x20000294
 8001438:	200002f0 	.word	0x200002f0

0800143c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f103 0208 	add.w	r2, r3, #8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f103 0208 	add.w	r2, r3, #8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f103 0208 	add.w	r2, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d103      	bne.n	80014f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	e00c      	b.n	8001512 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3308      	adds	r3, #8
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e002      	b.n	8001506 <vListInsert+0x2e>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	429a      	cmp	r2, r3
 8001510:	d2f6      	bcs.n	8001500 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6892      	ldr	r2, [r2, #8]
 800155e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6852      	ldr	r2, [r2, #4]
 8001568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	d103      	bne.n	800157c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1e5a      	subs	r2, r3, #1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
	...

0800159c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10a      	bne.n	80015c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	f3bf 8f6f 	isb	sy
 80015bc:	f3bf 8f4f 	dsb	sy
 80015c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80015c2:	bf00      	nop
 80015c4:	e7fe      	b.n	80015c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80015c6:	f001 ffc9 	bl	800355c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	441a      	add	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	3b01      	subs	r3, #1
 80015f8:	68f9      	ldr	r1, [r7, #12]
 80015fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	441a      	add	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	22ff      	movs	r2, #255	; 0xff
 800160a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d114      	bne.n	8001646 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01a      	beq.n	800165a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3310      	adds	r3, #16
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f8f1 	bl	8002810 <xTaskRemoveFromEventList>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <xQueueGenericReset+0xcc>)
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	f3bf 8f6f 	isb	sy
 8001644:	e009      	b.n	800165a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3310      	adds	r3, #16
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef6 	bl	800143c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3324      	adds	r3, #36	; 0x24
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fef1 	bl	800143c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800165a:	f001 ffaf 	bl	80035bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	e000ed04 	.word	0xe000ed04

0800166c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	; 0x38
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10a      	bne.n	8001696 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001692:	bf00      	nop
 8001694:	e7fe      	b.n	8001694 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10a      	bne.n	80016b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a0:	f383 8811 	msr	BASEPRI, r3
 80016a4:	f3bf 8f6f 	isb	sy
 80016a8:	f3bf 8f4f 	dsb	sy
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80016ae:	bf00      	nop
 80016b0:	e7fe      	b.n	80016b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <xQueueGenericCreateStatic+0x52>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <xQueueGenericCreateStatic+0x56>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <xQueueGenericCreateStatic+0x58>
 80016c2:	2300      	movs	r3, #0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10a      	bne.n	80016de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80016c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016cc:	f383 8811 	msr	BASEPRI, r3
 80016d0:	f3bf 8f6f 	isb	sy
 80016d4:	f3bf 8f4f 	dsb	sy
 80016d8:	623b      	str	r3, [r7, #32]
}
 80016da:	bf00      	nop
 80016dc:	e7fe      	b.n	80016dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <xQueueGenericCreateStatic+0x7e>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <xQueueGenericCreateStatic+0x82>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <xQueueGenericCreateStatic+0x84>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80016f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f8:	f383 8811 	msr	BASEPRI, r3
 80016fc:	f3bf 8f6f 	isb	sy
 8001700:	f3bf 8f4f 	dsb	sy
 8001704:	61fb      	str	r3, [r7, #28]
}
 8001706:	bf00      	nop
 8001708:	e7fe      	b.n	8001708 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800170a:	2350      	movs	r3, #80	; 0x50
 800170c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b50      	cmp	r3, #80	; 0x50
 8001712:	d00a      	beq.n	800172a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	61bb      	str	r3, [r7, #24]
}
 8001726:	bf00      	nop
 8001728:	e7fe      	b.n	8001728 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00d      	beq.n	8001750 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800173c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f805 	bl	800175a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001752:	4618      	mov	r0, r3
 8001754:	3730      	adds	r7, #48	; 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e002      	b.n	800177c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001788:	2101      	movs	r1, #1
 800178a:	69b8      	ldr	r0, [r7, #24]
 800178c:	f7ff ff06 	bl	800159c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	; 0x38
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10a      	bne.n	80017d2 <xQueueGenericSend+0x32>
	__asm volatile
 80017bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c0:	f383 8811 	msr	BASEPRI, r3
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	f3bf 8f4f 	dsb	sy
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80017ce:	bf00      	nop
 80017d0:	e7fe      	b.n	80017d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d103      	bne.n	80017e0 <xQueueGenericSend+0x40>
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <xQueueGenericSend+0x44>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <xQueueGenericSend+0x46>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10a      	bne.n	8001800 <xQueueGenericSend+0x60>
	__asm volatile
 80017ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ee:	f383 8811 	msr	BASEPRI, r3
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80017fc:	bf00      	nop
 80017fe:	e7fe      	b.n	80017fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d103      	bne.n	800180e <xQueueGenericSend+0x6e>
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <xQueueGenericSend+0x72>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <xQueueGenericSend+0x74>
 8001812:	2300      	movs	r3, #0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <xQueueGenericSend+0x8e>
	__asm volatile
 8001818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	623b      	str	r3, [r7, #32]
}
 800182a:	bf00      	nop
 800182c:	e7fe      	b.n	800182c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800182e:	f001 f9b1 	bl	8002b94 <xTaskGetSchedulerState>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <xQueueGenericSend+0x9e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <xQueueGenericSend+0xa2>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <xQueueGenericSend+0xa4>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <xQueueGenericSend+0xbe>
	__asm volatile
 8001848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184c:	f383 8811 	msr	BASEPRI, r3
 8001850:	f3bf 8f6f 	isb	sy
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	61fb      	str	r3, [r7, #28]
}
 800185a:	bf00      	nop
 800185c:	e7fe      	b.n	800185c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800185e:	f001 fe7d 	bl	800355c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	429a      	cmp	r2, r3
 800186c:	d302      	bcc.n	8001874 <xQueueGenericSend+0xd4>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d129      	bne.n	80018c8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800187a:	f000 fa07 	bl	8001c8c <prvCopyDataToQueue>
 800187e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188a:	3324      	adds	r3, #36	; 0x24
 800188c:	4618      	mov	r0, r3
 800188e:	f000 ffbf 	bl	8002810 <xTaskRemoveFromEventList>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001898:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <xQueueGenericSend+0x1f8>)
 800189a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	e00a      	b.n	80018c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <xQueueGenericSend+0x1f8>)
 80018b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80018c0:	f001 fe7c 	bl	80035bc <vPortExitCritical>
				return pdPASS;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e063      	b.n	8001990 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d103      	bne.n	80018d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80018ce:	f001 fe75 	bl	80035bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e05c      	b.n	8001990 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80018d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fff9 	bl	80028d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80018e6:	2301      	movs	r3, #1
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80018ea:	f001 fe67 	bl	80035bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80018ee:	f000 fd6b 	bl	80023c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80018f2:	f001 fe33 	bl	800355c <vPortEnterCritical>
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001902:	d103      	bne.n	800190c <xQueueGenericSend+0x16c>
 8001904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d103      	bne.n	8001922 <xQueueGenericSend+0x182>
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001922:	f001 fe4b 	bl	80035bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001926:	1d3a      	adds	r2, r7, #4
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f000 ffe8 	bl	8002904 <xTaskCheckForTimeOut>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d124      	bne.n	8001984 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800193a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800193c:	f000 fa9e 	bl	8001e7c <prvIsQueueFull>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d018      	beq.n	8001978 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	3310      	adds	r3, #16
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f000 ff0e 	bl	8002770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001956:	f000 fa29 	bl	8001dac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800195a:	f000 fd43 	bl	80023e4 <xTaskResumeAll>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f af7c 	bne.w	800185e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <xQueueGenericSend+0x1f8>)
 8001968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f3bf 8f4f 	dsb	sy
 8001972:	f3bf 8f6f 	isb	sy
 8001976:	e772      	b.n	800185e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800197a:	f000 fa17 	bl	8001dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800197e:	f000 fd31 	bl	80023e4 <xTaskResumeAll>
 8001982:	e76c      	b.n	800185e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001986:	f000 fa11 	bl	8001dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800198a:	f000 fd2b 	bl	80023e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800198e:	2300      	movs	r3, #0
		}
	}
}
 8001990:	4618      	mov	r0, r3
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	e000ed04 	.word	0xe000ed04

0800199c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80019b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b8:	f383 8811 	msr	BASEPRI, r3
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	f3bf 8f4f 	dsb	sy
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80019c6:	bf00      	nop
 80019c8:	e7fe      	b.n	80019c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <xQueueGenericSendFromISR+0x3c>
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <xQueueGenericSendFromISR+0x40>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <xQueueGenericSendFromISR+0x42>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80019e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e6:	f383 8811 	msr	BASEPRI, r3
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	623b      	str	r3, [r7, #32]
}
 80019f4:	bf00      	nop
 80019f6:	e7fe      	b.n	80019f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d103      	bne.n	8001a06 <xQueueGenericSendFromISR+0x6a>
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <xQueueGenericSendFromISR+0x6e>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <xQueueGenericSendFromISR+0x70>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	61fb      	str	r3, [r7, #28]
}
 8001a22:	bf00      	nop
 8001a24:	e7fe      	b.n	8001a24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a26:	f001 fe5b 	bl	80036e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a2a:	f3ef 8211 	mrs	r2, BASEPRI
 8001a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a32:	f383 8811 	msr	BASEPRI, r3
 8001a36:	f3bf 8f6f 	isb	sy
 8001a3a:	f3bf 8f4f 	dsb	sy
 8001a3e:	61ba      	str	r2, [r7, #24]
 8001a40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <xQueueGenericSendFromISR+0xbc>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d12c      	bne.n	8001ab2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a68:	f000 f910 	bl	8001c8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001a6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d112      	bne.n	8001a9c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	3324      	adds	r3, #36	; 0x24
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fec4 	bl	8002810 <xTaskRemoveFromEventList>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00e      	beq.n	8001aac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e007      	b.n	8001aac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b25a      	sxtb	r2, r3
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001aac:	2301      	movs	r3, #1
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001ab0:	e001      	b.n	8001ab6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001ac0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3738      	adds	r7, #56	; 0x38
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <xQueueReceive+0x30>
	__asm volatile
 8001ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	623b      	str	r3, [r7, #32]
}
 8001af8:	bf00      	nop
 8001afa:	e7fe      	b.n	8001afa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <xQueueReceive+0x3e>
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <xQueueReceive+0x42>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <xQueueReceive+0x44>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <xQueueReceive+0x5e>
	__asm volatile
 8001b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b18:	f383 8811 	msr	BASEPRI, r3
 8001b1c:	f3bf 8f6f 	isb	sy
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	61fb      	str	r3, [r7, #28]
}
 8001b26:	bf00      	nop
 8001b28:	e7fe      	b.n	8001b28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b2a:	f001 f833 	bl	8002b94 <xTaskGetSchedulerState>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <xQueueReceive+0x6e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <xQueueReceive+0x72>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <xQueueReceive+0x74>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <xQueueReceive+0x8e>
	__asm volatile
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	61bb      	str	r3, [r7, #24]
}
 8001b56:	bf00      	nop
 8001b58:	e7fe      	b.n	8001b58 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001b5a:	f001 fcff 	bl	800355c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01f      	beq.n	8001baa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b6e:	f000 f8f7 	bl	8001d60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00f      	beq.n	8001ba2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	3310      	adds	r3, #16
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fe42 	bl	8002810 <xTaskRemoveFromEventList>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <xQueueReceive+0x1bc>)
 8001b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001ba2:	f001 fd0b 	bl	80035bc <vPortExitCritical>
				return pdPASS;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e069      	b.n	8001c7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d103      	bne.n	8001bb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001bb0:	f001 fd04 	bl	80035bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e062      	b.n	8001c7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fe88 	bl	80028d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001bcc:	f001 fcf6 	bl	80035bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001bd0:	f000 fbfa 	bl	80023c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bd4:	f001 fcc2 	bl	800355c <vPortEnterCritical>
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d103      	bne.n	8001bee <xQueueReceive+0x122>
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d103      	bne.n	8001c04 <xQueueReceive+0x138>
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c04:	f001 fcda 	bl	80035bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c08:	1d3a      	adds	r2, r7, #4
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fe77 	bl	8002904 <xTaskCheckForTimeOut>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d123      	bne.n	8001c64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c1e:	f000 f917 	bl	8001e50 <prvIsQueueEmpty>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d017      	beq.n	8001c58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	3324      	adds	r3, #36	; 0x24
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fd9d 	bl	8002770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c38:	f000 f8b8 	bl	8001dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c3c:	f000 fbd2 	bl	80023e4 <xTaskResumeAll>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d189      	bne.n	8001b5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <xQueueReceive+0x1bc>)
 8001c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	e780      	b.n	8001b5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c5a:	f000 f8a7 	bl	8001dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c5e:	f000 fbc1 	bl	80023e4 <xTaskResumeAll>
 8001c62:	e77a      	b.n	8001b5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c66:	f000 f8a1 	bl	8001dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c6a:	f000 fbbb 	bl	80023e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c70:	f000 f8ee 	bl	8001e50 <prvIsQueueEmpty>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f43f af6f 	beq.w	8001b5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3730      	adds	r7, #48	; 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000ed04 	.word	0xe000ed04

08001c8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10d      	bne.n	8001cc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d14d      	bne.n	8001d4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 ff8a 	bl	8002bd0 <xTaskPriorityDisinherit>
 8001cbc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	e043      	b.n	8001d4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d119      	bne.n	8001d00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	f001 ff3c 	bl	8003b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	441a      	add	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d32b      	bcc.n	8001d4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	e026      	b.n	8001d4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68d8      	ldr	r0, [r3, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	f001 ff22 	bl	8003b54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	425b      	negs	r3, r3
 8001d1a:	441a      	add	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	425b      	negs	r3, r3
 8001d36:	441a      	add	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d105      	bne.n	8001d4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001d56:	697b      	ldr	r3, [r7, #20]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d018      	beq.n	8001da4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	441a      	add	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d303      	bcc.n	8001d94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68d9      	ldr	r1, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6838      	ldr	r0, [r7, #0]
 8001da0:	f001 fed8 	bl	8003b54 <memcpy>
	}
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001db4:	f001 fbd2 	bl	800355c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001dc0:	e011      	b.n	8001de6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d012      	beq.n	8001df0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3324      	adds	r3, #36	; 0x24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fd1e 	bl	8002810 <xTaskRemoveFromEventList>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001dda:	f000 fdf5 	bl	80029c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dce9      	bgt.n	8001dc2 <prvUnlockQueue+0x16>
 8001dee:	e000      	b.n	8001df2 <prvUnlockQueue+0x46>
					break;
 8001df0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	22ff      	movs	r2, #255	; 0xff
 8001df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001dfa:	f001 fbdf 	bl	80035bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001dfe:	f001 fbad 	bl	800355c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e0a:	e011      	b.n	8001e30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3310      	adds	r3, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fcf9 	bl	8002810 <xTaskRemoveFromEventList>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001e24:	f000 fdd0 	bl	80029c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	dce9      	bgt.n	8001e0c <prvUnlockQueue+0x60>
 8001e38:	e000      	b.n	8001e3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001e3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	22ff      	movs	r2, #255	; 0xff
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001e44:	f001 fbba 	bl	80035bc <vPortExitCritical>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e58:	f001 fb80 	bl	800355c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e001      	b.n	8001e6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e6e:	f001 fba5 	bl	80035bc <vPortExitCritical>

	return xReturn;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e84:	f001 fb6a 	bl	800355c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d102      	bne.n	8001e9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e001      	b.n	8001e9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e9e:	f001 fb8d 	bl	80035bc <vPortExitCritical>

	return xReturn;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e014      	b.n	8001ee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <vQueueAddToRegistry+0x4c>)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10b      	bne.n	8001ee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001ec8:	490b      	ldr	r1, [pc, #44]	; (8001ef8 <vQueueAddToRegistry+0x4c>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <vQueueAddToRegistry+0x4c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001ede:	e006      	b.n	8001eee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b07      	cmp	r3, #7
 8001eea:	d9e7      	bls.n	8001ebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	200006f0 	.word	0x200006f0

08001efc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001f0c:	f001 fb26 	bl	800355c <vPortEnterCritical>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d103      	bne.n	8001f26 <vQueueWaitForMessageRestricted+0x2a>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d103      	bne.n	8001f3c <vQueueWaitForMessageRestricted+0x40>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f3c:	f001 fb3e 	bl	80035bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3324      	adds	r3, #36	; 0x24
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fc31 	bl	80027b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff28 	bl	8001dac <prvUnlockQueue>
	}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08e      	sub	sp, #56	; 0x38
 8001f68:	af04      	add	r7, sp, #16
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	623b      	str	r3, [r7, #32]
}
 8001f8a:	bf00      	nop
 8001f8c:	e7fe      	b.n	8001f8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <xTaskCreateStatic+0x46>
	__asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	61fb      	str	r3, [r7, #28]
}
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001faa:	235c      	movs	r3, #92	; 0x5c
 8001fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b5c      	cmp	r3, #92	; 0x5c
 8001fb2:	d00a      	beq.n	8001fca <xTaskCreateStatic+0x66>
	__asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	61bb      	str	r3, [r7, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	e7fe      	b.n	8001fc8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01e      	beq.n	800200e <xTaskCreateStatic+0xaa>
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01b      	beq.n	800200e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9303      	str	r3, [sp, #12]
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f850 	bl	80020a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002008:	f000 f8d4 	bl	80021b4 <prvAddNewTaskToReadyList>
 800200c:	e001      	b.n	8002012 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002012:	697b      	ldr	r3, [r7, #20]
	}
 8002014:	4618      	mov	r0, r3
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af04      	add	r7, sp, #16
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f001 fb93 	bl	800375c <pvPortMalloc>
 8002036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00e      	beq.n	800205c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800203e:	205c      	movs	r0, #92	; 0x5c
 8002040:	f001 fb8c 	bl	800375c <pvPortMalloc>
 8002044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
 8002052:	e005      	b.n	8002060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f001 fc45 	bl	80038e4 <vPortFree>
 800205a:	e001      	b.n	8002060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	2300      	movs	r3, #0
 8002072:	9303      	str	r3, [sp, #12]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f80e 	bl	80020a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800208a:	69f8      	ldr	r0, [r7, #28]
 800208c:	f000 f892 	bl	80021b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002090:	2301      	movs	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e002      	b.n	800209c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800209c:	69bb      	ldr	r3, [r7, #24]
	}
 800209e:	4618      	mov	r0, r3
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b088      	sub	sp, #32
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	21a5      	movs	r1, #165	; 0xa5
 80020c0:	f001 fd56 	bl	8003b70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020ce:	3b01      	subs	r3, #1
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f023 0307 	bic.w	r3, r3, #7
 80020dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <prvInitialiseNewTask+0x58>
	__asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	617b      	str	r3, [r7, #20]
}
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e012      	b.n	800212a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	7819      	ldrb	r1, [r3, #0]
 800210c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	3334      	adds	r3, #52	; 0x34
 8002114:	460a      	mov	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3301      	adds	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d9e9      	bls.n	8002104 <prvInitialiseNewTask+0x5e>
 8002130:	e000      	b.n	8002134 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002132:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	2b37      	cmp	r3, #55	; 0x37
 8002140:	d901      	bls.n	8002146 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002142:	2337      	movs	r3, #55	; 0x37
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002150:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	2200      	movs	r2, #0
 8002156:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	3304      	adds	r3, #4
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f98c 	bl	800147a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	3318      	adds	r3, #24
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f987 	bl	800147a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002170:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	2200      	movs	r2, #0
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	69b8      	ldr	r0, [r7, #24]
 8002196:	f001 f8ef 	bl	8003378 <pxPortInitialiseStack>
 800219a:	4602      	mov	r2, r0
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80021bc:	f001 f9ce 	bl	800355c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <prvAddNewTaskToReadyList+0xc4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a2c      	ldr	r2, [pc, #176]	; (8002278 <prvAddNewTaskToReadyList+0xc4>)
 80021c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <prvAddNewTaskToReadyList+0xc8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80021d2:	4a2a      	ldr	r2, [pc, #168]	; (800227c <prvAddNewTaskToReadyList+0xc8>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <prvAddNewTaskToReadyList+0xc4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d110      	bne.n	8002202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80021e0:	f000 fc16 	bl	8002a10 <prvInitialiseTaskLists>
 80021e4:	e00d      	b.n	8002202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <prvAddNewTaskToReadyList+0xcc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <prvAddNewTaskToReadyList+0xc8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d802      	bhi.n	8002202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80021fc:	4a1f      	ldr	r2, [pc, #124]	; (800227c <prvAddNewTaskToReadyList+0xc8>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <prvAddNewTaskToReadyList+0xd0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <prvAddNewTaskToReadyList+0xd0>)
 800220a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <prvAddNewTaskToReadyList+0xd0>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <prvAddNewTaskToReadyList+0xd4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d903      	bls.n	8002228 <prvAddNewTaskToReadyList+0x74>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <prvAddNewTaskToReadyList+0xd4>)
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4a15      	ldr	r2, [pc, #84]	; (800228c <prvAddNewTaskToReadyList+0xd8>)
 8002236:	441a      	add	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f7ff f927 	bl	8001492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002244:	f001 f9ba 	bl	80035bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <prvAddNewTaskToReadyList+0xcc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <prvAddNewTaskToReadyList+0xc8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	429a      	cmp	r2, r3
 800225c:	d207      	bcs.n	800226e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <prvAddNewTaskToReadyList+0xdc>)
 8002260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000c04 	.word	0x20000c04
 800227c:	20000730 	.word	0x20000730
 8002280:	20000c10 	.word	0x20000c10
 8002284:	20000c20 	.word	0x20000c20
 8002288:	20000c0c 	.word	0x20000c0c
 800228c:	20000734 	.word	0x20000734
 8002290:	e000ed04 	.word	0xe000ed04

08002294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d017      	beq.n	80022d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <vTaskDelay+0x60>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <vTaskDelay+0x30>
	__asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	60bb      	str	r3, [r7, #8]
}
 80022c0:	bf00      	nop
 80022c2:	e7fe      	b.n	80022c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80022c4:	f000 f880 	bl	80023c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80022c8:	2100      	movs	r1, #0
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fcee 	bl	8002cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80022d0:	f000 f888 	bl	80023e4 <xTaskResumeAll>
 80022d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <vTaskDelay+0x64>)
 80022de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000c2c 	.word	0x20000c2c
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800230a:	463a      	mov	r2, r7
 800230c:	1d39      	adds	r1, r7, #4
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f860 	bl	80013d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	9202      	str	r2, [sp, #8]
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	460a      	mov	r2, r1
 800232a:	4921      	ldr	r1, [pc, #132]	; (80023b0 <vTaskStartScheduler+0xb4>)
 800232c:	4821      	ldr	r0, [pc, #132]	; (80023b4 <vTaskStartScheduler+0xb8>)
 800232e:	f7ff fe19 	bl	8001f64 <xTaskCreateStatic>
 8002332:	4603      	mov	r3, r0
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <vTaskStartScheduler+0xbc>)
 8002336:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <vTaskStartScheduler+0xbc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e001      	b.n	800234a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002350:	f000 fd00 	bl	8002d54 <xTimerCreateTimerTask>
 8002354:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d116      	bne.n	800238a <vTaskStartScheduler+0x8e>
	__asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	613b      	str	r3, [r7, #16]
}
 800236e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <vTaskStartScheduler+0xc0>)
 8002372:	f04f 32ff 	mov.w	r2, #4294967295
 8002376:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <vTaskStartScheduler+0xc4>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <vTaskStartScheduler+0xc8>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002384:	f001 f878 	bl	8003478 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002388:	e00e      	b.n	80023a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d10a      	bne.n	80023a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	60fb      	str	r3, [r7, #12]
}
 80023a4:	bf00      	nop
 80023a6:	e7fe      	b.n	80023a6 <vTaskStartScheduler+0xaa>
}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	08003bb4 	.word	0x08003bb4
 80023b4:	080029e1 	.word	0x080029e1
 80023b8:	20000c28 	.word	0x20000c28
 80023bc:	20000c24 	.word	0x20000c24
 80023c0:	20000c10 	.word	0x20000c10
 80023c4:	20000c08 	.word	0x20000c08

080023c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <vTaskSuspendAll+0x18>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <vTaskSuspendAll+0x18>)
 80023d4:	6013      	str	r3, [r2, #0]
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000c2c 	.word	0x20000c2c

080023e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <xTaskResumeAll+0x118>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10a      	bne.n	8002410 <xTaskResumeAll+0x2c>
	__asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	603b      	str	r3, [r7, #0]
}
 800240c:	bf00      	nop
 800240e:	e7fe      	b.n	800240e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002410:	f001 f8a4 	bl	800355c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <xTaskResumeAll+0x118>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3b01      	subs	r3, #1
 800241a:	4a38      	ldr	r2, [pc, #224]	; (80024fc <xTaskResumeAll+0x118>)
 800241c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <xTaskResumeAll+0x118>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d162      	bne.n	80024ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <xTaskResumeAll+0x11c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d05e      	beq.n	80024ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800242e:	e02f      	b.n	8002490 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <xTaskResumeAll+0x120>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3318      	adds	r3, #24
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f883 	bl	8001548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3304      	adds	r3, #4
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f87e 	bl	8001548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <xTaskResumeAll+0x124>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d903      	bls.n	8002460 <xTaskResumeAll+0x7c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <xTaskResumeAll+0x124>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <xTaskResumeAll+0x128>)
 800246e:	441a      	add	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7ff f80b 	bl	8001492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <xTaskResumeAll+0x12c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <xTaskResumeAll+0x130>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <xTaskResumeAll+0x120>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1cb      	bne.n	8002430 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800249e:	f000 fb55 	bl	8002b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <xTaskResumeAll+0x134>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024ae:	f000 f845 	bl	800253c <xTaskIncrementTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <xTaskResumeAll+0x130>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f1      	bne.n	80024ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <xTaskResumeAll+0x134>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <xTaskResumeAll+0x130>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <xTaskResumeAll+0x138>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80024ec:	f001 f866 	bl	80035bc <vPortExitCritical>

	return xAlreadyYielded;
 80024f0:	68bb      	ldr	r3, [r7, #8]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000c2c 	.word	0x20000c2c
 8002500:	20000c04 	.word	0x20000c04
 8002504:	20000bc4 	.word	0x20000bc4
 8002508:	20000c0c 	.word	0x20000c0c
 800250c:	20000734 	.word	0x20000734
 8002510:	20000730 	.word	0x20000730
 8002514:	20000c18 	.word	0x20000c18
 8002518:	20000c14 	.word	0x20000c14
 800251c:	e000ed04 	.word	0xe000ed04

08002520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <xTaskGetTickCount+0x18>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800252c:	687b      	ldr	r3, [r7, #4]
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000c08 	.word	0x20000c08

0800253c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002546:	4b51      	ldr	r3, [pc, #324]	; (800268c <xTaskIncrementTick+0x150>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 808e 	bne.w	800266c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <xTaskIncrementTick+0x154>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002558:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <xTaskIncrementTick+0x154>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d120      	bne.n	80025a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <xTaskIncrementTick+0x158>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <xTaskIncrementTick+0x48>
	__asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	603b      	str	r3, [r7, #0]
}
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <xTaskIncrementTick+0x46>
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <xTaskIncrementTick+0x158>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <xTaskIncrementTick+0x15c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a41      	ldr	r2, [pc, #260]	; (8002694 <xTaskIncrementTick+0x158>)
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4a41      	ldr	r2, [pc, #260]	; (8002698 <xTaskIncrementTick+0x15c>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <xTaskIncrementTick+0x160>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <xTaskIncrementTick+0x160>)
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	f000 fad3 	bl	8002b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <xTaskIncrementTick+0x164>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d34e      	bcc.n	800264e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <xTaskIncrementTick+0x158>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <xTaskIncrementTick+0x82>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xTaskIncrementTick+0x84>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <xTaskIncrementTick+0x164>)
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ca:	601a      	str	r2, [r3, #0]
					break;
 80025cc:	e03f      	b.n	800264e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <xTaskIncrementTick+0x158>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d203      	bcs.n	80025ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80025e6:	4a2e      	ldr	r2, [pc, #184]	; (80026a0 <xTaskIncrementTick+0x164>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6013      	str	r3, [r2, #0]
						break;
 80025ec:	e02f      	b.n	800264e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3304      	adds	r3, #4
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ffa8 	bl	8001548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3318      	adds	r3, #24
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe ff9f 	bl	8001548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <xTaskIncrementTick+0x168>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d903      	bls.n	800261e <xTaskIncrementTick+0xe2>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <xTaskIncrementTick+0x168>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <xTaskIncrementTick+0x16c>)
 800262c:	441a      	add	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3304      	adds	r3, #4
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f7fe ff2c 	bl	8001492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <xTaskIncrementTick+0x170>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b3      	bcc.n	80025b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800264c:	e7b0      	b.n	80025b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <xTaskIncrementTick+0x170>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	4914      	ldr	r1, [pc, #80]	; (80026a8 <xTaskIncrementTick+0x16c>)
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d907      	bls.n	8002676 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002666:	2301      	movs	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e004      	b.n	8002676 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <xTaskIncrementTick+0x174>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <xTaskIncrementTick+0x174>)
 8002674:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <xTaskIncrementTick+0x178>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800267e:	2301      	movs	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002682:	697b      	ldr	r3, [r7, #20]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000c2c 	.word	0x20000c2c
 8002690:	20000c08 	.word	0x20000c08
 8002694:	20000bbc 	.word	0x20000bbc
 8002698:	20000bc0 	.word	0x20000bc0
 800269c:	20000c1c 	.word	0x20000c1c
 80026a0:	20000c24 	.word	0x20000c24
 80026a4:	20000c0c 	.word	0x20000c0c
 80026a8:	20000734 	.word	0x20000734
 80026ac:	20000730 	.word	0x20000730
 80026b0:	20000c14 	.word	0x20000c14
 80026b4:	20000c18 	.word	0x20000c18

080026b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <vTaskSwitchContext+0xa4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <vTaskSwitchContext+0xa8>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80026cc:	e041      	b.n	8002752 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <vTaskSwitchContext+0xa8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <vTaskSwitchContext+0xac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e010      	b.n	80026fe <vTaskSwitchContext+0x46>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	607b      	str	r3, [r7, #4]
}
 80026f4:	bf00      	nop
 80026f6:	e7fe      	b.n	80026f6 <vTaskSwitchContext+0x3e>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	491a      	ldr	r1, [pc, #104]	; (8002768 <vTaskSwitchContext+0xb0>)
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0e4      	beq.n	80026dc <vTaskSwitchContext+0x24>
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <vTaskSwitchContext+0xb0>)
 800271e:	4413      	add	r3, r2
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3308      	adds	r3, #8
 8002734:	429a      	cmp	r2, r3
 8002736:	d104      	bne.n	8002742 <vTaskSwitchContext+0x8a>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a08      	ldr	r2, [pc, #32]	; (800276c <vTaskSwitchContext+0xb4>)
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <vTaskSwitchContext+0xac>)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6013      	str	r3, [r2, #0]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	20000c2c 	.word	0x20000c2c
 8002760:	20000c18 	.word	0x20000c18
 8002764:	20000c0c 	.word	0x20000c0c
 8002768:	20000734 	.word	0x20000734
 800276c:	20000730 	.word	0x20000730

08002770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	60fb      	str	r3, [r7, #12]
}
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <vTaskPlaceOnEventList+0x44>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3318      	adds	r3, #24
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fe9a 	bl	80014d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80027a4:	2101      	movs	r1, #1
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f000 fa80 	bl	8002cac <prvAddCurrentTaskToDelayedList>
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000730 	.word	0x20000730

080027b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	617b      	str	r3, [r7, #20]
}
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <vTaskPlaceOnEventListRestricted+0x54>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3318      	adds	r3, #24
 80027e6:	4619      	mov	r1, r3
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7fe fe52 	bl	8001492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68b8      	ldr	r0, [r7, #8]
 80027fe:	f000 fa55 	bl	8002cac <prvAddCurrentTaskToDelayedList>
	}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000730 	.word	0x20000730

08002810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	60fb      	str	r3, [r7, #12]
}
 8002838:	bf00      	nop
 800283a:	e7fe      	b.n	800283a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	3318      	adds	r3, #24
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fe81 	bl	8001548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <xTaskRemoveFromEventList+0xb0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11d      	bne.n	800288a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3304      	adds	r3, #4
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fe78 	bl	8001548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <xTaskRemoveFromEventList+0xb4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d903      	bls.n	800286c <xTaskRemoveFromEventList+0x5c>
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <xTaskRemoveFromEventList+0xb4>)
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <xTaskRemoveFromEventList+0xb8>)
 800287a:	441a      	add	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f7fe fe05 	bl	8001492 <vListInsertEnd>
 8002888:	e005      	b.n	8002896 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	3318      	adds	r3, #24
 800288e:	4619      	mov	r1, r3
 8002890:	480e      	ldr	r0, [pc, #56]	; (80028cc <xTaskRemoveFromEventList+0xbc>)
 8002892:	f7fe fdfe 	bl	8001492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <xTaskRemoveFromEventList+0xc0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d905      	bls.n	80028b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <xTaskRemoveFromEventList+0xc4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e001      	b.n	80028b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80028b4:	697b      	ldr	r3, [r7, #20]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000c2c 	.word	0x20000c2c
 80028c4:	20000c0c 	.word	0x20000c0c
 80028c8:	20000734 	.word	0x20000734
 80028cc:	20000bc4 	.word	0x20000bc4
 80028d0:	20000730 	.word	0x20000730
 80028d4:	20000c18 	.word	0x20000c18

080028d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <vTaskInternalSetTimeOutState+0x24>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <vTaskInternalSetTimeOutState+0x28>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000c1c 	.word	0x20000c1c
 8002900:	20000c08 	.word	0x20000c08

08002904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	613b      	str	r3, [r7, #16]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	60fb      	str	r3, [r7, #12]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002946:	f000 fe09 	bl	800355c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <xTaskCheckForTimeOut+0xbc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d102      	bne.n	800296a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	e023      	b.n	80029b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <xTaskCheckForTimeOut+0xc0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d007      	beq.n	8002986 <xTaskCheckForTimeOut+0x82>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002980:	2301      	movs	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e015      	b.n	80029b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d20b      	bcs.n	80029a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	1ad2      	subs	r2, r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff9b 	bl	80028d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e004      	b.n	80029b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80029b2:	f000 fe03 	bl	80035bc <vPortExitCritical>

	return xReturn;
 80029b6:	69fb      	ldr	r3, [r7, #28]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000c08 	.word	0x20000c08
 80029c4:	20000c1c 	.word	0x20000c1c

080029c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <vTaskMissedYield+0x14>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000c18 	.word	0x20000c18

080029e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029e8:	f000 f852 	bl	8002a90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <prvIdleTask+0x28>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d9f9      	bls.n	80029e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <prvIdleTask+0x2c>)
 80029f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a04:	e7f0      	b.n	80029e8 <prvIdleTask+0x8>
 8002a06:	bf00      	nop
 8002a08:	20000734 	.word	0x20000734
 8002a0c:	e000ed04 	.word	0xe000ed04

08002a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	e00c      	b.n	8002a36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <prvInitialiseTaskLists+0x60>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fd06 	bl	800143c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b37      	cmp	r3, #55	; 0x37
 8002a3a:	d9ef      	bls.n	8002a1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <prvInitialiseTaskLists+0x64>)
 8002a3e:	f7fe fcfd 	bl	800143c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a42:	480d      	ldr	r0, [pc, #52]	; (8002a78 <prvInitialiseTaskLists+0x68>)
 8002a44:	f7fe fcfa 	bl	800143c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <prvInitialiseTaskLists+0x6c>)
 8002a4a:	f7fe fcf7 	bl	800143c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a4e:	480c      	ldr	r0, [pc, #48]	; (8002a80 <prvInitialiseTaskLists+0x70>)
 8002a50:	f7fe fcf4 	bl	800143c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <prvInitialiseTaskLists+0x74>)
 8002a56:	f7fe fcf1 	bl	800143c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <prvInitialiseTaskLists+0x78>)
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <prvInitialiseTaskLists+0x64>)
 8002a5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvInitialiseTaskLists+0x7c>)
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <prvInitialiseTaskLists+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000734 	.word	0x20000734
 8002a74:	20000b94 	.word	0x20000b94
 8002a78:	20000ba8 	.word	0x20000ba8
 8002a7c:	20000bc4 	.word	0x20000bc4
 8002a80:	20000bd8 	.word	0x20000bd8
 8002a84:	20000bf0 	.word	0x20000bf0
 8002a88:	20000bbc 	.word	0x20000bbc
 8002a8c:	20000bc0 	.word	0x20000bc0

08002a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a96:	e019      	b.n	8002acc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a98:	f000 fd60 	bl	800355c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <prvCheckTasksWaitingTermination+0x50>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fd4d 	bl	8001548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <prvCheckTasksWaitingTermination+0x54>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <prvCheckTasksWaitingTermination+0x54>)
 8002ab6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <prvCheckTasksWaitingTermination+0x58>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <prvCheckTasksWaitingTermination+0x58>)
 8002ac0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002ac2:	f000 fd7b 	bl	80035bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f810 	bl	8002aec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <prvCheckTasksWaitingTermination+0x58>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e1      	bne.n	8002a98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000bd8 	.word	0x20000bd8
 8002ae4:	20000c04 	.word	0x20000c04
 8002ae8:	20000bec 	.word	0x20000bec

08002aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 feee 	bl	80038e4 <vPortFree>
				vPortFree( pxTCB );
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 feeb 	bl	80038e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b0e:	e018      	b.n	8002b42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d103      	bne.n	8002b22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fee2 	bl	80038e4 <vPortFree>
	}
 8002b20:	e00f      	b.n	8002b42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d00a      	beq.n	8002b42 <prvDeleteTCB+0x56>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60fb      	str	r3, [r7, #12]
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <prvDeleteTCB+0x54>
	}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <prvResetNextTaskUnblockTime+0x40>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <prvResetNextTaskUnblockTime+0x14>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <prvResetNextTaskUnblockTime+0x16>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <prvResetNextTaskUnblockTime+0x44>)
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b6e:	e008      	b.n	8002b82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <prvResetNextTaskUnblockTime+0x40>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <prvResetNextTaskUnblockTime+0x44>)
 8002b80:	6013      	str	r3, [r2, #0]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000bbc 	.word	0x20000bbc
 8002b90:	20000c24 	.word	0x20000c24

08002b94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <xTaskGetSchedulerState+0x34>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	e008      	b.n	8002bba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <xTaskGetSchedulerState+0x38>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	e001      	b.n	8002bba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002bba:	687b      	ldr	r3, [r7, #4]
	}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000c10 	.word	0x20000c10
 8002bcc:	20000c2c 	.word	0x20000c2c

08002bd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d056      	beq.n	8002c94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <xTaskPriorityDisinherit+0xd0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d00a      	beq.n	8002c06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	60fb      	str	r3, [r7, #12]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	60bb      	str	r3, [r7, #8]
}
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d02c      	beq.n	8002c94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d128      	bne.n	8002c94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fc7e 	bl	8001548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <xTaskPriorityDisinherit+0xd4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d903      	bls.n	8002c74 <xTaskPriorityDisinherit+0xa4>
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <xTaskPriorityDisinherit+0xd4>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <xTaskPriorityDisinherit+0xd8>)
 8002c82:	441a      	add	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7fe fc01 	bl	8001492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002c94:	697b      	ldr	r3, [r7, #20]
	}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000730 	.word	0x20000730
 8002ca4:	20000c0c 	.word	0x20000c0c
 8002ca8:	20000734 	.word	0x20000734

08002cac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fc40 	bl	8001548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d10a      	bne.n	8002ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4819      	ldr	r0, [pc, #100]	; (8002d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8002ce0:	f7fe fbd7 	bl	8001492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ce4:	e026      	b.n	8002d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d209      	bcs.n	8002d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7fe fbe4 	bl	80014d8 <vListInsert>
}
 8002d10:	e010      	b.n	8002d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f7fe fbda 	bl	80014d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d202      	bcs.n	8002d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000c08 	.word	0x20000c08
 8002d40:	20000730 	.word	0x20000730
 8002d44:	20000bf0 	.word	0x20000bf0
 8002d48:	20000bc0 	.word	0x20000bc0
 8002d4c:	20000bbc 	.word	0x20000bbc
 8002d50:	20000c24 	.word	0x20000c24

08002d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002d5e:	f000 facb 	bl	80032f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <xTimerCreateTimerTask+0x80>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d021      	beq.n	8002dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002d72:	1d3a      	adds	r2, r7, #4
 8002d74:	f107 0108 	add.w	r1, r7, #8
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fb43 	bl	8001408 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	9202      	str	r2, [sp, #8]
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	460a      	mov	r2, r1
 8002d94:	4910      	ldr	r1, [pc, #64]	; (8002dd8 <xTimerCreateTimerTask+0x84>)
 8002d96:	4811      	ldr	r0, [pc, #68]	; (8002ddc <xTimerCreateTimerTask+0x88>)
 8002d98:	f7ff f8e4 	bl	8001f64 <xTaskCreateStatic>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <xTimerCreateTimerTask+0x8c>)
 8002da0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <xTimerCreateTimerTask+0x8c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002daa:	2301      	movs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002dca:	697b      	ldr	r3, [r7, #20]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000c60 	.word	0x20000c60
 8002dd8:	08003bbc 	.word	0x08003bbc
 8002ddc:	08002f01 	.word	0x08002f01
 8002de0:	20000c64 	.word	0x20000c64

08002de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	623b      	str	r3, [r7, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <xTimerGenericCommand+0x98>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d02a      	beq.n	8002e70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	dc18      	bgt.n	8002e5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002e2c:	f7ff feb2 	bl	8002b94 <xTaskGetSchedulerState>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d109      	bne.n	8002e4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <xTimerGenericCommand+0x98>)
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	f107 0110 	add.w	r1, r7, #16
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	f7fe fcad 	bl	80017a0 <xQueueGenericSend>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24
 8002e48:	e012      	b.n	8002e70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <xTimerGenericCommand+0x98>)
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	f107 0110 	add.w	r1, r7, #16
 8002e52:	2300      	movs	r3, #0
 8002e54:	2200      	movs	r2, #0
 8002e56:	f7fe fca3 	bl	80017a0 <xQueueGenericSend>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8002e5c:	e008      	b.n	8002e70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <xTimerGenericCommand+0x98>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f107 0110 	add.w	r1, r7, #16
 8002e66:	2300      	movs	r3, #0
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f7fe fd97 	bl	800199c <xQueueGenericSendFromISR>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000c60 	.word	0x20000c60

08002e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <prvProcessExpiredTimer+0x7c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fb55 	bl	8001548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d122      	bne.n	8002eec <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	18d1      	adds	r1, r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f000 f8c8 	bl	8003048 <prvInsertTimerInActiveList>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7ff ff8b 	bl	8002de4 <xTimerGenericCommand>
 8002ece:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	60fb      	str	r3, [r7, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	6978      	ldr	r0, [r7, #20]
 8002ef2:	4798      	blx	r3
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000c58 	.word	0x20000c58

08002f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f857 	bl	8002fc0 <prvGetNextExpireTime>
 8002f12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f803 	bl	8002f24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002f1e:	f000 f8d5 	bl	80030cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f22:	e7f1      	b.n	8002f08 <prvTimerTask+0x8>

08002f24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002f2e:	f7ff fa4b 	bl	80023c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f32:	f107 0308 	add.w	r3, r7, #8
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f866 	bl	8003008 <prvSampleTimeNow>
 8002f3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d130      	bne.n	8002fa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <prvProcessTimerOrBlockTask+0x3c>
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d806      	bhi.n	8002f60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002f52:	f7ff fa47 	bl	80023e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff91 	bl	8002e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002f5e:	e024      	b.n	8002faa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <prvProcessTimerOrBlockTask+0x90>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <prvProcessTimerOrBlockTask+0x94>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fe ffb9 	bl	8001efc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002f8a:	f7ff fa2b 	bl	80023e4 <xTaskResumeAll>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <prvProcessTimerOrBlockTask+0x98>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
}
 8002fa4:	e001      	b.n	8002faa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002fa6:	f7ff fa1d 	bl	80023e4 <xTaskResumeAll>
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000c5c 	.word	0x20000c5c
 8002fb8:	20000c60 	.word	0x20000c60
 8002fbc:	e000ed04 	.word	0xe000ed04

08002fc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <prvGetNextExpireTime+0x44>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <prvGetNextExpireTime+0x44>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e001      	b.n	8002ff6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000c58 	.word	0x20000c58

08003008 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003010:	f7ff fa86 	bl	8002520 <xTaskGetTickCount>
 8003014:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <prvSampleTimeNow+0x3c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d205      	bcs.n	800302c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003020:	f000 f908 	bl	8003234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e002      	b.n	8003032 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003032:	4a04      	ldr	r2, [pc, #16]	; (8003044 <prvSampleTimeNow+0x3c>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000c68 	.word	0x20000c68

08003048 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d812      	bhi.n	8003094 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	1ad2      	subs	r2, r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800307c:	2301      	movs	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e01b      	b.n	80030ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <prvInsertTimerInActiveList+0x7c>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3304      	adds	r3, #4
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7fe fa23 	bl	80014d8 <vListInsert>
 8003092:	e012      	b.n	80030ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d206      	bcs.n	80030aa <prvInsertTimerInActiveList+0x62>
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e007      	b.n	80030ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <prvInsertTimerInActiveList+0x80>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe fa0f 	bl	80014d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80030ba:	697b      	ldr	r3, [r7, #20]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000c5c 	.word	0x20000c5c
 80030c8:	20000c58 	.word	0x20000c58

080030cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08e      	sub	sp, #56	; 0x38
 80030d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030d2:	e09d      	b.n	8003210 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da18      	bge.n	800310c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	3304      	adds	r3, #4
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	61fb      	str	r3, [r7, #28]
}
 80030f8:	bf00      	nop
 80030fa:	e7fe      	b.n	80030fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	6850      	ldr	r0, [r2, #4]
 8003104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	4611      	mov	r1, r2
 800310a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db7d      	blt.n	800320e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	3304      	adds	r3, #4
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fa10 	bl	8001548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003128:	463b      	mov	r3, r7
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff6c 	bl	8003008 <prvSampleTimeNow>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b09      	cmp	r3, #9
 8003136:	d86b      	bhi.n	8003210 <prvProcessReceivedCommands+0x144>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <prvProcessReceivedCommands+0x74>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003169 	.word	0x08003169
 8003144:	08003169 	.word	0x08003169
 8003148:	08003169 	.word	0x08003169
 800314c:	08003211 	.word	0x08003211
 8003150:	080031c5 	.word	0x080031c5
 8003154:	080031fd 	.word	0x080031fd
 8003158:	08003169 	.word	0x08003169
 800315c:	08003169 	.word	0x08003169
 8003160:	08003211 	.word	0x08003211
 8003164:	080031c5 	.word	0x080031c5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	18d1      	adds	r1, r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003176:	f7ff ff67 	bl	8003048 <prvInsertTimerInActiveList>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d047      	beq.n	8003210 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003186:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d13f      	bne.n	8003210 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	441a      	add	r2, r3
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a2:	f7ff fe1f 	bl	8002de4 <xTimerGenericCommand>
 80031a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d130      	bne.n	8003210 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	61bb      	str	r3, [r7, #24]
}
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	617b      	str	r3, [r7, #20]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	18d1      	adds	r1, r2, r3
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f6:	f7ff ff27 	bl	8003048 <prvInsertTimerInActiveList>
					break;
 80031fa:	e009      	b.n	8003210 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003208:	f000 fb6c 	bl	80038e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800320c:	e000      	b.n	8003210 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800320e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <prvProcessReceivedCommands+0x164>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1d39      	adds	r1, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fc57 	bl	8001acc <xQueueReceive>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f47f af57 	bne.w	80030d4 <prvProcessReceivedCommands+0x8>
	}
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	3730      	adds	r7, #48	; 0x30
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000c60 	.word	0x20000c60

08003234 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800323a:	e045      	b.n	80032c8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <prvSwitchTimerLists+0xbc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <prvSwitchTimerLists+0xbc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3304      	adds	r3, #4
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe f977 	bl	8001548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d12e      	bne.n	80032c8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d90e      	bls.n	800329a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <prvSwitchTimerLists+0xbc>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7fe f920 	bl	80014d8 <vListInsert>
 8003298:	e016      	b.n	80032c8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800329a:	2300      	movs	r3, #0
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2300      	movs	r3, #0
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	2100      	movs	r1, #0
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff fd9d 	bl	8002de4 <xTimerGenericCommand>
 80032aa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	603b      	str	r3, [r7, #0]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <prvSwitchTimerLists+0xbc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1b4      	bne.n	800323c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <prvSwitchTimerLists+0xbc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <prvSwitchTimerLists+0xc0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <prvSwitchTimerLists+0xbc>)
 80032de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <prvSwitchTimerLists+0xc0>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	bf00      	nop
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000c58 	.word	0x20000c58
 80032f4:	20000c5c 	.word	0x20000c5c

080032f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80032fe:	f000 f92d 	bl	800355c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <prvCheckForValidListAndQueue+0x60>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d120      	bne.n	800334c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800330a:	4814      	ldr	r0, [pc, #80]	; (800335c <prvCheckForValidListAndQueue+0x64>)
 800330c:	f7fe f896 	bl	800143c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003310:	4813      	ldr	r0, [pc, #76]	; (8003360 <prvCheckForValidListAndQueue+0x68>)
 8003312:	f7fe f893 	bl	800143c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <prvCheckForValidListAndQueue+0x6c>)
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <prvCheckForValidListAndQueue+0x64>)
 800331a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <prvCheckForValidListAndQueue+0x70>)
 800331e:	4a10      	ldr	r2, [pc, #64]	; (8003360 <prvCheckForValidListAndQueue+0x68>)
 8003320:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <prvCheckForValidListAndQueue+0x74>)
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <prvCheckForValidListAndQueue+0x78>)
 800332a:	2110      	movs	r1, #16
 800332c:	200a      	movs	r0, #10
 800332e:	f7fe f99d 	bl	800166c <xQueueGenericCreateStatic>
 8003332:	4603      	mov	r3, r0
 8003334:	4a08      	ldr	r2, [pc, #32]	; (8003358 <prvCheckForValidListAndQueue+0x60>)
 8003336:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <prvCheckForValidListAndQueue+0x60>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <prvCheckForValidListAndQueue+0x60>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	490b      	ldr	r1, [pc, #44]	; (8003374 <prvCheckForValidListAndQueue+0x7c>)
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fdb0 	bl	8001eac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800334c:	f000 f936 	bl	80035bc <vPortExitCritical>
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000c60 	.word	0x20000c60
 800335c:	20000c30 	.word	0x20000c30
 8003360:	20000c44 	.word	0x20000c44
 8003364:	20000c58 	.word	0x20000c58
 8003368:	20000c5c 	.word	0x20000c5c
 800336c:	20000d0c 	.word	0x20000d0c
 8003370:	20000c6c 	.word	0x20000c6c
 8003374:	08003bc4 	.word	0x08003bc4

08003378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3b04      	subs	r3, #4
 8003388:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3b04      	subs	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3b04      	subs	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <pxPortInitialiseStack+0x54>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3b14      	subs	r3, #20
 80033b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b20      	subs	r3, #32
 80033be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033c0:	68fb      	ldr	r3, [r7, #12]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	080033d1 	.word	0x080033d1

080033d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <prvTaskExitError+0x54>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d00a      	beq.n	80033fa <prvTaskExitError+0x2a>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <prvTaskExitError+0x28>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	60bb      	str	r3, [r7, #8]
}
 800340c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800340e:	bf00      	nop
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0fc      	beq.n	8003410 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c
	...

08003430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <pxCurrentTCBConst2>)
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	6808      	ldr	r0, [r1, #0]
 8003436:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800343a:	f380 8809 	msr	PSP, r0
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f380 8811 	msr	BASEPRI, r0
 800344a:	f04e 0e0d 	orr.w	lr, lr, #13
 800344e:	4770      	bx	lr

08003450 <pxCurrentTCBConst2>:
 8003450:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop

08003458 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003458:	4806      	ldr	r0, [pc, #24]	; (8003474 <prvPortStartFirstTask+0x1c>)
 800345a:	6800      	ldr	r0, [r0, #0]
 800345c:	6800      	ldr	r0, [r0, #0]
 800345e:	f380 8808 	msr	MSP, r0
 8003462:	b662      	cpsie	i
 8003464:	b661      	cpsie	f
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	df00      	svc	0
 8003470:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003472:	bf00      	nop
 8003474:	e000ed08 	.word	0xe000ed08

08003478 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <xPortStartScheduler+0xd0>)
 8003480:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <xPortStartScheduler+0xd4>)
 80034a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <xPortStartScheduler+0xd8>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ac:	e009      	b.n	80034c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <xPortStartScheduler+0xd8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <xPortStartScheduler+0xd8>)
 80034b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d0ef      	beq.n	80034ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <xPortStartScheduler+0xd8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1c3 0307 	rsb	r3, r3, #7
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d00a      	beq.n	80034f0 <xPortStartScheduler+0x78>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60bb      	str	r3, [r7, #8]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034f0:	4b17      	ldr	r3, [pc, #92]	; (8003550 <xPortStartScheduler+0xd8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <xPortStartScheduler+0xd8>)
 80034f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <xPortStartScheduler+0xd8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <xPortStartScheduler+0xd8>)
 8003504:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <xPortStartScheduler+0xdc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <xPortStartScheduler+0xdc>)
 8003514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <xPortStartScheduler+0xdc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <xPortStartScheduler+0xdc>)
 8003520:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003524:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003526:	f000 f8b9 	bl	800369c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <xPortStartScheduler+0xe0>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003530:	f7ff ff92 	bl	8003458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003534:	f7ff f8c0 	bl	80026b8 <vTaskSwitchContext>
	prvTaskExitError();
 8003538:	f7ff ff4a 	bl	80033d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e400 	.word	0xe000e400
 800354c:	20000d5c 	.word	0x20000d5c
 8003550:	20000d60 	.word	0x20000d60
 8003554:	e000ed20 	.word	0xe000ed20
 8003558:	2000000c 	.word	0x2000000c

0800355c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	607b      	str	r3, [r7, #4]
}
 8003574:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <vPortEnterCritical+0x58>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <vPortEnterCritical+0x58>)
 800357e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <vPortEnterCritical+0x58>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10f      	bne.n	80035a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <vPortEnterCritical+0x5c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	603b      	str	r3, [r7, #0]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <vPortEnterCritical+0x4a>
	}
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <vPortExitCritical+0x4c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <vPortExitCritical+0x24>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	607b      	str	r3, [r7, #4]
}
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <vPortExitCritical+0x4c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <vPortExitCritical+0x4c>)
 80035e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <vPortExitCritical+0x4c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <vPortExitCritical+0x42>
 80035f2:	2300      	movs	r3, #0
 80035f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f383 8811 	msr	BASEPRI, r3
}
 80035fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	2000000c 	.word	0x2000000c
 800360c:	00000000 	.word	0x00000000

08003610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003610:	f3ef 8009 	mrs	r0, PSP
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <pxCurrentTCBConst>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003620:	6010      	str	r0, [r2, #0]
 8003622:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003626:	f04f 0050 	mov.w	r0, #80	; 0x50
 800362a:	f380 8811 	msr	BASEPRI, r0
 800362e:	f7ff f843 	bl	80026b8 <vTaskSwitchContext>
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	6808      	ldr	r0, [r1, #0]
 8003642:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003646:	f380 8809 	msr	PSP, r0
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	4770      	bx	lr

08003650 <pxCurrentTCBConst>:
 8003650:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
}
 8003670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003672:	f7fe ff63 	bl	800253c <xTaskIncrementTick>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <xPortSysTickHandler+0x40>)
 800367e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	2300      	movs	r3, #0
 8003686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f383 8811 	msr	BASEPRI, r3
}
 800368e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <vPortSetupTimerInterrupt+0x30>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <vPortSetupTimerInterrupt+0x34>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <vPortSetupTimerInterrupt+0x38>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <vPortSetupTimerInterrupt+0x3c>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <vPortSetupTimerInterrupt+0x40>)
 80036ba:	3b01      	subs	r3, #1
 80036bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036be:	4b03      	ldr	r3, [pc, #12]	; (80036cc <vPortSetupTimerInterrupt+0x30>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	e000e010 	.word	0xe000e010
 80036d0:	e000e018 	.word	0xe000e018
 80036d4:	20000000 	.word	0x20000000
 80036d8:	10624dd3 	.word	0x10624dd3
 80036dc:	e000e014 	.word	0xe000e014

080036e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80036e6:	f3ef 8305 	mrs	r3, IPSR
 80036ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	d914      	bls.n	800371c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <vPortValidateInterruptPriority+0x6c>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <vPortValidateInterruptPriority+0x70>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	7afa      	ldrb	r2, [r7, #11]
 8003702:	429a      	cmp	r2, r3
 8003704:	d20a      	bcs.n	800371c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	607b      	str	r3, [r7, #4]
}
 8003718:	bf00      	nop
 800371a:	e7fe      	b.n	800371a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <vPortValidateInterruptPriority+0x74>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <vPortValidateInterruptPriority+0x78>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d90a      	bls.n	8003742 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	603b      	str	r3, [r7, #0]
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <vPortValidateInterruptPriority+0x60>
	}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	e000e3f0 	.word	0xe000e3f0
 8003750:	20000d5c 	.word	0x20000d5c
 8003754:	e000ed0c 	.word	0xe000ed0c
 8003758:	20000d60 	.word	0x20000d60

0800375c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003768:	f7fe fe2e 	bl	80023c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <pvPortMalloc+0x174>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003774:	f000 f910 	bl	8003998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003778:	4b56      	ldr	r3, [pc, #344]	; (80038d4 <pvPortMalloc+0x178>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 808e 	bne.w	80038a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01d      	beq.n	80037c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800378c:	2208      	movs	r2, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d014      	beq.n	80037c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f023 0307 	bic.w	r3, r3, #7
 80037a4:	3308      	adds	r3, #8
 80037a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <pvPortMalloc+0x6c>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	617b      	str	r3, [r7, #20]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d069      	beq.n	80038a2 <pvPortMalloc+0x146>
 80037ce:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <pvPortMalloc+0x17c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d864      	bhi.n	80038a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037d8:	4b40      	ldr	r3, [pc, #256]	; (80038dc <pvPortMalloc+0x180>)
 80037da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <pvPortMalloc+0x180>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037e2:	e004      	b.n	80037ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d903      	bls.n	8003800 <pvPortMalloc+0xa4>
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f1      	bne.n	80037e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003800:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <pvPortMalloc+0x174>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	429a      	cmp	r2, r3
 8003808:	d04b      	beq.n	80038a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2208      	movs	r2, #8
 8003810:	4413      	add	r3, r2
 8003812:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	2308      	movs	r3, #8
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	429a      	cmp	r2, r3
 800382a:	d91f      	bls.n	800386c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <pvPortMalloc+0xf8>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	613b      	str	r3, [r7, #16]
}
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003866:	69b8      	ldr	r0, [r7, #24]
 8003868:	f000 f8f8 	bl	8003a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <pvPortMalloc+0x17c>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <pvPortMalloc+0x17c>)
 8003878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <pvPortMalloc+0x17c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <pvPortMalloc+0x184>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d203      	bcs.n	800388e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <pvPortMalloc+0x17c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <pvPortMalloc+0x184>)
 800388c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <pvPortMalloc+0x178>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	431a      	orrs	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038a2:	f7fe fd9f 	bl	80023e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <pvPortMalloc+0x16a>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60fb      	str	r3, [r7, #12]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <pvPortMalloc+0x168>
	return pvReturn;
 80038c6:	69fb      	ldr	r3, [r7, #28]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3728      	adds	r7, #40	; 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	2000196c 	.word	0x2000196c
 80038d4:	20001978 	.word	0x20001978
 80038d8:	20001970 	.word	0x20001970
 80038dc:	20001964 	.word	0x20001964
 80038e0:	20001974 	.word	0x20001974

080038e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d048      	beq.n	8003988 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80038f6:	2308      	movs	r3, #8
 80038f8:	425b      	negs	r3, r3
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4413      	add	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <vPortFree+0xac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <vPortFree+0x44>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	60fb      	str	r3, [r7, #12]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <vPortFree+0x62>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60bb      	str	r3, [r7, #8]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <vPortFree+0xac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d019      	beq.n	8003988 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d115      	bne.n	8003988 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <vPortFree+0xac>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	43db      	mvns	r3, r3
 8003966:	401a      	ands	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800396c:	f7fe fd2c 	bl	80023c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <vPortFree+0xb0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4413      	add	r3, r2
 800397a:	4a06      	ldr	r2, [pc, #24]	; (8003994 <vPortFree+0xb0>)
 800397c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800397e:	6938      	ldr	r0, [r7, #16]
 8003980:	f000 f86c 	bl	8003a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003984:	f7fe fd2e 	bl	80023e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20001978 	.word	0x20001978
 8003994:	20001970 	.word	0x20001970

08003998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800399e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <prvHeapInit+0xac>)
 80039a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3307      	adds	r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <prvHeapInit+0xac>)
 80039c8:	4413      	add	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <prvHeapInit+0xb0>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <prvHeapInit+0xb0>)
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4413      	add	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039e4:	2208      	movs	r2, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <prvHeapInit+0xb4>)
 80039f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <prvHeapInit+0xb4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <prvHeapInit+0xb4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	1ad2      	subs	r2, r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <prvHeapInit+0xb4>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <prvHeapInit+0xb8>)
 8003a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <prvHeapInit+0xbc>)
 8003a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <prvHeapInit+0xc0>)
 8003a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a36:	601a      	str	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000d64 	.word	0x20000d64
 8003a48:	20001964 	.word	0x20001964
 8003a4c:	2000196c 	.word	0x2000196c
 8003a50:	20001974 	.word	0x20001974
 8003a54:	20001970 	.word	0x20001970
 8003a58:	20001978 	.word	0x20001978

08003a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <prvInsertBlockIntoFreeList+0xa8>)
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e002      	b.n	8003a70 <prvInsertBlockIntoFreeList+0x14>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d8f7      	bhi.n	8003a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d108      	bne.n	8003a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	441a      	add	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d118      	bne.n	8003ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <prvInsertBlockIntoFreeList+0xac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d00d      	beq.n	8003ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	441a      	add	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e008      	b.n	8003aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <prvInsertBlockIntoFreeList+0xac>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e003      	b.n	8003aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d002      	beq.n	8003afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	20001964 	.word	0x20001964
 8003b08:	2000196c 	.word	0x2000196c

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	2600      	movs	r6, #0
 8003b10:	4d0c      	ldr	r5, [pc, #48]	; (8003b44 <__libc_init_array+0x38>)
 8003b12:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	f000 f830 	bl	8003b80 <_init>
 8003b20:	2600      	movs	r6, #0
 8003b22:	4d0a      	ldr	r5, [pc, #40]	; (8003b4c <__libc_init_array+0x40>)
 8003b24:	4c0a      	ldr	r4, [pc, #40]	; (8003b50 <__libc_init_array+0x44>)
 8003b26:	1b64      	subs	r4, r4, r5
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003c00 	.word	0x08003c00
 8003b48:	08003c00 	.word	0x08003c00
 8003b4c:	08003c00 	.word	0x08003c00
 8003b50:	08003c04 	.word	0x08003c04

08003b54 <memcpy>:
 8003b54:	440a      	add	r2, r1
 8003b56:	4291      	cmp	r1, r2
 8003b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b5c:	d100      	bne.n	8003b60 <memcpy+0xc>
 8003b5e:	4770      	bx	lr
 8003b60:	b510      	push	{r4, lr}
 8003b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b6c:	d1f9      	bne.n	8003b62 <memcpy+0xe>
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <memset>:
 8003b70:	4603      	mov	r3, r0
 8003b72:	4402      	add	r2, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
