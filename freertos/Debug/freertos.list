
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c60  08003c60  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003c60  08003c60  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c60  08003c60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000196c  20000010  08003c78  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08003c78  0002197c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c98b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  0002c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020b2  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c389  00000000  00000000  00032222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000885c8  00000000  00000000  0003e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c74  00000000  00000000  000c6bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003be0 	.word	0x08003be0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003be0 	.word	0x08003be0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f942 	bl	80003dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f836 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f87a 	bl	8000254 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 f82a 	bl	80011b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a14      	ldr	r2, [pc, #80]	; (80001b8 <main+0x68>)
 8000166:	2100      	movs	r1, #0
 8000168:	4814      	ldr	r0, [pc, #80]	; (80001bc <main+0x6c>)
 800016a:	f001 f88b 	bl	8001284 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <main+0x70>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f001 f852 	bl	800121c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // LED ON
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800017e:	4811      	ldr	r0, [pc, #68]	; (80001c4 <main+0x74>)
 8000180:	f000 fc1a 	bl	80009b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018a:	480e      	ldr	r0, [pc, #56]	; (80001c4 <main+0x74>)
 800018c:	f000 fc14 	bl	80009b8 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000190:	2064      	movs	r0, #100	; 0x64
 8000192:	f000 f985 	bl	80004a0 <HAL_Delay>
      // LED OFF
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800019c:	4809      	ldr	r0, [pc, #36]	; (80001c4 <main+0x74>)
 800019e:	f000 fc0b 	bl	80009b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4806      	ldr	r0, [pc, #24]	; (80001c4 <main+0x74>)
 80001aa:	f000 fc05 	bl	80009b8 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f000 f976 	bl	80004a0 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80001b4:	e7e0      	b.n	8000178 <main+0x28>
 80001b6:	bf00      	nop
 80001b8:	08003c2c 	.word	0x08003c2c
 80001bc:	080002d5 	.word	0x080002d5
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	40010800 	.word	0x40010800

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 fcfa 	bl	8003bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fbe9 	bl	80009e8 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800021c:	f000 f862 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fe56 	bl	8000eec <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000246:	f000 f84d 	bl	80002e4 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	; 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0308 	add.w	r3, r7, #8
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <MX_GPIO_Init+0x78>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a17      	ldr	r2, [pc, #92]	; (80002cc <MX_GPIO_Init+0x78>)
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <MX_GPIO_Init+0x78>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0320 	and.w	r3, r3, #32
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <MX_GPIO_Init+0x78>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <MX_GPIO_Init+0x78>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_GPIO_Init+0x78>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0304 	and.w	r3, r3, #4
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800029e:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MX_GPIO_Init+0x7c>)
 80002a0:	f000 fb8a 	bl	80009b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	2301      	movs	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b2:	2302      	movs	r3, #2
 80002b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	4619      	mov	r1, r3
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_GPIO_Init+0x7c>)
 80002be:	f000 f9f7 	bl	80006b0 <HAL_GPIO_Init>

}
 80002c2:	bf00      	nop
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40010800 	.word	0x40010800

080002d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f001 f87b 	bl	80013d8 <osDelay>
 80002e2:	e7fb      	b.n	80002dc <StartDefaultTask+0x8>

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x8>
	...

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <HAL_MspInit+0x4c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a10      	ldr	r2, [pc, #64]	; (800033c <HAL_MspInit+0x4c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <HAL_MspInit+0x4c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <HAL_MspInit+0x4c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <HAL_MspInit+0x4c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <HAL_MspInit+0x4c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	603b      	str	r3, [r7, #0]
 8000324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	210f      	movs	r1, #15
 800032a:	f06f 0001 	mvn.w	r0, #1
 800032e:	f000 f996 	bl	800065e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <NMI_Handler+0x4>

08000346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <BusFault_Handler+0x4>

08000358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <UsageFault_Handler+0x4>

0800035e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036e:	f000 f87b 	bl	8000468 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000372:	f002 fc3d 	bl	8002bf0 <xTaskGetSchedulerState>
 8000376:	4603      	mov	r3, r0
 8000378:	2b01      	cmp	r3, #1
 800037a:	d001      	beq.n	8000380 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800037c:	f003 f99c 	bl	80036b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003b6:	f7ff ffe5 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ba:	f003 fbd7 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff fec7 	bl	8000150 <main>
  bx lr
 80003c2:	4770      	bx	lr
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80003cc:	08003c68 	.word	0x08003c68
  ldr r2, =_sbss
 80003d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80003d4:	2000197c 	.word	0x2000197c

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <HAL_Init+0x28>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_Init+0x28>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ec:	2003      	movs	r0, #3
 80003ee:	f000 f92b 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f2:	200f      	movs	r0, #15
 80003f4:	f000 f808 	bl	8000408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003f8:	f7ff ff7a 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40022000 	.word	0x40022000

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_InitTick+0x54>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_InitTick+0x58>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000422:	fbb2 f3f3 	udiv	r3, r2, r3
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f935 	bl	8000696 <HAL_SYSTICK_Config>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000432:	2301      	movs	r3, #1
 8000434:	e00e      	b.n	8000454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b0f      	cmp	r3, #15
 800043a:	d80a      	bhi.n	8000452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800043c:	2200      	movs	r2, #0
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	f04f 30ff 	mov.w	r0, #4294967295
 8000444:	f000 f90b 	bl	800065e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000448:	4a06      	ldr	r2, [pc, #24]	; (8000464 <HAL_InitTick+0x5c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800044e:	2300      	movs	r3, #0
 8000450:	e000      	b.n	8000454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000000 	.word	0x20000000
 8000460:	20000008 	.word	0x20000008
 8000464:	20000004 	.word	0x20000004

08000468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_IncTick+0x1c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_IncTick+0x20>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a03      	ldr	r2, [pc, #12]	; (8000488 <HAL_IncTick+0x20>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000008 	.word	0x20000008
 8000488:	20000030 	.word	0x20000030

0800048c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return uwTick;
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <HAL_GetTick+0x10>)
 8000492:	681b      	ldr	r3, [r3, #0]
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000030 	.word	0x20000030

080004a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a8:	f7ff fff0 	bl	800048c <HAL_GetTick>
 80004ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b8:	d005      	beq.n	80004c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_Delay+0x44>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	461a      	mov	r2, r3
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	4413      	add	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c6:	bf00      	nop
 80004c8:	f7ff ffe0 	bl	800048c <HAL_GetTick>
 80004cc:	4602      	mov	r2, r0
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d8f7      	bhi.n	80004c8 <HAL_Delay+0x28>
  {
  }
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000008 	.word	0x20000008

080004e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f003 0307 	and.w	r3, r3, #7
 80004f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <__NVIC_SetPriorityGrouping+0x44>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <__NVIC_SetPriorityGrouping+0x44>)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60d3      	str	r3, [r2, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <__NVIC_GetPriorityGrouping+0x18>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	f003 0307 	and.w	r3, r3, #7
}
 800053e:	4618      	mov	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	db0a      	blt.n	8000576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	b2da      	uxtb	r2, r3
 8000564:	490c      	ldr	r1, [pc, #48]	; (8000598 <__NVIC_SetPriority+0x4c>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	0112      	lsls	r2, r2, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	440b      	add	r3, r1
 8000570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000574:	e00a      	b.n	800058c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4908      	ldr	r1, [pc, #32]	; (800059c <__NVIC_SetPriority+0x50>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	3b04      	subs	r3, #4
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	440b      	add	r3, r1
 800058a:	761a      	strb	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b089      	sub	sp, #36	; 0x24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	f1c3 0307 	rsb	r3, r3, #7
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	bf28      	it	cs
 80005be:	2304      	movcs	r3, #4
 80005c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3304      	adds	r3, #4
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d902      	bls.n	80005d0 <NVIC_EncodePriority+0x30>
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3b03      	subs	r3, #3
 80005ce:	e000      	b.n	80005d2 <NVIC_EncodePriority+0x32>
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	f04f 32ff 	mov.w	r2, #4294967295
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43da      	mvns	r2, r3
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	401a      	ands	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43d9      	mvns	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	4313      	orrs	r3, r2
         );
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3724      	adds	r7, #36	; 0x24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000614:	d301      	bcc.n	800061a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000616:	2301      	movs	r3, #1
 8000618:	e00f      	b.n	800063a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <SysTick_Config+0x40>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b01      	subs	r3, #1
 8000620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000622:	210f      	movs	r1, #15
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f7ff ff90 	bl	800054c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <SysTick_Config+0x40>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <SysTick_Config+0x40>)
 8000634:	2207      	movs	r2, #7
 8000636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	e000e010 	.word	0xe000e010

08000648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff49 	bl	80004e8 <__NVIC_SetPriorityGrouping>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	4603      	mov	r3, r0
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000670:	f7ff ff5e 	bl	8000530 <__NVIC_GetPriorityGrouping>
 8000674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	68b9      	ldr	r1, [r7, #8]
 800067a:	6978      	ldr	r0, [r7, #20]
 800067c:	f7ff ff90 	bl	80005a0 <NVIC_EncodePriority>
 8000680:	4602      	mov	r2, r0
 8000682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff5f 	bl	800054c <__NVIC_SetPriority>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ffb0 	bl	8000604 <SysTick_Config>
 80006a4:	4603      	mov	r3, r0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c2:	e169      	b.n	8000998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006c4:	2201      	movs	r2, #1
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	4013      	ands	r3, r2
 80006d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	429a      	cmp	r2, r3
 80006de:	f040 8158 	bne.w	8000992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	4a9a      	ldr	r2, [pc, #616]	; (8000950 <HAL_GPIO_Init+0x2a0>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d05e      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 80006ec:	4a98      	ldr	r2, [pc, #608]	; (8000950 <HAL_GPIO_Init+0x2a0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d875      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 80006f2:	4a98      	ldr	r2, [pc, #608]	; (8000954 <HAL_GPIO_Init+0x2a4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d058      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 80006f8:	4a96      	ldr	r2, [pc, #600]	; (8000954 <HAL_GPIO_Init+0x2a4>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d86f      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 80006fe:	4a96      	ldr	r2, [pc, #600]	; (8000958 <HAL_GPIO_Init+0x2a8>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d052      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 8000704:	4a94      	ldr	r2, [pc, #592]	; (8000958 <HAL_GPIO_Init+0x2a8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d869      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 800070a:	4a94      	ldr	r2, [pc, #592]	; (800095c <HAL_GPIO_Init+0x2ac>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d04c      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 8000710:	4a92      	ldr	r2, [pc, #584]	; (800095c <HAL_GPIO_Init+0x2ac>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d863      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 8000716:	4a92      	ldr	r2, [pc, #584]	; (8000960 <HAL_GPIO_Init+0x2b0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d046      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
 800071c:	4a90      	ldr	r2, [pc, #576]	; (8000960 <HAL_GPIO_Init+0x2b0>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d85d      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 8000722:	2b12      	cmp	r3, #18
 8000724:	d82a      	bhi.n	800077c <HAL_GPIO_Init+0xcc>
 8000726:	2b12      	cmp	r3, #18
 8000728:	d859      	bhi.n	80007de <HAL_GPIO_Init+0x12e>
 800072a:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <HAL_GPIO_Init+0x80>)
 800072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000730:	080007ab 	.word	0x080007ab
 8000734:	08000785 	.word	0x08000785
 8000738:	08000797 	.word	0x08000797
 800073c:	080007d9 	.word	0x080007d9
 8000740:	080007df 	.word	0x080007df
 8000744:	080007df 	.word	0x080007df
 8000748:	080007df 	.word	0x080007df
 800074c:	080007df 	.word	0x080007df
 8000750:	080007df 	.word	0x080007df
 8000754:	080007df 	.word	0x080007df
 8000758:	080007df 	.word	0x080007df
 800075c:	080007df 	.word	0x080007df
 8000760:	080007df 	.word	0x080007df
 8000764:	080007df 	.word	0x080007df
 8000768:	080007df 	.word	0x080007df
 800076c:	080007df 	.word	0x080007df
 8000770:	080007df 	.word	0x080007df
 8000774:	0800078d 	.word	0x0800078d
 8000778:	080007a1 	.word	0x080007a1
 800077c:	4a79      	ldr	r2, [pc, #484]	; (8000964 <HAL_GPIO_Init+0x2b4>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d013      	beq.n	80007aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000782:	e02c      	b.n	80007de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	623b      	str	r3, [r7, #32]
          break;
 800078a:	e029      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	3304      	adds	r3, #4
 8000792:	623b      	str	r3, [r7, #32]
          break;
 8000794:	e024      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	3308      	adds	r3, #8
 800079c:	623b      	str	r3, [r7, #32]
          break;
 800079e:	e01f      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	330c      	adds	r3, #12
 80007a6:	623b      	str	r3, [r7, #32]
          break;
 80007a8:	e01a      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007b2:	2304      	movs	r3, #4
 80007b4:	623b      	str	r3, [r7, #32]
          break;
 80007b6:	e013      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d105      	bne.n	80007cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c0:	2308      	movs	r3, #8
 80007c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	611a      	str	r2, [r3, #16]
          break;
 80007ca:	e009      	b.n	80007e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007cc:	2308      	movs	r3, #8
 80007ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	615a      	str	r2, [r3, #20]
          break;
 80007d6:	e003      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
          break;
 80007dc:	e000      	b.n	80007e0 <HAL_GPIO_Init+0x130>
          break;
 80007de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d801      	bhi.n	80007ea <HAL_GPIO_Init+0x13a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	e001      	b.n	80007ee <HAL_GPIO_Init+0x13e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3304      	adds	r3, #4
 80007ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d802      	bhi.n	80007fc <HAL_GPIO_Init+0x14c>
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e002      	b.n	8000802 <HAL_GPIO_Init+0x152>
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	3b08      	subs	r3, #8
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	210f      	movs	r1, #15
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	401a      	ands	r2, r3
 8000814:	6a39      	ldr	r1, [r7, #32]
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	431a      	orrs	r2, r3
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	2b00      	cmp	r3, #0
 800082c:	f000 80b1 	beq.w	8000992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000830:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <HAL_GPIO_Init+0x2b8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a4c      	ldr	r2, [pc, #304]	; (8000968 <HAL_GPIO_Init+0x2b8>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b4a      	ldr	r3, [pc, #296]	; (8000968 <HAL_GPIO_Init+0x2b8>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000848:	4a48      	ldr	r2, [pc, #288]	; (800096c <HAL_GPIO_Init+0x2bc>)
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	3302      	adds	r3, #2
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	f003 0303 	and.w	r3, r3, #3
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	220f      	movs	r2, #15
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a40      	ldr	r2, [pc, #256]	; (8000970 <HAL_GPIO_Init+0x2c0>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d013      	beq.n	800089c <HAL_GPIO_Init+0x1ec>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <HAL_GPIO_Init+0x2c4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d00d      	beq.n	8000898 <HAL_GPIO_Init+0x1e8>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a3e      	ldr	r2, [pc, #248]	; (8000978 <HAL_GPIO_Init+0x2c8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d007      	beq.n	8000894 <HAL_GPIO_Init+0x1e4>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a3d      	ldr	r2, [pc, #244]	; (800097c <HAL_GPIO_Init+0x2cc>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d101      	bne.n	8000890 <HAL_GPIO_Init+0x1e0>
 800088c:	2303      	movs	r3, #3
 800088e:	e006      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 8000890:	2304      	movs	r3, #4
 8000892:	e004      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 8000894:	2302      	movs	r3, #2
 8000896:	e002      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 8000898:	2301      	movs	r3, #1
 800089a:	e000      	b.n	800089e <HAL_GPIO_Init+0x1ee>
 800089c:	2300      	movs	r3, #0
 800089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a0:	f002 0203 	and.w	r2, r2, #3
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	4093      	lsls	r3, r2
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008ae:	492f      	ldr	r1, [pc, #188]	; (800096c <HAL_GPIO_Init+0x2bc>)
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	3302      	adds	r3, #2
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d006      	beq.n	80008d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	492c      	ldr	r1, [pc, #176]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
 80008d4:	e006      	b.n	80008e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	43db      	mvns	r3, r3
 80008de:	4928      	ldr	r1, [pc, #160]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4922      	ldr	r1, [pc, #136]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	604b      	str	r3, [r1, #4]
 80008fc:	e006      	b.n	800090c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	43db      	mvns	r3, r3
 8000906:	491e      	ldr	r1, [pc, #120]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000908:	4013      	ands	r3, r2
 800090a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d006      	beq.n	8000926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	4918      	ldr	r1, [pc, #96]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	608b      	str	r3, [r1, #8]
 8000924:	e006      	b.n	8000934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	43db      	mvns	r3, r3
 800092e:	4914      	ldr	r1, [pc, #80]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000930:	4013      	ands	r3, r2
 8000932:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d021      	beq.n	8000984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	490e      	ldr	r1, [pc, #56]	; (8000980 <HAL_GPIO_Init+0x2d0>)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	60cb      	str	r3, [r1, #12]
 800094c:	e021      	b.n	8000992 <HAL_GPIO_Init+0x2e2>
 800094e:	bf00      	nop
 8000950:	10320000 	.word	0x10320000
 8000954:	10310000 	.word	0x10310000
 8000958:	10220000 	.word	0x10220000
 800095c:	10210000 	.word	0x10210000
 8000960:	10120000 	.word	0x10120000
 8000964:	10110000 	.word	0x10110000
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40011000 	.word	0x40011000
 800097c:	40011400 	.word	0x40011400
 8000980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_GPIO_Init+0x304>)
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	43db      	mvns	r3, r3
 800098c:	4909      	ldr	r1, [pc, #36]	; (80009b4 <HAL_GPIO_Init+0x304>)
 800098e:	4013      	ands	r3, r2
 8000990:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3301      	adds	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	fa22 f303 	lsr.w	r3, r2, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f47f ae8e 	bne.w	80006c4 <HAL_GPIO_Init+0x14>
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	372c      	adds	r7, #44	; 0x2c
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40010400 	.word	0x40010400

080009b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
 80009c4:	4613      	mov	r3, r2
 80009c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009c8:	787b      	ldrb	r3, [r7, #1]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ce:	887a      	ldrh	r2, [r7, #2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009d4:	e003      	b.n	80009de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	041a      	lsls	r2, r3, #16
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	611a      	str	r2, [r3, #16]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e272      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8087 	beq.w	8000b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a08:	4b92      	ldr	r3, [pc, #584]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d00c      	beq.n	8000a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a14:	4b8f      	ldr	r3, [pc, #572]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 030c 	and.w	r3, r3, #12
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d112      	bne.n	8000a46 <HAL_RCC_OscConfig+0x5e>
 8000a20:	4b8c      	ldr	r3, [pc, #560]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a2c:	d10b      	bne.n	8000a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a2e:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d06c      	beq.n	8000b14 <HAL_RCC_OscConfig+0x12c>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d168      	bne.n	8000b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e24c      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a4e:	d106      	bne.n	8000a5e <HAL_RCC_OscConfig+0x76>
 8000a50:	4b80      	ldr	r3, [pc, #512]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a7f      	ldr	r2, [pc, #508]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e02e      	b.n	8000abc <HAL_RCC_OscConfig+0xd4>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10c      	bne.n	8000a80 <HAL_RCC_OscConfig+0x98>
 8000a66:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a7a      	ldr	r2, [pc, #488]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	4b78      	ldr	r3, [pc, #480]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a77      	ldr	r2, [pc, #476]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e01d      	b.n	8000abc <HAL_RCC_OscConfig+0xd4>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a88:	d10c      	bne.n	8000aa4 <HAL_RCC_OscConfig+0xbc>
 8000a8a:	4b72      	ldr	r3, [pc, #456]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a71      	ldr	r2, [pc, #452]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	4b6f      	ldr	r3, [pc, #444]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a6e      	ldr	r2, [pc, #440]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	e00b      	b.n	8000abc <HAL_RCC_OscConfig+0xd4>
 8000aa4:	4b6b      	ldr	r3, [pc, #428]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a6a      	ldr	r2, [pc, #424]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b68      	ldr	r3, [pc, #416]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a67      	ldr	r2, [pc, #412]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d013      	beq.n	8000aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac4:	f7ff fce2 	bl	800048c <HAL_GetTick>
 8000ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aca:	e008      	b.n	8000ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000acc:	f7ff fcde 	bl	800048c <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b64      	cmp	r3, #100	; 0x64
 8000ad8:	d901      	bls.n	8000ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	e200      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ade:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f0      	beq.n	8000acc <HAL_RCC_OscConfig+0xe4>
 8000aea:	e014      	b.n	8000b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aec:	f7ff fcce 	bl	800048c <HAL_GetTick>
 8000af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af2:	e008      	b.n	8000b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000af4:	f7ff fcca 	bl	800048c <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b64      	cmp	r3, #100	; 0x64
 8000b00:	d901      	bls.n	8000b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e1ec      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f0      	bne.n	8000af4 <HAL_RCC_OscConfig+0x10c>
 8000b12:	e000      	b.n	8000b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d063      	beq.n	8000bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b22:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00b      	beq.n	8000b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b2e:	4b49      	ldr	r3, [pc, #292]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d11c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x18c>
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d116      	bne.n	8000b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <HAL_RCC_OscConfig+0x176>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d001      	beq.n	8000b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e1c0      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4939      	ldr	r1, [pc, #228]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	e03a      	b.n	8000bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d020      	beq.n	8000bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <HAL_RCC_OscConfig+0x270>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b82:	f7ff fc83 	bl	800048c <HAL_GetTick>
 8000b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b88:	e008      	b.n	8000b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b8a:	f7ff fc7f 	bl	800048c <HAL_GetTick>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d901      	bls.n	8000b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e1a1      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f0      	beq.n	8000b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4927      	ldr	r1, [pc, #156]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	600b      	str	r3, [r1, #0]
 8000bbc:	e015      	b.n	8000bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_RCC_OscConfig+0x270>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fc62 	bl	800048c <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bcc:	f7ff fc5e 	bl	800048c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e180      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f0      	bne.n	8000bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d03a      	beq.n	8000c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d019      	beq.n	8000c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_RCC_OscConfig+0x274>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c04:	f7ff fc42 	bl	800048c <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fc3e 	bl	800048c <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e160      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 faa6 	bl	800117c <RCC_Delay>
 8000c30:	e01c      	b.n	8000c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_RCC_OscConfig+0x274>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c38:	f7ff fc28 	bl	800048c <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c3e:	e00f      	b.n	8000c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c40:	f7ff fc24 	bl	800048c <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d908      	bls.n	8000c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e146      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	42420000 	.word	0x42420000
 8000c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c60:	4b92      	ldr	r3, [pc, #584]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e9      	bne.n	8000c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80a6 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c7e:	4b8b      	ldr	r3, [pc, #556]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10d      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b88      	ldr	r3, [pc, #544]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a87      	ldr	r2, [pc, #540]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b85      	ldr	r3, [pc, #532]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca6:	4b82      	ldr	r3, [pc, #520]	; (8000eb0 <HAL_RCC_OscConfig+0x4c8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d118      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cb2:	4b7f      	ldr	r3, [pc, #508]	; (8000eb0 <HAL_RCC_OscConfig+0x4c8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a7e      	ldr	r2, [pc, #504]	; (8000eb0 <HAL_RCC_OscConfig+0x4c8>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fbe5 	bl	800048c <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc6:	f7ff fbe1 	bl	800048c <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b64      	cmp	r3, #100	; 0x64
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e103      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <HAL_RCC_OscConfig+0x4c8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d106      	bne.n	8000cfa <HAL_RCC_OscConfig+0x312>
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	4a6e      	ldr	r2, [pc, #440]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6213      	str	r3, [r2, #32]
 8000cf8:	e02d      	b.n	8000d56 <HAL_RCC_OscConfig+0x36e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x334>
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d04:	6a1b      	ldr	r3, [r3, #32]
 8000d06:	4a69      	ldr	r2, [pc, #420]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d08:	f023 0301 	bic.w	r3, r3, #1
 8000d0c:	6213      	str	r3, [r2, #32]
 8000d0e:	4b67      	ldr	r3, [pc, #412]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	4a66      	ldr	r2, [pc, #408]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d14:	f023 0304 	bic.w	r3, r3, #4
 8000d18:	6213      	str	r3, [r2, #32]
 8000d1a:	e01c      	b.n	8000d56 <HAL_RCC_OscConfig+0x36e>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d10c      	bne.n	8000d3e <HAL_RCC_OscConfig+0x356>
 8000d24:	4b61      	ldr	r3, [pc, #388]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4a60      	ldr	r2, [pc, #384]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6213      	str	r3, [r2, #32]
 8000d30:	4b5e      	ldr	r3, [pc, #376]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a5d      	ldr	r2, [pc, #372]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6213      	str	r3, [r2, #32]
 8000d3c:	e00b      	b.n	8000d56 <HAL_RCC_OscConfig+0x36e>
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4a5a      	ldr	r2, [pc, #360]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	6213      	str	r3, [r2, #32]
 8000d4a:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4a57      	ldr	r2, [pc, #348]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d015      	beq.n	8000d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fb95 	bl	800048c <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d64:	e00a      	b.n	8000d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d66:	f7ff fb91 	bl	800048c <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e0b1      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0ee      	beq.n	8000d66 <HAL_RCC_OscConfig+0x37e>
 8000d88:	e014      	b.n	8000db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fb7f 	bl	800048c <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d90:	e00a      	b.n	8000da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d92:	f7ff fb7b 	bl	800048c <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e09b      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ee      	bne.n	8000d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d105      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a3b      	ldr	r2, [pc, #236]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8087 	beq.w	8000ede <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd0:	4b36      	ldr	r3, [pc, #216]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d061      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d146      	bne.n	8000e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de4:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <HAL_RCC_OscConfig+0x4cc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fb4f 	bl	800048c <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df2:	f7ff fb4b 	bl	800048c <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e06d      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f0      	bne.n	8000df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e18:	d108      	bne.n	8000e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4921      	ldr	r1, [pc, #132]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a19      	ldr	r1, [r3, #32]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	491b      	ldr	r1, [pc, #108]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_RCC_OscConfig+0x4cc>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fb1f 	bl	800048c <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e52:	f7ff fb1b 	bl	800048c <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e03d      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x46a>
 8000e70:	e035      	b.n	8000ede <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_RCC_OscConfig+0x4cc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fb08 	bl	800048c <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e80:	f7ff fb04 	bl	800048c <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e026      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x498>
 8000e9e:	e01e      	b.n	8000ede <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d107      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e019      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40007000 	.word	0x40007000
 8000eb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_RCC_OscConfig+0x500>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d106      	bne.n	8000eda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d001      	beq.n	8000ede <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e0d0      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d910      	bls.n	8000f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 0207 	bic.w	r2, r3, #7
 8000f16:	4965      	ldr	r1, [pc, #404]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d001      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e0b8      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d020      	beq.n	8000f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f48:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	494d      	ldr	r1, [pc, #308]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d040      	beq.n	800100c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d107      	bne.n	8000fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d115      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e07f      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d107      	bne.n	8000fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e073      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e06b      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f023 0203 	bic.w	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4936      	ldr	r1, [pc, #216]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fdc:	f7ff fa56 	bl	800048c <HAL_GetTick>
 8000fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe4:	f7ff fa52 	bl	800048c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e053      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 020c 	and.w	r2, r3, #12
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	429a      	cmp	r2, r3
 800100a:	d1eb      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d210      	bcs.n	800103c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 0207 	bic.w	r2, r3, #7
 8001022:	4922      	ldr	r1, [pc, #136]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d001      	beq.n	800103c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e032      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4916      	ldr	r1, [pc, #88]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d009      	beq.n	800107a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	490e      	ldr	r1, [pc, #56]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800107a:	f000 f821 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 800107e:	4602      	mov	r2, r0
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	490a      	ldr	r1, [pc, #40]	; (80010b4 <HAL_RCC_ClockConfig+0x1c8>)
 800108c:	5ccb      	ldrb	r3, [r1, r3]
 800108e:	fa22 f303 	lsr.w	r3, r2, r3
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_RCC_ClockConfig+0x1d0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9b4 	bl	8000408 <HAL_InitTick>

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	08003c50 	.word	0x08003c50
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010c0:	b490      	push	{r4, r7}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_RCC_GetSysClockFreq+0xac>)
 80010c8:	1d3c      	adds	r4, r7, #4
 80010ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010d0:	f240 2301 	movw	r3, #513	; 0x201
 80010d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d002      	beq.n	8001100 <HAL_RCC_GetSysClockFreq+0x40>
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d003      	beq.n	8001106 <HAL_RCC_GetSysClockFreq+0x46>
 80010fe:	e02b      	b.n	8001158 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001102:	623b      	str	r3, [r7, #32]
      break;
 8001104:	e02b      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	0c9b      	lsrs	r3, r3, #18
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3328      	adds	r3, #40	; 0x28
 8001110:	443b      	add	r3, r7
 8001112:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001116:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d012      	beq.n	8001148 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	0c5b      	lsrs	r3, r3, #17
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	3328      	adds	r3, #40	; 0x28
 800112e:	443b      	add	r3, r7
 8001130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001134:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb4>)
 800113a:	fb03 f202 	mul.w	r2, r3, r2
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e004      	b.n	8001152 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_RCC_GetSysClockFreq+0xb8>)
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	623b      	str	r3, [r7, #32]
      break;
 8001156:	e002      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb4>)
 800115a:	623b      	str	r3, [r7, #32]
      break;
 800115c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800115e:	6a3b      	ldr	r3, [r7, #32]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bc90      	pop	{r4, r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	08003c04 	.word	0x08003c04
 8001170:	40021000 	.word	0x40021000
 8001174:	007a1200 	.word	0x007a1200
 8001178:	003d0900 	.word	0x003d0900

0800117c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <RCC_Delay+0x34>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <RCC_Delay+0x38>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0a5b      	lsrs	r3, r3, #9
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001198:	bf00      	nop
  }
  while (Delay --);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	60fa      	str	r2, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f9      	bne.n	8001198 <RCC_Delay+0x1c>
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	20000000 	.word	0x20000000
 80011b4:	10624dd3 	.word	0x10624dd3

080011b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80011be:	f3ef 8305 	mrs	r3, IPSR
 80011c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80011c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ca:	f3ef 8310 	mrs	r3, PRIMASK
 80011ce:	607b      	str	r3, [r7, #4]
  return(result);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <osKernelInitialize+0x32>
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <osKernelInitialize+0x60>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d109      	bne.n	80011f2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80011de:	f3ef 8311 	mrs	r3, BASEPRI
 80011e2:	603b      	str	r3, [r7, #0]
  return(result);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80011ea:	f06f 0305 	mvn.w	r3, #5
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e00c      	b.n	800120c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <osKernelInitialize+0x60>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <osKernelInitialize+0x60>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e002      	b.n	800120c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800120c:	68fb      	ldr	r3, [r7, #12]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000034 	.word	0x20000034

0800121c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001222:	f3ef 8305 	mrs	r3, IPSR
 8001226:	60bb      	str	r3, [r7, #8]
  return(result);
 8001228:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10f      	bne.n	800124e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800122e:	f3ef 8310 	mrs	r3, PRIMASK
 8001232:	607b      	str	r3, [r7, #4]
  return(result);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <osKernelStart+0x32>
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <osKernelStart+0x64>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d109      	bne.n	8001256 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001242:	f3ef 8311 	mrs	r3, BASEPRI
 8001246:	603b      	str	r3, [r7, #0]
  return(result);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <osKernelStart+0x3a>
    stat = osErrorISR;
 800124e:	f06f 0305 	mvn.w	r3, #5
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e00e      	b.n	8001274 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <osKernelStart+0x64>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <osKernelStart+0x64>)
 8001260:	2202      	movs	r2, #2
 8001262:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001264:	f001 f878 	bl	8002358 <vTaskStartScheduler>
      stat = osOK;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e002      	b.n	8001274 <osKernelStart+0x58>
    } else {
      stat = osError;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001274:	68fb      	ldr	r3, [r7, #12]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000034 	.word	0x20000034

08001284 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b092      	sub	sp, #72	; 0x48
 8001288:	af04      	add	r7, sp, #16
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001294:	f3ef 8305 	mrs	r3, IPSR
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 8094 	bne.w	80013ca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012a2:	f3ef 8310 	mrs	r3, PRIMASK
 80012a6:	623b      	str	r3, [r7, #32]
  return(result);
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 808d 	bne.w	80013ca <osThreadNew+0x146>
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <osThreadNew+0x150>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d106      	bne.n	80012c6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80012b8:	f3ef 8311 	mrs	r3, BASEPRI
 80012bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f040 8082 	bne.w	80013ca <osThreadNew+0x146>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d07e      	beq.n	80013ca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80012d0:	2318      	movs	r3, #24
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80012d4:	2300      	movs	r3, #0
 80012d6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80012d8:	f107 031b 	add.w	r3, r7, #27
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d045      	beq.n	8001376 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <osThreadNew+0x74>
        name = attr->name;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <osThreadNew+0x9a>
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	2b38      	cmp	r3, #56	; 0x38
 8001310:	d805      	bhi.n	800131e <osThreadNew+0x9a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <osThreadNew+0x9e>
        return (NULL);
 800131e:	2300      	movs	r3, #0
 8001320:	e054      	b.n	80013cc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00e      	beq.n	8001358 <osThreadNew+0xd4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b5b      	cmp	r3, #91	; 0x5b
 8001340:	d90a      	bls.n	8001358 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <osThreadNew+0xd4>
        mem = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
 8001356:	e010      	b.n	800137a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <osThreadNew+0xf6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d108      	bne.n	800137a <osThreadNew+0xf6>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <osThreadNew+0xf6>
          mem = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
 8001374:	e001      	b.n	800137a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	2b01      	cmp	r3, #1
 800137e:	d110      	bne.n	80013a2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001388:	9202      	str	r2, [sp, #8]
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 fe12 	bl	8001fc0 <xTaskCreateStatic>
 800139c:	4603      	mov	r3, r0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e013      	b.n	80013ca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80013a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d110      	bne.n	80013ca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80013a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 fe5c 	bl	8002078 <xTaskCreate>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d001      	beq.n	80013ca <osThreadNew+0x146>
          hTask = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80013ca:	697b      	ldr	r3, [r7, #20]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000034 	.word	0x20000034

080013d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013e0:	f3ef 8305 	mrs	r3, IPSR
 80013e4:	613b      	str	r3, [r7, #16]
  return(result);
 80013e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013ec:	f3ef 8310 	mrs	r3, PRIMASK
 80013f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <osDelay+0x34>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <osDelay+0x58>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d109      	bne.n	8001414 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001400:	f3ef 8311 	mrs	r3, BASEPRI
 8001404:	60bb      	str	r3, [r7, #8]
  return(result);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <osDelay+0x3c>
    stat = osErrorISR;
 800140c:	f06f 0305 	mvn.w	r3, #5
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e007      	b.n	8001424 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <osDelay+0x4c>
      vTaskDelay(ticks);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 ff66 	bl	80022f0 <vTaskDelay>
    }
  }

  return (stat);
 8001424:	697b      	ldr	r3, [r7, #20]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000034 	.word	0x20000034

08001434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <vApplicationGetIdleTaskMemory+0x28>)
 8001444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <vApplicationGetIdleTaskMemory+0x2c>)
 800144a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000038 	.word	0x20000038
 8001460:	20000094 	.word	0x20000094

08001464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <vApplicationGetTimerTaskMemory+0x2c>)
 8001474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <vApplicationGetTimerTaskMemory+0x30>)
 800147a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000294 	.word	0x20000294
 8001494:	200002f0 	.word	0x200002f0

08001498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f103 0208 	add.w	r2, r3, #8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f103 0208 	add.w	r2, r3, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f103 0208 	add.w	r2, r3, #8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154a:	d103      	bne.n	8001554 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e00c      	b.n	800156e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3308      	adds	r3, #8
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e002      	b.n	8001562 <vListInsert+0x2e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	d2f6      	bcs.n	800155c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6892      	ldr	r2, [r2, #8]
 80015ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6852      	ldr	r2, [r2, #4]
 80015c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d103      	bne.n	80015d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
	...

080015f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10a      	bne.n	8001622 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800161e:	bf00      	nop
 8001620:	e7fe      	b.n	8001620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001622:	f001 ffcb 	bl	80035bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	441a      	add	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	3b01      	subs	r3, #1
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	441a      	add	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d114      	bne.n	80016a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01a      	beq.n	80016b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3310      	adds	r3, #16
 8001684:	4618      	mov	r0, r3
 8001686:	f001 f8f1 	bl	800286c <xTaskRemoveFromEventList>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d012      	beq.n	80016b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <xQueueGenericReset+0xcc>)
 8001692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	e009      	b.n	80016b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3310      	adds	r3, #16
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fef6 	bl	8001498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3324      	adds	r3, #36	; 0x24
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fef1 	bl	8001498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80016b6:	f001 ffb1 	bl	800361c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	e000ed04 	.word	0xe000ed04

080016c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80016dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e0:	f383 8811 	msr	BASEPRI, r3
 80016e4:	f3bf 8f6f 	isb	sy
 80016e8:	f3bf 8f4f 	dsb	sy
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80016ee:	bf00      	nop
 80016f0:	e7fe      	b.n	80016f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800170a:	bf00      	nop
 800170c:	e7fe      	b.n	800170c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <xQueueGenericCreateStatic+0x52>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <xQueueGenericCreateStatic+0x56>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <xQueueGenericCreateStatic+0x58>
 800171e:	2300      	movs	r3, #0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10a      	bne.n	800173a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	623b      	str	r3, [r7, #32]
}
 8001736:	bf00      	nop
 8001738:	e7fe      	b.n	8001738 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <xQueueGenericCreateStatic+0x7e>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <xQueueGenericCreateStatic+0x82>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <xQueueGenericCreateStatic+0x84>
 800174a:	2300      	movs	r3, #0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001754:	f383 8811 	msr	BASEPRI, r3
 8001758:	f3bf 8f6f 	isb	sy
 800175c:	f3bf 8f4f 	dsb	sy
 8001760:	61fb      	str	r3, [r7, #28]
}
 8001762:	bf00      	nop
 8001764:	e7fe      	b.n	8001764 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001766:	2350      	movs	r3, #80	; 0x50
 8001768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b50      	cmp	r3, #80	; 0x50
 800176e:	d00a      	beq.n	8001786 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	f3bf 8f6f 	isb	sy
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	61bb      	str	r3, [r7, #24]
}
 8001782:	bf00      	nop
 8001784:	e7fe      	b.n	8001784 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001798:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f805 	bl	80017b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80017ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3730      	adds	r7, #48	; 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e002      	b.n	80017d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017e4:	2101      	movs	r1, #1
 80017e6:	69b8      	ldr	r0, [r7, #24]
 80017e8:	f7ff ff06 	bl	80015f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <xQueueGenericSend+0x32>
	__asm volatile
 8001818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800182a:	bf00      	nop
 800182c:	e7fe      	b.n	800182c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d103      	bne.n	800183c <xQueueGenericSend+0x40>
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <xQueueGenericSend+0x44>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <xQueueGenericSend+0x46>
 8001840:	2300      	movs	r3, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <xQueueGenericSend+0x60>
	__asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001858:	bf00      	nop
 800185a:	e7fe      	b.n	800185a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d103      	bne.n	800186a <xQueueGenericSend+0x6e>
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <xQueueGenericSend+0x72>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <xQueueGenericSend+0x74>
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <xQueueGenericSend+0x8e>
	__asm volatile
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	623b      	str	r3, [r7, #32]
}
 8001886:	bf00      	nop
 8001888:	e7fe      	b.n	8001888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800188a:	f001 f9b1 	bl	8002bf0 <xTaskGetSchedulerState>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <xQueueGenericSend+0x9e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <xQueueGenericSend+0xa2>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <xQueueGenericSend+0xa4>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <xQueueGenericSend+0xbe>
	__asm volatile
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	61fb      	str	r3, [r7, #28]
}
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018ba:	f001 fe7f 	bl	80035bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <xQueueGenericSend+0xd4>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d129      	bne.n	8001924 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018d6:	f000 fa07 	bl	8001ce8 <prvCopyDataToQueue>
 80018da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	3324      	adds	r3, #36	; 0x24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 ffbf 	bl	800286c <xTaskRemoveFromEventList>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <xQueueGenericSend+0x1f8>)
 80018f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f3bf 8f4f 	dsb	sy
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	e00a      	b.n	800191c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <xQueueGenericSend+0x1f8>)
 800190e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f3bf 8f4f 	dsb	sy
 8001918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800191c:	f001 fe7e 	bl	800361c <vPortExitCritical>
				return pdPASS;
 8001920:	2301      	movs	r3, #1
 8001922:	e063      	b.n	80019ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800192a:	f001 fe77 	bl	800361c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800192e:	2300      	movs	r3, #0
 8001930:	e05c      	b.n	80019ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fff9 	bl	8002934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001942:	2301      	movs	r3, #1
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001946:	f001 fe69 	bl	800361c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800194a:	f000 fd6b 	bl	8002424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800194e:	f001 fe35 	bl	80035bc <vPortEnterCritical>
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001958:	b25b      	sxtb	r3, r3
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d103      	bne.n	8001968 <xQueueGenericSend+0x16c>
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800196e:	b25b      	sxtb	r3, r3
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d103      	bne.n	800197e <xQueueGenericSend+0x182>
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800197e:	f001 fe4d 	bl	800361c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001982:	1d3a      	adds	r2, r7, #4
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 ffe8 	bl	8002960 <xTaskCheckForTimeOut>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d124      	bne.n	80019e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001998:	f000 fa9e 	bl	8001ed8 <prvIsQueueFull>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d018      	beq.n	80019d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	3310      	adds	r3, #16
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 ff0e 	bl	80027cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80019b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019b2:	f000 fa29 	bl	8001e08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80019b6:	f000 fd43 	bl	8002440 <xTaskResumeAll>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f47f af7c 	bne.w	80018ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <xQueueGenericSend+0x1f8>)
 80019c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	e772      	b.n	80018ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80019d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019d6:	f000 fa17 	bl	8001e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80019da:	f000 fd31 	bl	8002440 <xTaskResumeAll>
 80019de:	e76c      	b.n	80018ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80019e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019e2:	f000 fa11 	bl	8001e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80019e6:	f000 fd2b 	bl	8002440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80019ea:	2300      	movs	r3, #0
		}
	}
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	e000ed04 	.word	0xe000ed04

080019f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a22:	bf00      	nop
 8001a24:	e7fe      	b.n	8001a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <xQueueGenericSendFromISR+0x3c>
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <xQueueGenericSendFromISR+0x40>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <xQueueGenericSendFromISR+0x42>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	623b      	str	r3, [r7, #32]
}
 8001a50:	bf00      	nop
 8001a52:	e7fe      	b.n	8001a52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d103      	bne.n	8001a62 <xQueueGenericSendFromISR+0x6a>
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <xQueueGenericSendFromISR+0x6e>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <xQueueGenericSendFromISR+0x70>
 8001a66:	2300      	movs	r3, #0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	61fb      	str	r3, [r7, #28]
}
 8001a7e:	bf00      	nop
 8001a80:	e7fe      	b.n	8001a80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a82:	f001 fe5d 	bl	8003740 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a86:	f3ef 8211 	mrs	r2, BASEPRI
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	61ba      	str	r2, [r7, #24]
 8001a9c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <xQueueGenericSendFromISR+0xbc>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d12c      	bne.n	8001b0e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ac4:	f000 f910 	bl	8001ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ac8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d112      	bne.n	8001af8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	3324      	adds	r3, #36	; 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fec4 	bl	800286c <xTaskRemoveFromEventList>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00e      	beq.n	8001b08 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e007      	b.n	8001b08 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001af8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	b25a      	sxtb	r2, r3
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001b0c:	e001      	b.n	8001b12 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001b1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10a      	bne.n	8001b58 <xQueueReceive+0x30>
	__asm volatile
 8001b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b46:	f383 8811 	msr	BASEPRI, r3
 8001b4a:	f3bf 8f6f 	isb	sy
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	623b      	str	r3, [r7, #32]
}
 8001b54:	bf00      	nop
 8001b56:	e7fe      	b.n	8001b56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <xQueueReceive+0x3e>
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <xQueueReceive+0x42>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <xQueueReceive+0x44>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <xQueueReceive+0x5e>
	__asm volatile
 8001b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	61fb      	str	r3, [r7, #28]
}
 8001b82:	bf00      	nop
 8001b84:	e7fe      	b.n	8001b84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b86:	f001 f833 	bl	8002bf0 <xTaskGetSchedulerState>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <xQueueReceive+0x6e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <xQueueReceive+0x72>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <xQueueReceive+0x74>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <xQueueReceive+0x8e>
	__asm volatile
 8001ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba4:	f383 8811 	msr	BASEPRI, r3
 8001ba8:	f3bf 8f6f 	isb	sy
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	61bb      	str	r3, [r7, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	e7fe      	b.n	8001bb4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001bb6:	f001 fd01 	bl	80035bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01f      	beq.n	8001c06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bca:	f000 f8f7 	bl	8001dbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00f      	beq.n	8001bfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	3310      	adds	r3, #16
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fe42 	bl	800286c <xTaskRemoveFromEventList>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <xQueueReceive+0x1bc>)
 8001bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001bfe:	f001 fd0d 	bl	800361c <vPortExitCritical>
				return pdPASS;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e069      	b.n	8001cda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c0c:	f001 fd06 	bl	800361c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e062      	b.n	8001cda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fe88 	bl	8002934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c28:	f001 fcf8 	bl	800361c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c2c:	f000 fbfa 	bl	8002424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c30:	f001 fcc4 	bl	80035bc <vPortEnterCritical>
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d103      	bne.n	8001c4a <xQueueReceive+0x122>
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c56:	d103      	bne.n	8001c60 <xQueueReceive+0x138>
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c60:	f001 fcdc 	bl	800361c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c64:	1d3a      	adds	r2, r7, #4
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fe77 	bl	8002960 <xTaskCheckForTimeOut>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d123      	bne.n	8001cc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c7a:	f000 f917 	bl	8001eac <prvIsQueueEmpty>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d017      	beq.n	8001cb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	3324      	adds	r3, #36	; 0x24
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd9d 	bl	80027cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c94:	f000 f8b8 	bl	8001e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c98:	f000 fbd2 	bl	8002440 <xTaskResumeAll>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d189      	bne.n	8001bb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <xQueueReceive+0x1bc>)
 8001ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f3bf 8f4f 	dsb	sy
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	e780      	b.n	8001bb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cb6:	f000 f8a7 	bl	8001e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cba:	f000 fbc1 	bl	8002440 <xTaskResumeAll>
 8001cbe:	e77a      	b.n	8001bb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cc2:	f000 f8a1 	bl	8001e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cc6:	f000 fbbb 	bl	8002440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ccc:	f000 f8ee 	bl	8001eac <prvIsQueueEmpty>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f43f af6f 	beq.w	8001bb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3730      	adds	r7, #48	; 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000ed04 	.word	0xe000ed04

08001ce8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d14d      	bne.n	8001daa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 ff8a 	bl	8002c2c <xTaskPriorityDisinherit>
 8001d18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	e043      	b.n	8001daa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d119      	bne.n	8001d5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6898      	ldr	r0, [r3, #8]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	461a      	mov	r2, r3
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	f001 ff3e 	bl	8003bb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	441a      	add	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d32b      	bcc.n	8001daa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e026      	b.n	8001daa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68d8      	ldr	r0, [r3, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	461a      	mov	r2, r3
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	f001 ff24 	bl	8003bb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	425b      	negs	r3, r3
 8001d76:	441a      	add	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	425b      	negs	r3, r3
 8001d92:	441a      	add	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d105      	bne.n	8001daa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001db2:	697b      	ldr	r3, [r7, #20]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d018      	beq.n	8001e00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	441a      	add	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d303      	bcc.n	8001df0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	461a      	mov	r2, r3
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f001 feda 	bl	8003bb4 <memcpy>
	}
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001e10:	f001 fbd4 	bl	80035bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e1c:	e011      	b.n	8001e42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3324      	adds	r3, #36	; 0x24
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fd1e 	bl	800286c <xTaskRemoveFromEventList>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001e36:	f000 fdf5 	bl	8002a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dce9      	bgt.n	8001e1e <prvUnlockQueue+0x16>
 8001e4a:	e000      	b.n	8001e4e <prvUnlockQueue+0x46>
					break;
 8001e4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	22ff      	movs	r2, #255	; 0xff
 8001e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001e56:	f001 fbe1 	bl	800361c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001e5a:	f001 fbaf 	bl	80035bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e66:	e011      	b.n	8001e8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3310      	adds	r3, #16
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fcf9 	bl	800286c <xTaskRemoveFromEventList>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001e80:	f000 fdd0 	bl	8002a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dce9      	bgt.n	8001e68 <prvUnlockQueue+0x60>
 8001e94:	e000      	b.n	8001e98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001e96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001ea0:	f001 fbbc 	bl	800361c <vPortExitCritical>
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001eb4:	f001 fb82 	bl	80035bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e001      	b.n	8001eca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001eca:	f001 fba7 	bl	800361c <vPortExitCritical>

	return xReturn;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001ee0:	f001 fb6c 	bl	80035bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d102      	bne.n	8001ef6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e001      	b.n	8001efa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001efa:	f001 fb8f 	bl	800361c <vPortExitCritical>

	return xReturn;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e014      	b.n	8001f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <vQueueAddToRegistry+0x4c>)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001f24:	490b      	ldr	r1, [pc, #44]	; (8001f54 <vQueueAddToRegistry+0x4c>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <vQueueAddToRegistry+0x4c>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001f3a:	e006      	b.n	8001f4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d9e7      	bls.n	8001f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	200006f0 	.word	0x200006f0

08001f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001f68:	f001 fb28 	bl	80035bc <vPortEnterCritical>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d103      	bne.n	8001f82 <vQueueWaitForMessageRestricted+0x2a>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d103      	bne.n	8001f98 <vQueueWaitForMessageRestricted+0x40>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f98:	f001 fb40 	bl	800361c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3324      	adds	r3, #36	; 0x24
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fc31 	bl	8002814 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff28 	bl	8001e08 <prvUnlockQueue>
	}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af04      	add	r7, sp, #16
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <xTaskCreateStatic+0x2a>
	__asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	623b      	str	r3, [r7, #32]
}
 8001fe6:	bf00      	nop
 8001fe8:	e7fe      	b.n	8001fe8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <xTaskCreateStatic+0x46>
	__asm volatile
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	61fb      	str	r3, [r7, #28]
}
 8002002:	bf00      	nop
 8002004:	e7fe      	b.n	8002004 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002006:	235c      	movs	r3, #92	; 0x5c
 8002008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b5c      	cmp	r3, #92	; 0x5c
 800200e:	d00a      	beq.n	8002026 <xTaskCreateStatic+0x66>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	61bb      	str	r3, [r7, #24]
}
 8002022:	bf00      	nop
 8002024:	e7fe      	b.n	8002024 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01e      	beq.n	800206a <xTaskCreateStatic+0xaa>
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01b      	beq.n	800206a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002044:	2300      	movs	r3, #0
 8002046:	9303      	str	r3, [sp, #12]
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f850 	bl	8002102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002064:	f000 f8d4 	bl	8002210 <prvAddNewTaskToReadyList>
 8002068:	e001      	b.n	800206e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800206e:	697b      	ldr	r3, [r7, #20]
	}
 8002070:	4618      	mov	r0, r3
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af04      	add	r7, sp, #16
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fb95 	bl	80037bc <pvPortMalloc>
 8002092:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00e      	beq.n	80020b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800209a:	205c      	movs	r0, #92	; 0x5c
 800209c:	f001 fb8e 	bl	80037bc <pvPortMalloc>
 80020a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
 80020ae:	e005      	b.n	80020bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f001 fc47 	bl	8003944 <vPortFree>
 80020b6:	e001      	b.n	80020bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d017      	beq.n	80020f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f80e 	bl	8002102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020e6:	69f8      	ldr	r0, [r7, #28]
 80020e8:	f000 f892 	bl	8002210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e002      	b.n	80020f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80020f8:	69bb      	ldr	r3, [r7, #24]
	}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	461a      	mov	r2, r3
 800211a:	21a5      	movs	r1, #165	; 0xa5
 800211c:	f001 fd58 	bl	8003bd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800212a:	3b01      	subs	r3, #1
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f023 0307 	bic.w	r3, r3, #7
 8002138:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	617b      	str	r3, [r7, #20]
}
 8002156:	bf00      	nop
 8002158:	e7fe      	b.n	8002158 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e012      	b.n	8002186 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	7819      	ldrb	r1, [r3, #0]
 8002168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	3334      	adds	r3, #52	; 0x34
 8002170:	460a      	mov	r2, r1
 8002172:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3301      	adds	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d9e9      	bls.n	8002160 <prvInitialiseNewTask+0x5e>
 800218c:	e000      	b.n	8002190 <prvInitialiseNewTask+0x8e>
		{
			break;
 800218e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	2b37      	cmp	r3, #55	; 0x37
 800219c:	d901      	bls.n	80021a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800219e:	2337      	movs	r3, #55	; 0x37
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	2200      	movs	r2, #0
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	3304      	adds	r3, #4
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f98c 	bl	80014d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	3318      	adds	r3, #24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f987 	bl	80014d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	2200      	movs	r2, #0
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	69b8      	ldr	r0, [r7, #24]
 80021f2:	f001 f8ef 	bl	80033d4 <pxPortInitialiseStack>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002206:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002218:	f001 f9d0 	bl	80035bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <prvAddNewTaskToReadyList+0xc4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <prvAddNewTaskToReadyList+0xc4>)
 8002224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <prvAddNewTaskToReadyList+0xc8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800222e:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <prvAddNewTaskToReadyList+0xc8>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <prvAddNewTaskToReadyList+0xc4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d110      	bne.n	800225e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800223c:	f000 fc16 	bl	8002a6c <prvInitialiseTaskLists>
 8002240:	e00d      	b.n	800225e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <prvAddNewTaskToReadyList+0xcc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <prvAddNewTaskToReadyList+0xc8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	429a      	cmp	r2, r3
 8002256:	d802      	bhi.n	800225e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <prvAddNewTaskToReadyList+0xc8>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <prvAddNewTaskToReadyList+0xd0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <prvAddNewTaskToReadyList+0xd0>)
 8002266:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <prvAddNewTaskToReadyList+0xd0>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <prvAddNewTaskToReadyList+0xd4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d903      	bls.n	8002284 <prvAddNewTaskToReadyList+0x74>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <prvAddNewTaskToReadyList+0xd4>)
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <prvAddNewTaskToReadyList+0xd8>)
 8002292:	441a      	add	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f7ff f927 	bl	80014ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80022a0:	f001 f9bc 	bl	800361c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <prvAddNewTaskToReadyList+0xcc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <prvAddNewTaskToReadyList+0xc8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d207      	bcs.n	80022ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <prvAddNewTaskToReadyList+0xdc>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000c04 	.word	0x20000c04
 80022d8:	20000730 	.word	0x20000730
 80022dc:	20000c10 	.word	0x20000c10
 80022e0:	20000c20 	.word	0x20000c20
 80022e4:	20000c0c 	.word	0x20000c0c
 80022e8:	20000734 	.word	0x20000734
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d017      	beq.n	8002332 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <vTaskDelay+0x60>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <vTaskDelay+0x30>
	__asm volatile
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	60bb      	str	r3, [r7, #8]
}
 800231c:	bf00      	nop
 800231e:	e7fe      	b.n	800231e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002320:	f000 f880 	bl	8002424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002324:	2100      	movs	r1, #0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fcee 	bl	8002d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800232c:	f000 f888 	bl	8002440 <xTaskResumeAll>
 8002330:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <vTaskDelay+0x64>)
 800233a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000c2c 	.word	0x20000c2c
 8002354:	e000ed04 	.word	0xe000ed04

08002358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002366:	463a      	mov	r2, r7
 8002368:	1d39      	adds	r1, r7, #4
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f860 	bl	8001434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002374:	6839      	ldr	r1, [r7, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	460a      	mov	r2, r1
 8002386:	4921      	ldr	r1, [pc, #132]	; (800240c <vTaskStartScheduler+0xb4>)
 8002388:	4821      	ldr	r0, [pc, #132]	; (8002410 <vTaskStartScheduler+0xb8>)
 800238a:	f7ff fe19 	bl	8001fc0 <xTaskCreateStatic>
 800238e:	4603      	mov	r3, r0
 8002390:	4a20      	ldr	r2, [pc, #128]	; (8002414 <vTaskStartScheduler+0xbc>)
 8002392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <vTaskStartScheduler+0xbc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800239c:	2301      	movs	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e001      	b.n	80023a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80023ac:	f000 fd00 	bl	8002db0 <xTimerCreateTimerTask>
 80023b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d116      	bne.n	80023e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	613b      	str	r3, [r7, #16]
}
 80023ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <vTaskStartScheduler+0xc0>)
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295
 80023d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <vTaskStartScheduler+0xc4>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <vTaskStartScheduler+0xc8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80023e0:	f001 f87a 	bl	80034d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023e4:	e00e      	b.n	8002404 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d10a      	bne.n	8002404 <vTaskStartScheduler+0xac>
	__asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	60fb      	str	r3, [r7, #12]
}
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <vTaskStartScheduler+0xaa>
}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	08003c14 	.word	0x08003c14
 8002410:	08002a3d 	.word	0x08002a3d
 8002414:	20000c28 	.word	0x20000c28
 8002418:	20000c24 	.word	0x20000c24
 800241c:	20000c10 	.word	0x20000c10
 8002420:	20000c08 	.word	0x20000c08

08002424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <vTaskSuspendAll+0x18>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a03      	ldr	r2, [pc, #12]	; (800243c <vTaskSuspendAll+0x18>)
 8002430:	6013      	str	r3, [r2, #0]
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000c2c 	.word	0x20000c2c

08002440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <xTaskResumeAll+0x118>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <xTaskResumeAll+0x2c>
	__asm volatile
 8002456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	603b      	str	r3, [r7, #0]
}
 8002468:	bf00      	nop
 800246a:	e7fe      	b.n	800246a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800246c:	f001 f8a6 	bl	80035bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <xTaskResumeAll+0x118>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	4a38      	ldr	r2, [pc, #224]	; (8002558 <xTaskResumeAll+0x118>)
 8002478:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <xTaskResumeAll+0x118>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d162      	bne.n	8002548 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002482:	4b36      	ldr	r3, [pc, #216]	; (800255c <xTaskResumeAll+0x11c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d05e      	beq.n	8002548 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800248a:	e02f      	b.n	80024ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <xTaskResumeAll+0x120>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3318      	adds	r3, #24
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f883 	bl	80015a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f87e 	bl	80015a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <xTaskResumeAll+0x124>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d903      	bls.n	80024bc <xTaskResumeAll+0x7c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <xTaskResumeAll+0x124>)
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4a27      	ldr	r2, [pc, #156]	; (8002568 <xTaskResumeAll+0x128>)
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3304      	adds	r3, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f7ff f80b 	bl	80014ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024dc:	4b23      	ldr	r3, [pc, #140]	; (800256c <xTaskResumeAll+0x12c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <xTaskResumeAll+0x130>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <xTaskResumeAll+0x120>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1cb      	bne.n	800248c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024fa:	f000 fb55 	bl	8002ba8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <xTaskResumeAll+0x134>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800250a:	f000 f845 	bl	8002598 <xTaskIncrementTick>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <xTaskResumeAll+0x130>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3b01      	subs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f1      	bne.n	800250a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <xTaskResumeAll+0x134>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <xTaskResumeAll+0x130>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002534:	2301      	movs	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <xTaskResumeAll+0x138>)
 800253a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002548:	f001 f868 	bl	800361c <vPortExitCritical>

	return xAlreadyYielded;
 800254c:	68bb      	ldr	r3, [r7, #8]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000c2c 	.word	0x20000c2c
 800255c:	20000c04 	.word	0x20000c04
 8002560:	20000bc4 	.word	0x20000bc4
 8002564:	20000c0c 	.word	0x20000c0c
 8002568:	20000734 	.word	0x20000734
 800256c:	20000730 	.word	0x20000730
 8002570:	20000c18 	.word	0x20000c18
 8002574:	20000c14 	.word	0x20000c14
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <xTaskGetTickCount+0x18>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	20000c08 	.word	0x20000c08

08002598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <xTaskIncrementTick+0x150>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 808e 	bne.w	80026c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025ac:	4b4f      	ldr	r3, [pc, #316]	; (80026ec <xTaskIncrementTick+0x154>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025b4:	4a4d      	ldr	r2, [pc, #308]	; (80026ec <xTaskIncrementTick+0x154>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d120      	bne.n	8002602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <xTaskIncrementTick+0x158>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	603b      	str	r3, [r7, #0]
}
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xTaskIncrementTick+0x46>
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <xTaskIncrementTick+0x158>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <xTaskIncrementTick+0x15c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a41      	ldr	r2, [pc, #260]	; (80026f0 <xTaskIncrementTick+0x158>)
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4a41      	ldr	r2, [pc, #260]	; (80026f4 <xTaskIncrementTick+0x15c>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <xTaskIncrementTick+0x160>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a3f      	ldr	r2, [pc, #252]	; (80026f8 <xTaskIncrementTick+0x160>)
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	f000 fad3 	bl	8002ba8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <xTaskIncrementTick+0x164>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d34e      	bcc.n	80026aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <xTaskIncrementTick+0x158>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xTaskIncrementTick+0x82>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xTaskIncrementTick+0x84>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <xTaskIncrementTick+0x164>)
 8002622:	f04f 32ff 	mov.w	r2, #4294967295
 8002626:	601a      	str	r2, [r3, #0]
					break;
 8002628:	e03f      	b.n	80026aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <xTaskIncrementTick+0x158>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	d203      	bcs.n	800264a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002642:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <xTaskIncrementTick+0x164>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6013      	str	r3, [r2, #0]
						break;
 8002648:	e02f      	b.n	80026aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3304      	adds	r3, #4
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe ffa8 	bl	80015a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3318      	adds	r3, #24
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe ff9f 	bl	80015a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <xTaskIncrementTick+0x168>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d903      	bls.n	800267a <xTaskIncrementTick+0xe2>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <xTaskIncrementTick+0x168>)
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <xTaskIncrementTick+0x16c>)
 8002688:	441a      	add	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3304      	adds	r3, #4
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f7fe ff2c 	bl	80014ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <xTaskIncrementTick+0x170>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3b3      	bcc.n	800260c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a8:	e7b0      	b.n	800260c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <xTaskIncrementTick+0x170>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	4914      	ldr	r1, [pc, #80]	; (8002704 <xTaskIncrementTick+0x16c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d907      	bls.n	80026d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e004      	b.n	80026d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <xTaskIncrementTick+0x174>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <xTaskIncrementTick+0x174>)
 80026d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <xTaskIncrementTick+0x178>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80026da:	2301      	movs	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80026de:	697b      	ldr	r3, [r7, #20]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000c2c 	.word	0x20000c2c
 80026ec:	20000c08 	.word	0x20000c08
 80026f0:	20000bbc 	.word	0x20000bbc
 80026f4:	20000bc0 	.word	0x20000bc0
 80026f8:	20000c1c 	.word	0x20000c1c
 80026fc:	20000c24 	.word	0x20000c24
 8002700:	20000c0c 	.word	0x20000c0c
 8002704:	20000734 	.word	0x20000734
 8002708:	20000730 	.word	0x20000730
 800270c:	20000c14 	.word	0x20000c14
 8002710:	20000c18 	.word	0x20000c18

08002714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <vTaskSwitchContext+0xa4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <vTaskSwitchContext+0xa8>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002728:	e041      	b.n	80027ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <vTaskSwitchContext+0xa8>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <vTaskSwitchContext+0xac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e010      	b.n	800275a <vTaskSwitchContext+0x46>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <vTaskSwitchContext+0x40>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	607b      	str	r3, [r7, #4]
}
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <vTaskSwitchContext+0x3e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3b01      	subs	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	491a      	ldr	r1, [pc, #104]	; (80027c4 <vTaskSwitchContext+0xb0>)
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0e4      	beq.n	8002738 <vTaskSwitchContext+0x24>
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <vTaskSwitchContext+0xb0>)
 800277a:	4413      	add	r3, r2
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3308      	adds	r3, #8
 8002790:	429a      	cmp	r2, r3
 8002792:	d104      	bne.n	800279e <vTaskSwitchContext+0x8a>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <vTaskSwitchContext+0xb4>)
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <vTaskSwitchContext+0xac>)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000c2c 	.word	0x20000c2c
 80027bc:	20000c18 	.word	0x20000c18
 80027c0:	20000c0c 	.word	0x20000c0c
 80027c4:	20000734 	.word	0x20000734
 80027c8:	20000730 	.word	0x20000730

080027cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60fb      	str	r3, [r7, #12]
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <vTaskPlaceOnEventList+0x44>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3318      	adds	r3, #24
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fe9a 	bl	8001534 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002800:	2101      	movs	r1, #1
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f000 fa80 	bl	8002d08 <prvAddCurrentTaskToDelayedList>
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000730 	.word	0x20000730

08002814 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	617b      	str	r3, [r7, #20]
}
 8002838:	bf00      	nop
 800283a:	e7fe      	b.n	800283a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <vTaskPlaceOnEventListRestricted+0x54>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3318      	adds	r3, #24
 8002842:	4619      	mov	r1, r3
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7fe fe52 	bl	80014ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f000 fa55 	bl	8002d08 <prvAddCurrentTaskToDelayedList>
	}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000730 	.word	0x20000730

0800286c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	60fb      	str	r3, [r7, #12]
}
 8002894:	bf00      	nop
 8002896:	e7fe      	b.n	8002896 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	3318      	adds	r3, #24
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fe81 	bl	80015a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <xTaskRemoveFromEventList+0xb0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	3304      	adds	r3, #4
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fe78 	bl	80015a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <xTaskRemoveFromEventList+0xb4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d903      	bls.n	80028c8 <xTaskRemoveFromEventList+0x5c>
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	4a16      	ldr	r2, [pc, #88]	; (8002920 <xTaskRemoveFromEventList+0xb4>)
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4a13      	ldr	r2, [pc, #76]	; (8002924 <xTaskRemoveFromEventList+0xb8>)
 80028d6:	441a      	add	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f7fe fe05 	bl	80014ee <vListInsertEnd>
 80028e4:	e005      	b.n	80028f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	3318      	adds	r3, #24
 80028ea:	4619      	mov	r1, r3
 80028ec:	480e      	ldr	r0, [pc, #56]	; (8002928 <xTaskRemoveFromEventList+0xbc>)
 80028ee:	f7fe fdfe 	bl	80014ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <xTaskRemoveFromEventList+0xc0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d905      	bls.n	800290c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002900:	2301      	movs	r3, #1
 8002902:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <xTaskRemoveFromEventList+0xc4>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e001      	b.n	8002910 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002910:	697b      	ldr	r3, [r7, #20]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000c2c 	.word	0x20000c2c
 8002920:	20000c0c 	.word	0x20000c0c
 8002924:	20000734 	.word	0x20000734
 8002928:	20000bc4 	.word	0x20000bc4
 800292c:	20000730 	.word	0x20000730
 8002930:	20000c18 	.word	0x20000c18

08002934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <vTaskInternalSetTimeOutState+0x24>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <vTaskInternalSetTimeOutState+0x28>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000c1c 	.word	0x20000c1c
 800295c:	20000c08 	.word	0x20000c08

08002960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	613b      	str	r3, [r7, #16]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	60fb      	str	r3, [r7, #12]
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80029a2:	f000 fe0b 	bl	80035bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <xTaskCheckForTimeOut+0xbc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d102      	bne.n	80029c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e023      	b.n	8002a0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <xTaskCheckForTimeOut+0xc0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d007      	beq.n	80029e2 <xTaskCheckForTimeOut+0x82>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d302      	bcc.n	80029e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	e015      	b.n	8002a0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d20b      	bcs.n	8002a04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad2      	subs	r2, r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff9b 	bl	8002934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e004      	b.n	8002a0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002a0e:	f000 fe05 	bl	800361c <vPortExitCritical>

	return xReturn;
 8002a12:	69fb      	ldr	r3, [r7, #28]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000c08 	.word	0x20000c08
 8002a20:	20000c1c 	.word	0x20000c1c

08002a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <vTaskMissedYield+0x14>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000c18 	.word	0x20000c18

08002a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a44:	f000 f852 	bl	8002aec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <prvIdleTask+0x28>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d9f9      	bls.n	8002a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <prvIdleTask+0x2c>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a60:	e7f0      	b.n	8002a44 <prvIdleTask+0x8>
 8002a62:	bf00      	nop
 8002a64:	20000734 	.word	0x20000734
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	e00c      	b.n	8002a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <prvInitialiseTaskLists+0x60>)
 8002a84:	4413      	add	r3, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fd06 	bl	8001498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b37      	cmp	r3, #55	; 0x37
 8002a96:	d9ef      	bls.n	8002a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002a9a:	f7fe fcfd 	bl	8001498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <prvInitialiseTaskLists+0x68>)
 8002aa0:	f7fe fcfa 	bl	8001498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <prvInitialiseTaskLists+0x6c>)
 8002aa6:	f7fe fcf7 	bl	8001498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002aaa:	480c      	ldr	r0, [pc, #48]	; (8002adc <prvInitialiseTaskLists+0x70>)
 8002aac:	f7fe fcf4 	bl	8001498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ab0:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <prvInitialiseTaskLists+0x74>)
 8002ab2:	f7fe fcf1 	bl	8001498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <prvInitialiseTaskLists+0x78>)
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002aba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <prvInitialiseTaskLists+0x7c>)
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <prvInitialiseTaskLists+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000734 	.word	0x20000734
 8002ad0:	20000b94 	.word	0x20000b94
 8002ad4:	20000ba8 	.word	0x20000ba8
 8002ad8:	20000bc4 	.word	0x20000bc4
 8002adc:	20000bd8 	.word	0x20000bd8
 8002ae0:	20000bf0 	.word	0x20000bf0
 8002ae4:	20000bbc 	.word	0x20000bbc
 8002ae8:	20000bc0 	.word	0x20000bc0

08002aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002af2:	e019      	b.n	8002b28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002af4:	f000 fd62 	bl	80035bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <prvCheckTasksWaitingTermination+0x50>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fd4d 	bl	80015a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <prvCheckTasksWaitingTermination+0x58>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <prvCheckTasksWaitingTermination+0x58>)
 8002b1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b1e:	f000 fd7d 	bl	800361c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f810 	bl	8002b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <prvCheckTasksWaitingTermination+0x58>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e1      	bne.n	8002af4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000bd8 	.word	0x20000bd8
 8002b40:	20000c04 	.word	0x20000c04
 8002b44:	20000bec 	.word	0x20000bec

08002b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fef0 	bl	8003944 <vPortFree>
				vPortFree( pxTCB );
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 feed 	bl	8003944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b6a:	e018      	b.n	8002b9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d103      	bne.n	8002b7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fee4 	bl	8003944 <vPortFree>
	}
 8002b7c:	e00f      	b.n	8002b9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d00a      	beq.n	8002b9e <prvDeleteTCB+0x56>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	60fb      	str	r3, [r7, #12]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <prvDeleteTCB+0x54>
	}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <prvResetNextTaskUnblockTime+0x40>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <prvResetNextTaskUnblockTime+0x14>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <prvResetNextTaskUnblockTime+0x16>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <prvResetNextTaskUnblockTime+0x44>)
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002bca:	e008      	b.n	8002bde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <prvResetNextTaskUnblockTime+0x40>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a04      	ldr	r2, [pc, #16]	; (8002bec <prvResetNextTaskUnblockTime+0x44>)
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	20000bbc 	.word	0x20000bbc
 8002bec:	20000c24 	.word	0x20000c24

08002bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <xTaskGetSchedulerState+0x34>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	e008      	b.n	8002c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <xTaskGetSchedulerState+0x38>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	e001      	b.n	8002c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c16:	687b      	ldr	r3, [r7, #4]
	}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000c10 	.word	0x20000c10
 8002c28:	20000c2c 	.word	0x20000c2c

08002c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d056      	beq.n	8002cf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <xTaskPriorityDisinherit+0xd0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d00a      	beq.n	8002c62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	60fb      	str	r3, [r7, #12]
}
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	60bb      	str	r3, [r7, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d02c      	beq.n	8002cf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d128      	bne.n	8002cf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fc7e 	bl	80015a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <xTaskPriorityDisinherit+0xd4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d903      	bls.n	8002cd0 <xTaskPriorityDisinherit+0xa4>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <xTaskPriorityDisinherit+0xd4>)
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <xTaskPriorityDisinherit+0xd8>)
 8002cde:	441a      	add	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f7fe fc01 	bl	80014ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002cf0:	697b      	ldr	r3, [r7, #20]
	}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000730 	.word	0x20000730
 8002d00:	20000c0c 	.word	0x20000c0c
 8002d04:	20000734 	.word	0x20000734

08002d08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <prvAddCurrentTaskToDelayedList+0x90>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc40 	bl	80015a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d10a      	bne.n	8002d42 <prvAddCurrentTaskToDelayedList+0x3a>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4819      	ldr	r0, [pc, #100]	; (8002da0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002d3c:	f7fe fbd7 	bl	80014ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d40:	e026      	b.n	8002d90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d209      	bcs.n	8002d6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7fe fbe4 	bl	8001534 <vListInsert>
}
 8002d6c:	e010      	b.n	8002d90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f7fe fbda 	bl	8001534 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d202      	bcs.n	8002d90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000c08 	.word	0x20000c08
 8002d9c:	20000730 	.word	0x20000730
 8002da0:	20000bf0 	.word	0x20000bf0
 8002da4:	20000bc0 	.word	0x20000bc0
 8002da8:	20000bbc 	.word	0x20000bbc
 8002dac:	20000c24 	.word	0x20000c24

08002db0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002dba:	f000 facb 	bl	8003354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <xTimerCreateTimerTask+0x80>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d021      	beq.n	8002e0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002dce:	1d3a      	adds	r2, r7, #4
 8002dd0:	f107 0108 	add.w	r1, r7, #8
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fb43 	bl	8001464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	9202      	str	r2, [sp, #8]
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2302      	movs	r3, #2
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2300      	movs	r3, #0
 8002dee:	460a      	mov	r2, r1
 8002df0:	4910      	ldr	r1, [pc, #64]	; (8002e34 <xTimerCreateTimerTask+0x84>)
 8002df2:	4811      	ldr	r0, [pc, #68]	; (8002e38 <xTimerCreateTimerTask+0x88>)
 8002df4:	f7ff f8e4 	bl	8001fc0 <xTaskCreateStatic>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <xTimerCreateTimerTask+0x8c>)
 8002dfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <xTimerCreateTimerTask+0x8c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002e06:	2301      	movs	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	613b      	str	r3, [r7, #16]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002e26:	697b      	ldr	r3, [r7, #20]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000c60 	.word	0x20000c60
 8002e34:	08003c1c 	.word	0x08003c1c
 8002e38:	08002f5d 	.word	0x08002f5d
 8002e3c:	20000c64 	.word	0x20000c64

08002e40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	623b      	str	r3, [r7, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <xTimerGenericCommand+0x98>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02a      	beq.n	8002ecc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	dc18      	bgt.n	8002eba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002e88:	f7ff feb2 	bl	8002bf0 <xTaskGetSchedulerState>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d109      	bne.n	8002ea6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <xTimerGenericCommand+0x98>)
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f107 0110 	add.w	r1, r7, #16
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9e:	f7fe fcad 	bl	80017fc <xQueueGenericSend>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24
 8002ea4:	e012      	b.n	8002ecc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <xTimerGenericCommand+0x98>)
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	f107 0110 	add.w	r1, r7, #16
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f7fe fca3 	bl	80017fc <xQueueGenericSend>
 8002eb6:	6278      	str	r0, [r7, #36]	; 0x24
 8002eb8:	e008      	b.n	8002ecc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <xTimerGenericCommand+0x98>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	f107 0110 	add.w	r1, r7, #16
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f7fe fd97 	bl	80019f8 <xQueueGenericSendFromISR>
 8002eca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000c60 	.word	0x20000c60

08002edc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <prvProcessExpiredTimer+0x7c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fb55 	bl	80015a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d122      	bne.n	8002f48 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	18d1      	adds	r1, r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f000 f8c8 	bl	80030a4 <prvInsertTimerInActiveList>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	2100      	movs	r1, #0
 8002f24:	6978      	ldr	r0, [r7, #20]
 8002f26:	f7ff ff8b 	bl	8002e40 <xTimerGenericCommand>
 8002f2a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	60fb      	str	r3, [r7, #12]
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	4798      	blx	r3
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000c58 	.word	0x20000c58

08002f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f857 	bl	800301c <prvGetNextExpireTime>
 8002f6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f803 	bl	8002f80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002f7a:	f000 f8d5 	bl	8003128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f7e:	e7f1      	b.n	8002f64 <prvTimerTask+0x8>

08002f80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002f8a:	f7ff fa4b 	bl	8002424 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f866 	bl	8003064 <prvSampleTimeNow>
 8002f98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d130      	bne.n	8003002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <prvProcessTimerOrBlockTask+0x3c>
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d806      	bhi.n	8002fbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002fae:	f7ff fa47 	bl	8002440 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff91 	bl	8002edc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002fba:	e024      	b.n	8003006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <prvProcessTimerOrBlockTask+0x90>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <prvProcessTimerOrBlockTask+0x94>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fe ffb9 	bl	8001f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002fe6:	f7ff fa2b 	bl	8002440 <xTaskResumeAll>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <prvProcessTimerOrBlockTask+0x98>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
}
 8003000:	e001      	b.n	8003006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003002:	f7ff fa1d 	bl	8002440 <xTaskResumeAll>
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000c5c 	.word	0x20000c5c
 8003014:	20000c60 	.word	0x20000c60
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <prvGetNextExpireTime+0x44>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <prvGetNextExpireTime+0x44>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e001      	b.n	8003052 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000c58 	.word	0x20000c58

08003064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800306c:	f7ff fa86 	bl	800257c <xTaskGetTickCount>
 8003070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <prvSampleTimeNow+0x3c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	429a      	cmp	r2, r3
 800307a:	d205      	bcs.n	8003088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800307c:	f000 f908 	bl	8003290 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e002      	b.n	800308e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <prvSampleTimeNow+0x3c>)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000c68 	.word	0x20000c68

080030a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d812      	bhi.n	80030f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1ad2      	subs	r2, r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e01b      	b.n	8003116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <prvInsertTimerInActiveList+0x7c>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3304      	adds	r3, #4
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f7fe fa23 	bl	8001534 <vListInsert>
 80030ee:	e012      	b.n	8003116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d206      	bcs.n	8003106 <prvInsertTimerInActiveList+0x62>
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e007      	b.n	8003116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <prvInsertTimerInActiveList+0x80>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f7fe fa0f 	bl	8001534 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003116:	697b      	ldr	r3, [r7, #20]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000c5c 	.word	0x20000c5c
 8003124:	20000c58 	.word	0x20000c58

08003128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800312e:	e09d      	b.n	800326c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	da18      	bge.n	8003168 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	3304      	adds	r3, #4
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61fb      	str	r3, [r7, #28]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315e:	6850      	ldr	r0, [r2, #4]
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	4611      	mov	r1, r2
 8003166:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db7d      	blt.n	800326a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	3304      	adds	r3, #4
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fa10 	bl	80015a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003184:	463b      	mov	r3, r7
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff6c 	bl	8003064 <prvSampleTimeNow>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d86b      	bhi.n	800326c <prvProcessReceivedCommands+0x144>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <prvProcessReceivedCommands+0x74>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031c5 	.word	0x080031c5
 80031a8:	0800326d 	.word	0x0800326d
 80031ac:	08003221 	.word	0x08003221
 80031b0:	08003259 	.word	0x08003259
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031c5 	.word	0x080031c5
 80031bc:	0800326d 	.word	0x0800326d
 80031c0:	08003221 	.word	0x08003221
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	18d1      	adds	r1, r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d2:	f7ff ff67 	bl	80030a4 <prvInsertTimerInActiveList>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d047      	beq.n	800326c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d13f      	bne.n	800326c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	441a      	add	r2, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2300      	movs	r3, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fe:	f7ff fe1f 	bl	8002e40 <xTimerGenericCommand>
 8003202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d130      	bne.n	800326c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	61bb      	str	r3, [r7, #24]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	617b      	str	r3, [r7, #20]
}
 8003240:	bf00      	nop
 8003242:	e7fe      	b.n	8003242 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	18d1      	adds	r1, r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003252:	f7ff ff27 	bl	80030a4 <prvInsertTimerInActiveList>
					break;
 8003256:	e009      	b.n	800326c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003264:	f000 fb6e 	bl	8003944 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003268:	e000      	b.n	800326c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800326a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <prvProcessReceivedCommands+0x164>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1d39      	adds	r1, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fc57 	bl	8001b28 <xQueueReceive>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	f47f af57 	bne.w	8003130 <prvProcessReceivedCommands+0x8>
	}
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	3730      	adds	r7, #48	; 0x30
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000c60 	.word	0x20000c60

08003290 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003296:	e045      	b.n	8003324 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <prvSwitchTimerLists+0xbc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <prvSwitchTimerLists+0xbc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe f977 	bl	80015a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12e      	bne.n	8003324 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d90e      	bls.n	80032f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <prvSwitchTimerLists+0xbc>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f7fe f920 	bl	8001534 <vListInsert>
 80032f4:	e016      	b.n	8003324 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	2100      	movs	r1, #0
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff fd9d 	bl	8002e40 <xTimerGenericCommand>
 8003306:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <prvSwitchTimerLists+0x94>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	603b      	str	r3, [r7, #0]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <prvSwitchTimerLists+0xbc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1b4      	bne.n	8003298 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <prvSwitchTimerLists+0xbc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <prvSwitchTimerLists+0xc0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <prvSwitchTimerLists+0xbc>)
 800333a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <prvSwitchTimerLists+0xc0>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000c58 	.word	0x20000c58
 8003350:	20000c5c 	.word	0x20000c5c

08003354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800335a:	f000 f92f 	bl	80035bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <prvCheckForValidListAndQueue+0x60>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d120      	bne.n	80033a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003366:	4814      	ldr	r0, [pc, #80]	; (80033b8 <prvCheckForValidListAndQueue+0x64>)
 8003368:	f7fe f896 	bl	8001498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800336c:	4813      	ldr	r0, [pc, #76]	; (80033bc <prvCheckForValidListAndQueue+0x68>)
 800336e:	f7fe f893 	bl	8001498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <prvCheckForValidListAndQueue+0x6c>)
 8003374:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <prvCheckForValidListAndQueue+0x64>)
 8003376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <prvCheckForValidListAndQueue+0x70>)
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <prvCheckForValidListAndQueue+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <prvCheckForValidListAndQueue+0x74>)
 8003384:	4a11      	ldr	r2, [pc, #68]	; (80033cc <prvCheckForValidListAndQueue+0x78>)
 8003386:	2110      	movs	r1, #16
 8003388:	200a      	movs	r0, #10
 800338a:	f7fe f99d 	bl	80016c8 <xQueueGenericCreateStatic>
 800338e:	4603      	mov	r3, r0
 8003390:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <prvCheckForValidListAndQueue+0x60>)
 8003392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <prvCheckForValidListAndQueue+0x60>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <prvCheckForValidListAndQueue+0x60>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	490b      	ldr	r1, [pc, #44]	; (80033d0 <prvCheckForValidListAndQueue+0x7c>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fdb0 	bl	8001f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033a8:	f000 f938 	bl	800361c <vPortExitCritical>
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000c60 	.word	0x20000c60
 80033b8:	20000c30 	.word	0x20000c30
 80033bc:	20000c44 	.word	0x20000c44
 80033c0:	20000c58 	.word	0x20000c58
 80033c4:	20000c5c 	.word	0x20000c5c
 80033c8:	20000d0c 	.word	0x20000d0c
 80033cc:	20000c6c 	.word	0x20000c6c
 80033d0:	08003c24 	.word	0x08003c24

080033d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b04      	subs	r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b04      	subs	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b04      	subs	r3, #4
 8003402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003404:	4a08      	ldr	r2, [pc, #32]	; (8003428 <pxPortInitialiseStack+0x54>)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b14      	subs	r3, #20
 800340e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3b20      	subs	r3, #32
 800341a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800341c:	68fb      	ldr	r3, [r7, #12]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	0800342d 	.word	0x0800342d

0800342c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <prvTaskExitError+0x54>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d00a      	beq.n	8003456 <prvTaskExitError+0x2a>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	60fb      	str	r3, [r7, #12]
}
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <prvTaskExitError+0x28>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60bb      	str	r3, [r7, #8]
}
 8003468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800346a:	bf00      	nop
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0fc      	beq.n	800346c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c
	...

08003490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <pxCurrentTCBConst2>)
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	6808      	ldr	r0, [r1, #0]
 8003496:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800349a:	f380 8809 	msr	PSP, r0
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f380 8811 	msr	BASEPRI, r0
 80034aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80034ae:	4770      	bx	lr

080034b0 <pxCurrentTCBConst2>:
 80034b0:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop

080034b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80034b8:	4806      	ldr	r0, [pc, #24]	; (80034d4 <prvPortStartFirstTask+0x1c>)
 80034ba:	6800      	ldr	r0, [r0, #0]
 80034bc:	6800      	ldr	r0, [r0, #0]
 80034be:	f380 8808 	msr	MSP, r0
 80034c2:	b662      	cpsie	i
 80034c4:	b661      	cpsie	f
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	df00      	svc	0
 80034d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034d2:	bf00      	nop
 80034d4:	e000ed08 	.word	0xe000ed08

080034d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <xPortStartScheduler+0xd0>)
 80034e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <xPortStartScheduler+0xd4>)
 8003504:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003506:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003508:	2207      	movs	r2, #7
 800350a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800350c:	e009      	b.n	8003522 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3b01      	subs	r3, #1
 8003514:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003516:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d0ef      	beq.n	800350e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	d00a      	beq.n	8003550 <xPortStartScheduler+0x78>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	60bb      	str	r3, [r7, #8]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003558:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <xPortStartScheduler+0xd8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003562:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <xPortStartScheduler+0xd8>)
 8003564:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <xPortStartScheduler+0xdc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <xPortStartScheduler+0xdc>)
 8003574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <xPortStartScheduler+0xdc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <xPortStartScheduler+0xdc>)
 8003580:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003584:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003586:	f000 f8b9 	bl	80036fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <xPortStartScheduler+0xe0>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003590:	f7ff ff92 	bl	80034b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003594:	f7ff f8be 	bl	8002714 <vTaskSwitchContext>
	prvTaskExitError();
 8003598:	f7ff ff48 	bl	800342c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	e000e400 	.word	0xe000e400
 80035ac:	20000d5c 	.word	0x20000d5c
 80035b0:	20000d60 	.word	0x20000d60
 80035b4:	e000ed20 	.word	0xe000ed20
 80035b8:	2000000c 	.word	0x2000000c

080035bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	607b      	str	r3, [r7, #4]
}
 80035d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <vPortEnterCritical+0x58>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <vPortEnterCritical+0x58>)
 80035de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <vPortEnterCritical+0x58>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10f      	bne.n	8003608 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <vPortEnterCritical+0x5c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <vPortEnterCritical+0x4c>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	603b      	str	r3, [r7, #0]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <vPortEnterCritical+0x4a>
	}
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000000c 	.word	0x2000000c
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <vPortExitCritical+0x4c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <vPortExitCritical+0x24>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	607b      	str	r3, [r7, #4]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <vPortExitCritical+0x4c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <vPortExitCritical+0x4c>)
 8003648:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <vPortExitCritical+0x4c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <vPortExitCritical+0x42>
 8003652:	2300      	movs	r3, #0
 8003654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f383 8811 	msr	BASEPRI, r3
}
 800365c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	2000000c 	.word	0x2000000c
 800366c:	00000000 	.word	0x00000000

08003670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003670:	f3ef 8009 	mrs	r0, PSP
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <pxCurrentTCBConst>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003680:	6010      	str	r0, [r2, #0]
 8003682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003686:	f04f 0050 	mov.w	r0, #80	; 0x50
 800368a:	f380 8811 	msr	BASEPRI, r0
 800368e:	f7ff f841 	bl	8002714 <vTaskSwitchContext>
 8003692:	f04f 0000 	mov.w	r0, #0
 8003696:	f380 8811 	msr	BASEPRI, r0
 800369a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	6808      	ldr	r0, [r1, #0]
 80036a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036a6:	f380 8809 	msr	PSP, r0
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	4770      	bx	lr

080036b0 <pxCurrentTCBConst>:
 80036b0:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop

080036b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	607b      	str	r3, [r7, #4]
}
 80036d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036d2:	f7fe ff61 	bl	8002598 <xTaskIncrementTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <xPortSysTickHandler+0x40>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f383 8811 	msr	BASEPRI, r3
}
 80036ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <vPortSetupTimerInterrupt+0x30>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <vPortSetupTimerInterrupt+0x34>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <vPortSetupTimerInterrupt+0x38>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a09      	ldr	r2, [pc, #36]	; (8003738 <vPortSetupTimerInterrupt+0x3c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	4a08      	ldr	r2, [pc, #32]	; (800373c <vPortSetupTimerInterrupt+0x40>)
 800371a:	3b01      	subs	r3, #1
 800371c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800371e:	4b03      	ldr	r3, [pc, #12]	; (800372c <vPortSetupTimerInterrupt+0x30>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	e000e010 	.word	0xe000e010
 8003730:	e000e018 	.word	0xe000e018
 8003734:	20000000 	.word	0x20000000
 8003738:	10624dd3 	.word	0x10624dd3
 800373c:	e000e014 	.word	0xe000e014

08003740 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003746:	f3ef 8305 	mrs	r3, IPSR
 800374a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b0f      	cmp	r3, #15
 8003750:	d914      	bls.n	800377c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <vPortValidateInterruptPriority+0x6c>)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <vPortValidateInterruptPriority+0x70>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	7afa      	ldrb	r2, [r7, #11]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20a      	bcs.n	800377c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	607b      	str	r3, [r7, #4]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <vPortValidateInterruptPriority+0x74>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <vPortValidateInterruptPriority+0x78>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d90a      	bls.n	80037a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	603b      	str	r3, [r7, #0]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <vPortValidateInterruptPriority+0x60>
	}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	e000e3f0 	.word	0xe000e3f0
 80037b0:	20000d5c 	.word	0x20000d5c
 80037b4:	e000ed0c 	.word	0xe000ed0c
 80037b8:	20000d60 	.word	0x20000d60

080037bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037c8:	f7fe fe2c 	bl	8002424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037cc:	4b58      	ldr	r3, [pc, #352]	; (8003930 <pvPortMalloc+0x174>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037d4:	f000 f910 	bl	80039f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037d8:	4b56      	ldr	r3, [pc, #344]	; (8003934 <pvPortMalloc+0x178>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 808e 	bne.w	8003902 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01d      	beq.n	8003828 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80037ec:	2208      	movs	r2, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f023 0307 	bic.w	r3, r3, #7
 8003804:	3308      	adds	r3, #8
 8003806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <pvPortMalloc+0x6c>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	617b      	str	r3, [r7, #20]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d069      	beq.n	8003902 <pvPortMalloc+0x146>
 800382e:	4b42      	ldr	r3, [pc, #264]	; (8003938 <pvPortMalloc+0x17c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d864      	bhi.n	8003902 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003838:	4b40      	ldr	r3, [pc, #256]	; (800393c <pvPortMalloc+0x180>)
 800383a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800383c:	4b3f      	ldr	r3, [pc, #252]	; (800393c <pvPortMalloc+0x180>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003842:	e004      	b.n	800384e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d903      	bls.n	8003860 <pvPortMalloc+0xa4>
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f1      	bne.n	8003844 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003860:	4b33      	ldr	r3, [pc, #204]	; (8003930 <pvPortMalloc+0x174>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003866:	429a      	cmp	r2, r3
 8003868:	d04b      	beq.n	8003902 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2208      	movs	r2, #8
 8003870:	4413      	add	r3, r2
 8003872:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	2308      	movs	r3, #8
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	429a      	cmp	r2, r3
 800388a:	d91f      	bls.n	80038cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <pvPortMalloc+0xf8>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	613b      	str	r3, [r7, #16]
}
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f000 f8f8 	bl	8003abc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <pvPortMalloc+0x17c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <pvPortMalloc+0x17c>)
 80038d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <pvPortMalloc+0x17c>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <pvPortMalloc+0x184>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d203      	bcs.n	80038ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <pvPortMalloc+0x17c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <pvPortMalloc+0x184>)
 80038ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <pvPortMalloc+0x178>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003902:	f7fe fd9d 	bl	8002440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <pvPortMalloc+0x16a>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60fb      	str	r3, [r7, #12]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <pvPortMalloc+0x168>
	return pvReturn;
 8003926:	69fb      	ldr	r3, [r7, #28]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2000196c 	.word	0x2000196c
 8003934:	20001978 	.word	0x20001978
 8003938:	20001970 	.word	0x20001970
 800393c:	20001964 	.word	0x20001964
 8003940:	20001974 	.word	0x20001974

08003944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d048      	beq.n	80039e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003956:	2308      	movs	r3, #8
 8003958:	425b      	negs	r3, r3
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <vPortFree+0xac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <vPortFree+0x44>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60fb      	str	r3, [r7, #12]
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <vPortFree+0x62>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60bb      	str	r3, [r7, #8]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <vPortFree+0xac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d019      	beq.n	80039e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <vPortFree+0xac>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039cc:	f7fe fd2a 	bl	8002424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <vPortFree+0xb0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	4a06      	ldr	r2, [pc, #24]	; (80039f4 <vPortFree+0xb0>)
 80039dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039de:	6938      	ldr	r0, [r7, #16]
 80039e0:	f000 f86c 	bl	8003abc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80039e4:	f7fe fd2c 	bl	8002440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20001978 	.word	0x20001978
 80039f4:	20001970 	.word	0x20001970

080039f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <prvHeapInit+0xac>)
 8003a06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3307      	adds	r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <prvHeapInit+0xac>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a30:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <prvHeapInit+0xb0>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <prvHeapInit+0xb0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4413      	add	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a44:	2208      	movs	r2, #8
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0307 	bic.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <prvHeapInit+0xb4>)
 8003a58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <prvHeapInit+0xb4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <prvHeapInit+0xb4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <prvHeapInit+0xb4>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <prvHeapInit+0xb8>)
 8003a86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <prvHeapInit+0xbc>)
 8003a8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <prvHeapInit+0xc0>)
 8003a92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000d64 	.word	0x20000d64
 8003aa8:	20001964 	.word	0x20001964
 8003aac:	2000196c 	.word	0x2000196c
 8003ab0:	20001974 	.word	0x20001974
 8003ab4:	20001970 	.word	0x20001970
 8003ab8:	20001978 	.word	0x20001978

08003abc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <prvInsertBlockIntoFreeList+0xa8>)
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e002      	b.n	8003ad0 <prvInsertBlockIntoFreeList+0x14>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d8f7      	bhi.n	8003aca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d108      	bne.n	8003afe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	441a      	add	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	441a      	add	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d118      	bne.n	8003b44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <prvInsertBlockIntoFreeList+0xac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d00d      	beq.n	8003b3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	441a      	add	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e008      	b.n	8003b4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <prvInsertBlockIntoFreeList+0xac>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e003      	b.n	8003b4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d002      	beq.n	8003b5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	20001964 	.word	0x20001964
 8003b68:	2000196c 	.word	0x2000196c

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	2600      	movs	r6, #0
 8003b70:	4d0c      	ldr	r5, [pc, #48]	; (8003ba4 <__libc_init_array+0x38>)
 8003b72:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	f000 f830 	bl	8003be0 <_init>
 8003b80:	2600      	movs	r6, #0
 8003b82:	4d0a      	ldr	r5, [pc, #40]	; (8003bac <__libc_init_array+0x40>)
 8003b84:	4c0a      	ldr	r4, [pc, #40]	; (8003bb0 <__libc_init_array+0x44>)
 8003b86:	1b64      	subs	r4, r4, r5
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08003c60 	.word	0x08003c60
 8003ba8:	08003c60 	.word	0x08003c60
 8003bac:	08003c60 	.word	0x08003c60
 8003bb0:	08003c64 	.word	0x08003c64

08003bb4 <memcpy>:
 8003bb4:	440a      	add	r2, r1
 8003bb6:	4291      	cmp	r1, r2
 8003bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bbc:	d100      	bne.n	8003bc0 <memcpy+0xc>
 8003bbe:	4770      	bx	lr
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bcc:	d1f9      	bne.n	8003bc2 <memcpy+0xe>
 8003bce:	bd10      	pop	{r4, pc}

08003bd0 <memset>:
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4402      	add	r2, r0
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d100      	bne.n	8003bda <memset+0xa>
 8003bd8:	4770      	bx	lr
 8003bda:	f803 1b01 	strb.w	r1, [r3], #1
 8003bde:	e7f9      	b.n	8003bd4 <memset+0x4>

08003be0 <_init>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr

08003bec <_fini>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr
